"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[412760],{959754:function(e,t,n){n.r(t);var a=n(28453),l=n(296540),r=n(725441);function o(e){const t=Object.assign({p:"p",h2:"h2",a:"a",h3:"h3",pre:"pre",code:"code",h4:"h4",strong:"strong"},(0,a.R)(),e.components),{PageDescription:n,AnchorLinks:o,AnchorLink:s,InlineNotification:i}=t;return s||c("AnchorLink",!0),o||c("AnchorLinks",!0),i||c("InlineNotification",!0),n||c("PageDescription",!0),l.createElement(l.Fragment,null,l.createElement(n,null,l.createElement(t.p,null,"Starting from a base Create Next App, let’s install Carbon and begin using\nCarbon components. By the end you will have a Next.js app that uses the UI Shell\nto navigate between pages.")),"\n",l.createElement(o,null,l.createElement(s,null,"Fork, clone and branch"),l.createElement(s,null,"Build and start"),l.createElement(s,null,"Install Carbon"),l.createElement(s,null,"Install and build Sass"),l.createElement(s,null,"Add UI Shell"),l.createElement(s,null,"Create pages"),l.createElement(s,null,"Add routing"),l.createElement(s,null,"Submit pull request")),"\n",l.createElement(t.h2,null,"Preview"),"\n",l.createElement(t.p,null,"A\n",l.createElement(t.a,{href:"https://carbon-tutorial-nextjs-git-v11-next-step-2-carbon-design-system.vercel.app/"},"preview"),"\nof what you will build:"),"\n",l.createElement(r.A,{height:"200",title:"Carbon Next Tutorial Step 1",src:"https://carbon-tutorial-nextjs-git-v11-next-step-2-carbon-design-system.vercel.app/",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"}),"\n",l.createElement(t.h2,null,"Fork, clone and branch"),"\n",l.createElement(t.p,null,"This tutorial has an accompanying GitHub repository called\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-nextjs"},"carbon-tutorial-nextjs"),"\nthat we’ll use as a starting point for each step."),"\n",l.createElement(t.h3,null,"Fork"),"\n",l.createElement(t.p,null,"To begin, fork\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-nextjs"},"carbon-tutorial-nextjs"),"\nusing your GitHub account. Please note when forking you must uncheck “Copy the\nmain branch only” so you can access all branches / steps of the tutorial."),"\n",l.createElement(t.h3,null,"Clone"),"\n",l.createElement(t.p,null,"Go to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git clone [your fork SSH/HTTPS]\ncd carbon-tutorial-nextjs\n")),"\n",l.createElement(t.h3,null,"Add upstream remote"),"\n",l.createElement(t.p,null,"Add a remote called ",l.createElement(t.code,null,"upstream")," so we can eventually submit a pull request once\nyou have completed this tutorial step. There are two choices: SSH or HTTPS"),"\n",l.createElement(t.h4,null,"SSH"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git remote add upstream git@github.com:carbon-design-system/carbon-tutorial-nextjs.git\n")),"\n",l.createElement(t.h4,null,"HTTPS"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git remote add upstream https://github.com/carbon-design-system/carbon-tutorial-nextjs.git\n")),"\n",l.createElement(t.p,null,"Verify that your forked repository remotes are correct:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git remote -v\n")),"\n",l.createElement(t.p,null,"Your terminal should output something like this:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"origin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (push)\n")),"\n",l.createElement(t.h3,null,"Branch"),"\n",l.createElement(t.p,null,"Now that we have our repository set up, let’s check out the branch for this\ntutorial step’s starting point. Run the two commands:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git fetch upstream\ngit checkout -b v11-next-step-1 upstream/v11-next-step-1\n")),"\n",l.createElement(t.h2,null,"Build and start"),"\n",l.createElement(t.p,null,"We have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the Next.js app’s\ndependencies with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn\n")),"\n",l.createElement(t.p,null,"After the dependencies are installed, create a build with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn build\n")),"\n",l.createElement(t.p,null,"After the build and dependencies are installed, you can start the app with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn dev\n")),"\n",l.createElement(t.p,null,"This is a Next.js 13 app with a home page, its root layout and a global style\nsheet."),"\n",l.createElement(t.p,null,"Your default browser should open up with an empty page that says:\n",l.createElement(t.code,null,"Hello Carbon! Well, not quite yet. This is the starting point for the Carbon React tutorial.")),"\n",l.createElement(t.h2,null,"Install Carbon"),"\n",l.createElement(t.p,null,"Even though we installed existing dependencies, we’ve yet to install our v11\nCarbon package, ",l.createElement(t.code,null,"@carbon/react"),", which contains everything you need to build\nwith."),"\n",l.createElement(t.p,null,"Stop your development server with ",l.createElement(t.code,null,"CTRL-C")," and install Carbon dependencies with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn add @carbon/react@1.33.0\n")),"\n",l.createElement(t.h2,null,"Install and build Sass"),"\n",l.createElement(t.p,null,"We need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install ",l.createElement(t.code,null,"sass")," as a dependency."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn add sass@1.63.6\n")),"\n",l.createElement(t.p,null,"Then, start the app again. If your app’s currently running, you’ll need to\nrestart it for the new environment variable to be used."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn dev\n")),"\n",l.createElement(t.p,null,"The app looks as it did before. Next, let’s prepare our app for a Sass build."),"\n",l.createElement(t.p,null,"In ",l.createElement(t.code,null,"src")," directory, rename ",l.createElement(t.code,null,"globals.css")," as ",l.createElement(t.code,null,"globals.scss")," and change the import\nin ",l.createElement(t.code,null,"layout.js")," from ",l.createElement(t.code,null,"global.css")," to ",l.createElement(t.code,null,"globals.scss"),"."),"\n",l.createElement(t.h3,null,"Import carbon-component styles"),"\n",l.createElement(t.p,null,"In ",l.createElement(t.code,null,"globals.scss"),", import the Carbon styles by adding the following at the top\nof the file:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=src/app/globals.scss"},"@use '@carbon/react';\n\n/// Remove overrides once Carbon bugs are fixed upstream.\n/// Need grid option to not add page gutters at large viewports, to also use when nesting grids\n/// @link https://github.com/carbon-design-system/carbon/issues/2792\n@media (min-width: 42rem) {\n  .cds--grid--no-gutter {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/// Padding was introduced in 10.3.0, needs an option to let grid set the viewport gutter\n/// @link https://github.com/carbon-design-system/carbon/issues/3010\n.cds--content {\n  margin-top: 3rem;\n  background: var(--cds-background);\n}\n")),"\n",l.createElement(t.p,null,"In Next.js 13 there is a global style sheet and then every page has it own,\noptional, style sheet."),"\n",l.createElement(t.p,null,"Next, we’ll import a ",l.createElement(t.code,null,"Button")," from Carbon to test that our dependencies are\nworking properly. At the top of ",l.createElement(t.code,null,"page.js"),", import the ",l.createElement(t.code,null,"Button")," by adding the\nfollowing:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/page.js"},"'use client';\nimport { Button } from '@carbon/react';\n")),"\n",l.createElement(t.p,null,"We need ",l.createElement(t.code,null,"use client")," since the Carbon components we use are all client\ncomponents. In Next 13 pages are pulled in as children to layout files (see\nRootLayout ",l.createElement(t.code,null,"src/app/layout.js"),") and these are always server side components."),"\n",l.createElement(t.p,null,"In the ",l.createElement(t.code,null,"Page")," component return, you can now replace:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/app/page.js"},"<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon\n  React tutorial.\n</div>\n")),"\n",l.createElement(t.p,null,"with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-jsx",metaData:"path=src/app/page.js"},"<Button>Button</Button>\n")),"\n",l.createElement(t.p,null,"Congratulations, you’ve imported your first component! You should see a Carbon\nstyled button on the page."),"\n",l.createElement(t.h2,null,"Add UI Shell"),"\n",l.createElement(t.p,null,"Next, we’re going to create a React component called ",l.createElement(t.code,null,"TutorialHeader")," to use\nwith the UI Shell Carbon component. In the ",l.createElement(t.code,null,"src")," directory, create a\n",l.createElement(t.code,null,"components")," directory and inside of that, a ",l.createElement(t.code,null,"TutorialHeader")," directory. Create\nthe following files inside ",l.createElement(t.code,null,"src/components/TutorialHeader"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"src/components/TutorialHeader\n├──_tutorial-header.scss\n└──TutorialHeader.js\n")),"\n",l.createElement(t.h3,null,"Add UI Shell Sass"),"\n",l.createElement(t.p,null,"Next, in ",l.createElement(t.code,null,"globals.scss"),", we’ll import our ",l.createElement(t.code,null,"TutorialHeader")," styles. Add this line\nto the top of the file:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=src/app/globals.scss"},"@use '@/components/TutorialHeader/tutorial-header';\n")),"\n",l.createElement(t.h3,null,"Import and export the header"),"\n",l.createElement(t.p,null,"Next we’ll import our Carbon UI Shell components into ",l.createElement(t.code,null,"TutorialHeader.js"),". Set\nup the file like so:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},'import {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from \'@carbon/react\';\n\nconst TutorialHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label="Carbon Tutorial">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label="Open menu"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href="/" prefix="IBM">\n          Carbon Tutorial\n        </HeaderName>\n        <HeaderNavigation aria-label="Carbon Tutorial">\n          <HeaderMenuItem href="/repos">Repositories</HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav\n          aria-label="Side navigation"\n          expanded={isSideNavExpanded}\n          isPersistent={false}>\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem href="/repos">Repositories</HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default TutorialHeader;\n')),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," you can find a description of the different components used in the UI\nShell in our\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon/tree/main/packages/react/src/components/UIShell"},"@carbon/react"),"\npackage.")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," When creating navigation headers, it’s important to have a\n",l.createElement(t.code,null,"Skip to content")," link so keyboard users can skip the navigation items and go\nstraight to the main content.")),"\n",l.createElement(t.h3,null,"Import icons"),"\n",l.createElement(t.p,null,"First we will install the icons we will use in the header"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn add @carbon/icons-react\n")),"\n",l.createElement(t.p,null,"Now let’s import the icons. In the ",l.createElement(t.code,null,"TutorialHeader.js")," file, we need to import\neach individual icon we will use."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},"import { Switcher, Notification, UserAvatar } from '@carbon/icons-react';\n")),"\n",l.createElement(t.p,null,"Then we need to add the ",l.createElement(t.code,null,"HeaderGlobalAction")," component inside of the\n",l.createElement(t.code,null,"HeaderGlobalBar")," where we will add our icons. These represent actions in the\nheader a user can make. Replace:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},"<HeaderGlobalBar />\n")),"\n",l.createElement(t.p,null,"With:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-jsx",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},'<HeaderGlobalBar>\n  <HeaderGlobalAction\n    aria-label="Notifications"\n    tooltipAlignment="center"\n    className="action-icons">\n    <Notification size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction\n    aria-label="User Avatar"\n    tooltipAlignment="center"\n    className="action-icons">\n    <UserAvatar size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label="App Switcher" tooltipAlignment="end">\n    <Switcher size={20} />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n')),"\n",l.createElement(t.h3,null,"Render the header"),"\n",l.createElement(t.p,null,"Next we’ll render our UI Shell by importing our ",l.createElement(t.code,null,"TutorialHeader")," component and\n",l.createElement(t.code,null,"Content")," into a provider components in the Root Layout. We do this because\nlayout components in Next.js 13 are server-side components."),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," We can wrap the ",l.createElement(t.code,null,"{children}")," in Root Layout with a Provider component\nthat will use to hold the components we want across all pages. See this\n",l.createElement(t.a,{href:"https://nextjs.org/docs/getting-started/react-essentials#rendering-third-party-context-providers-in-server-components"},"explanation"),"\nin Next docs.")),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/layout.js"},"import './globals.scss';\nimport { Providers } from './providers';\n\nexport const metadata = {\n  title: 'Carbon + Next13',\n  description: 'IBM Carbon Tutorial with Next.js 13',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n")),"\n",l.createElement(t.p,null,"Create a ",l.createElement(t.code,null,"providers.js")," file within the app folder with the following content."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/providers.js"},"'use client';\n\nimport TutorialHeader from '@/components/TutorialHeader/TutorialHeader';\nimport { Content } from '@carbon/react';\n\nexport function Providers({ children }) {\n  return (\n    <div>\n      <TutorialHeader />\n      <Content>{children}</Content>\n    </div>\n  );\n}\n")),"\n",l.createElement(t.p,null,"You should now see a styled UI Shell header and a button below it."),"\n",l.createElement(t.h2,null,"Create pages"),"\n",l.createElement(t.p,null,"Next thing we need to do is create the files for our content. We already have a\nfolder called ",l.createElement(t.code,null,"app")," in ",l.createElement(t.code,null,"src"),". This should be a sibling of ",l.createElement(t.code,null,"src/components"),"."),"\n",l.createElement(t.p,null,"Since our app will have two pages, we’ll create two folders in ",l.createElement(t.code,null,"src/app"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"src/app\n├── home\n└── repos\n")),"\n",l.createElement(t.p,null,"Next.js uses these folders for page routing which is built into the framework,\nwe do not need separate React routing. In each there is a ",l.createElement(t.code,null,"page.js")," and\noptionally a ",l.createElement(t.code,null,"layout.js")," and styling sheet."),"\n",l.createElement(t.p,null,"Create the following files in the ",l.createElement(t.code,null,"home")," folder:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"src/app/home\n├── _landing-page.scss\n└── page.js\n")),"\n",l.createElement(t.p,null,"Create the following files in the ",l.createElement(t.code,null,"repos")," folder:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"src/app/repos\n├── _repo-page.scss\n└── page.js\n")),"\n",l.createElement(t.h3,null,"Set up content Sass"),"\n",l.createElement(t.p,null,"Next, we’ll import our content Sass files in ",l.createElement(t.code,null,"globals.scss"),", like so:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=src/app/globals.scss"},"@use '@/app/home/landing-page';\n@use '@/app/repos/repo-page';\n")),"\n",l.createElement(t.h3,null,"Import and export content pages"),"\n",l.createElement(t.p,null,"Now that our stylesheets are set up, we need to create our pages’ components.\nStarting with ",l.createElement(t.code,null,"LandingPage"),", just like with our header, we need to export the\ncomponent in ",l.createElement(t.code,null,"javascript path=src/app/home/page.js")," by adding:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/home/page.js"},"`use client`;\n\nexport default function LandingPage() {\n  return <div>LANDING PAGE</div>;\n}\n")),"\n",l.createElement(t.p,null,"And we will add this into our root page:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/page.js"},"import LandingPage from './home/page';\n\nexport default function Page() {\n  return <LandingPage />;\n}\n")),"\n",l.createElement(t.p,null,"We’ll repeat this process with ",l.createElement(t.code,null,"RepoPage"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/repos/page.js"},"`use client`;\n\nexport default function RepoPage() {\n  return <div>REPO PAGE</div>;\n}\n")),"\n",l.createElement(t.p,null,"Navigate to the repos page by adding ",l.createElement(t.code,null,"/repos")," at the end of your locally hosted\nsite to see your repos page."),"\n",l.createElement(t.p,null,"Awesome! We’ve just created our content pages with automatic page routing\ncourtesy of Next.js."),"\n",l.createElement(t.p,null,"After that we need to do a couple of quick fixes to the UI Shell to work with\nNext.js links."),"\n",l.createElement(t.p,null,"Add the ",l.createElement(t.code,null,"Link")," import in ",l.createElement(t.code,null,"TutorialHeader.js"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},"import Link from 'next/link';\n")),"\n",l.createElement(t.p,null,"We need to use the ",l.createElement(t.code,null,"Link")," component instead of the default anchor elements to\nprevent full page reload when navigating to different pages in Next.js\napplications. To use ",l.createElement(t.code,null,"Link"),", we wrap ",l.createElement(t.code,null,"HeaderName")," component and pass through\n",l.createElement(t.code,null,"href")," elements to it:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},'<Link href="/" passHref legacyBehavior>\n  <HeaderName prefix="IBM">Carbon Tutorial</HeaderName>\n</Link>\n')),"\n",l.createElement(t.p,null,"Do the same with the components ",l.createElement(t.code,null,"HeaderNavigation")," and ",l.createElement(t.code,null,"HeaderSideNavItems")," that\ncontain ",l.createElement(t.code,null,'href="/repos"'),", updating them to:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},'<HeaderNavigation aria-label="Carbon Tutorial">\n  <Link href="/repos" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderNavigation>\n')),"\n",l.createElement(t.p,null,"and the following:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/components/TutorialHeader/TutorialHeader.js"},'<HeaderSideNavItems>\n  <Link href="/repos" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderSideNavItems>\n')),"\n",l.createElement(t.p,null,"You should now have a working header that routes to different pages without full\npage reload! However, our page does not match the design specs. We need to\nchange the header theme to ",l.createElement(t.code,null,"g100")," to match the specs."),"\n",l.createElement(t.p,null,"In ",l.createElement(t.code,null,"providers.js")," we will add inline theming for our navigation. First, we need\nto import our new ",l.createElement(t.code,null,"Theme")," component."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/providers.js"},"import { Content, Theme } from '@carbon/react';\n")),"\n",l.createElement(t.p,null,"Then, we will wrap ",l.createElement(t.code,null,"Theme")," around our header, and set the zoned theme using the\n",l.createElement(t.code,null,"theme")," prop, which accepts one of four strings: ",l.createElement(t.code,null,'"white"'),", ",l.createElement(t.code,null,'"g10"'),", ",l.createElement(t.code,null,'"g90"')," or\n",l.createElement(t.code,null,'"g100"'),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/app/providers.js"},'<div>\n  <Theme theme="g100">\n    <TutorialHeader />\n  </Theme>\n  <Content>{children}</Content>\n</div>\n')),"\n",l.createElement(t.p,null,"We have one last thing to fix before we’re done. Because we changed the header\ntheme to dark, the ",l.createElement(t.code,null,"<HeaderGlobalAction>")," tooltips are now light instead of\ndark, and when you scroll the page, it blends into the content. To fix this,\nwe’ll add some overriding styles in ",l.createElement(t.code,null,"_tutorial-header.scss"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=src/components/TutorialHeader/_tutorial-header.scss"},"@use '@carbon/react/scss/colors';\n\n// overriding header tooltip bg color\n// because the navigation is dark themed while the content is white\n// which means the dark theme tooltip bg blends into the white content bg\n.cds--header__global .cds--popover-content {\n  background-color: colors.$gray-20;\n}\n\n.cds--header__global .cds--popover-caret {\n  background-color: colors.$gray-20;\n}\n")),"\n",l.createElement(t.h2,null,"Submit pull request"),"\n",l.createElement(t.p,null,"We’re going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts."),"\n",l.createElement(t.h3,null,"Continuous integration (CI) check"),"\n",l.createElement(t.p,null,"We have a ",l.createElement(t.code,null,"ci-check")," script defined in ",l.createElement(t.code,null,"package.json")," that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called ",l.createElement(t.a,{href:"https://prettier.io"},"Prettier"),". You’d typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn ci-check\n")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If the ",l.createElement(t.code,null,"ci-check")," is giving an error, it’s likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn’t formatting with Prettier on save. To get ",l.createElement(t.code,null,"ci-check")," to pass, run\n",l.createElement(t.code,null,"yarn format")," then re-run ",l.createElement(t.code,null,"yarn ci-check"),".")),"\n",l.createElement(t.h3,null,"Git commit and push"),"\n",l.createElement(t.p,null,"Before we can create a pull request, stage and commit all of your changes:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},'git add --all && git commit -m "feat(tutorial): complete step 1"\n')),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," You’ll notice that your commit includes binaries in the ",l.createElement(t.code,null,".yarn/cache"),"\nfolder. That’s expected as the repository is configured to run\n",l.createElement(t.a,{href:"https://yarnpkg.com/blog/2016/11/24/offline-mirror"},"Yarn offline")," for more\nreliable builds. Future tutorial steps that don’t install new packages won’t\nhave ",l.createElement(t.code,null,".yarn/cache")," commit changes.")),"\n",l.createElement(t.p,null,"Then, push to your repository:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git push origin v11-next-step-1\n")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n",l.createElement(t.a,{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"},"create a personal access token for the command line"),".\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If you receive a ",l.createElement(t.code,null,"non-fast-forward")," error, it’s likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run ",l.createElement(t.code,null,"git pull upstream v11-next-step-1")," to merge the changes into your\nbranch, then you can try pushing again. Or, you can\n",l.createElement(t.a,{href:"https://help.github.com/en/articles/syncing-a-fork"},"manually merge")," in the\nupstream changes.")),"\n",l.createElement(t.h3,null,"Pull request (PR)"),"\n",l.createElement(t.p,null,"Finally, visit\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-nextjs"},"carbon-react-tutorial"),"\nto “Compare & pull request”. In doing so, make sure that you are comparing to\n",l.createElement(t.code,null,"v11-next-step-1")," into ",l.createElement(t.code,null,"base: v11-next-step-1"),". Take notice of the\n",l.createElement(t.a,{href:"https://www.netlify.com"},"Netlify")," bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process."),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We’ll close your PR so we can keep the repository’s remote branches\npristine and ready for the next person!")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If your PR fails the CircleCI test with the error\n",l.createElement(t.code,null,"Can't make a request in offline mode"),", try running the following command:\n",l.createElement(t.code,null,"rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install"),".\nAdd and commit the changes once this completes, and try pushing again.")))}function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(e={}){const{wrapper:t}=Object.assign({},(0,a.R)(),e.components);return t?l.createElement(t,e,l.createElement(o,e)):o(e)}},725441:function(e,t,n){n.d(t,{A:function(){return l}});var a=n(296540);var l=({title:e,...t})=>a.createElement("iframe",Object.assign({loading:"lazy",title:e},t,{className:"Preview-module--preview--3e1df"}))}}]);