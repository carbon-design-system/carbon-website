"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[408167],{910841:function(e,t,n){n.r(t);var a=n(28453),l=n(296540),o=n(725441);function r(e){const t=Object.assign({p:"p",h3:"h3",a:"a",h2:"h2",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li",em:"em"},(0,a.R)(),e.components),{PageDescription:n,AnchorLinks:r,AnchorLink:i,InlineNotification:c}=t;return i||s("AnchorLink",!0),r||s("AnchorLinks",!0),c||s("InlineNotification",!0),n||s("PageDescription",!0),l.createElement(l.Fragment,null,l.createElement(n,null,l.createElement(t.p,null,"This step takes our static components and populates them with data from the\nGitHub GraphQL API – loading states and all. We’ll be displaying Carbon\nrepository information in a data table.")),"\n",l.createElement(r,null,l.createElement(i,null,"Fork, clone and branch"),l.createElement(i,null,"Install dependencies"),l.createElement(i,null,"Create access token"),l.createElement(i,null,"Connect to Apollo"),l.createElement(i,null,"Fetch data"),l.createElement(i,null,"Populate data table"),l.createElement(i,null,"Add loading"),l.createElement(i,null,"Add pagination"),l.createElement(i,null,"Submit pull request")),"\n",l.createElement(t.h3,null,"Preview"),"\n",l.createElement(t.p,null,"The ",l.createElement(t.a,{href:"https://developer.github.com/v4/"},"GitHub GraphQL API")," is very well\ndocumented, and even though the focus of this tutorial isn’t learning and using\nGraphQL, it’s a great opportunity to fetch Carbon-related data for this Carbon\ntutorial."),"\n",l.createElement(t.p,null,"To do so, we’ll be using Apollo Client, the front-end component of the\n",l.createElement(t.a,{href:"https://www.apollographql.com/docs/intro/platform"},"Apollo Platform"),". Apollo\nprovides several open source tools for using GraphQL throughout your\napplication’s stack. Apollo Client is a sophisticated GraphQL client that\nmanages data and state in an application."),"\n",l.createElement(t.p,null,"A ",l.createElement(t.a,{href:"https://vue-step-4--carbon-tutorial-vue.netlify.com"},"preview")," of what you\nwill build (see repositories page):"),"\n",l.createElement(o.A,{height:"400",title:"Carbon Tutorial Step 3",src:"https://vue-step-4--carbon-tutorial-vue.netlify.com",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"}),"\n",l.createElement(t.h2,null,"Fork, clone and branch"),"\n",l.createElement(t.p,null,"This tutorial has an accompanying GitHub repository called\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-vue"},"carbon-tutorial-vue"),"\nthat we’ll use as a starting point for each step. If you haven’t forked and\ncloned that repository yet, and haven’t added the upstream remote, go ahead and\ndo so by following the\n",l.createElement(t.a,{href:"/developing/vue-tutorial/step-1#fork-clone-and-branch"},"step 2 instructions"),"."),"\n",l.createElement(t.h3,null,"Branch"),"\n",l.createElement(t.p,null,"With your repository all set up, let’s check out the branch for this tutorial\nstep’s starting point."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git fetch upstream\ngit checkout -b vue-step-3 upstream/vue-step-3\n")),"\n",l.createElement(t.h3,null,"Build and start app"),"\n",l.createElement(t.p,null,"Install the app’s dependencies:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn\n")),"\n",l.createElement(t.p,null,"Then, start the app:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn serve\n")),"\n",l.createElement(t.p,null,"You should see something similar to where the\n",l.createElement(t.a,{href:"/developing/vue-tutorial/step-2"},"previous step")," left off. Stop your app with\n",l.createElement(t.code,null,"CTRL-C")," and let’s get everything installed."),"\n",l.createElement(t.h2,null,"Install dependencies"),"\n",l.createElement(t.p,null,"We’ll shortcut this using the Vue CLI, if you’d like more information head over\nto\n",l.createElement(t.a,{href:"https://vue-apollo.netlify.com/guide/installation.html#vue-cli-plugin"},"Vue Apollo Installation"),"\nfor details."),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If you have not yet installed the Vue CLI, you will need to\n",l.createElement(t.a,{href:"https://cli.vuejs.org/"},"install the Vue CLI")," before running the Vue Apollo\nInstallation.")),"\n",l.createElement(t.p,null,"Install the following"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.code,null,"apollo-boost")," - package containing everything you need to set up Apollo\nClient"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"graphql")," - parses your GraphQL queries"),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"vue-apollo")," - Apollo integration for Vue"),"\n"),"\n",l.createElement(t.p,null,"Using the command:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"vue add apollo\n")),"\n",l.createElement(t.p,null,"At the following prompts answer ‘No’ to each of the questions."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"Add example code? No"),"\n",l.createElement(t.li,null,"Add a GraphQL API Server? No"),"\n",l.createElement(t.li,null,"Configure Apollo Engine? No"),"\n"),"\n",l.createElement(t.h2,null,"Create access token"),"\n",l.createElement(t.p,null,"You’ll need a personal access token from your GitHub account in order to make\nrequests to the GitHub API. Check out\n",l.createElement(t.a,{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"},"this guide"),"\nto see how to get one."),"\n",l.createElement(t.p,null,"When you get to the scope/permissions step, you can leave them all unchecked. We\ndon’t need any special permissions, we just need access to the public API."),"\n",l.createElement(t.p,null,"Once you have your token, we need to put it in a place where ",l.createElement(t.code,null,"create-vue-app"),"\ncan use it. When your application is being built and developed, create-vue-app\nwill parse environmental variables in any file that starts with ",l.createElement(t.code,null,".env")," and make\nthem available under ",l.createElement(t.code,null,"process.env.MY_VARIABLE"),"."),"\n",l.createElement(t.p,null,"One caveat is that we need to start our variables with ",l.createElement(t.code,null,"VUE_APP_"),". You can read\nmore about environmental variables in\n",l.createElement(t.a,{href:"https://cli.vuejs.org/guide/mode-and-env.html#environment-variables"},"create-vue-app’s guide"),"."),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If you already have a valid GitHub Personal Access Token, you can use\nthat token here.")),"\n",l.createElement(t.p,null,"Since we don’t want to commit this file to Git, we can put it in ",l.createElement(t.code,null,".env.local"),"\nwhich is in our ",l.createElement(t.code,null,".gitignore")," list. Your file should just have a single line like\nthis one, where the ",l.createElement(t.code,null,"x"),"s are replaced with your unique token."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash",metaData:"path=.env.local"},"VUE_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\n")),"\n",l.createElement(t.p,null,"Go ahead and start your app with ",l.createElement(t.code,null,"yarn serve"),", or, if your app is running,\nyou’ll need to restart it to get access to this token."),"\n",l.createElement(t.h2,null,"Connect to Apollo"),"\n",l.createElement(t.p,null,"The ",l.createElement(t.code,null,"vue-apollo")," plugin has made a number of changes to our project."),"\n",l.createElement(t.p,null,"If you open ",l.createElement(t.code,null,"src/main.js")," you will see that the CLI has updated this file with\nthe following:."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/main.js"},"import { createProvider } from 'vue-apollo';\n\nnew Vue({\n  router,\n  apolloProvider: createProvider(),\n  render: (h) => h(App),\n}).$mount('#app');\n")),"\n",l.createElement(t.p,null,"This is loading from a file the CLI created for you ",l.createElement(t.code,null,"src/vue-apollo.js")," which we\nneed to update to target the github api."),"\n",l.createElement(t.p,null,"Update the following values:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/vue-apollo.js"},"// Use our access token\nconst AUTH_TOKEN = process.env.VUE_APP_GITHUB_PERSONAL_ACCESS_TOKEN;\n\n// Target github api\nconst httpEndpoint =\n  process.env.VUE_APP_GRAPHQL_HTTP || 'https://api.github.com/graphql';\n")),"\n",l.createElement(t.p,null,"Update only the ",l.createElement(t.code,null,"wsEndpoint")," and ",l.createElement(t.code,null,"getAuth")," properties of the ",l.createElement(t.code,null,"defaultOptions"),"\nobject:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"const defaultOptions = {\n  // set wsEndpoint to null\n  wsEndpoint: process.env.VUE_APP_GRAPHQL_WS,\n\n  // Use the form expected by github for authorization\n  getAuth: (tokenName) => `Bearer ${tokenName}`,\n};\n")),"\n",l.createElement(t.h2,null,"Fetch data"),"\n",l.createElement(t.h3,null,"Imports"),"\n",l.createElement(t.p,null,"Add the following imports to the top of the script section of ",l.createElement(t.code,null,"RepoPage.vue"),":"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoPage.vue"},"import gql from 'graphql-tag';\n")),"\n",l.createElement(t.h3,null,"Query"),"\n",l.createElement(t.p,null,"Next we’ll assemble our GraphQL query to fetch only the data we need from the\nGraphQL API. We’ll do this using the ",l.createElement(t.code,null,"gql")," helper we just imported. The ",l.createElement(t.code,null,"gql"),"\nhelper lets you write GraphQL queries using interpolated strings (backticks) in\nJavaScript. In addition, we’ll be using the ",l.createElement(t.code,null,"Query")," component from ",l.createElement(t.code,null,"vue-apollo"),"\nwhich gives us some great information about our query’s loading state in\naddition to the data."),"\n",l.createElement(t.p,null,"You can use GitHub’s ",l.createElement(t.a,{href:"https://developer.github.com/v4/explorer/"},"explorer")," tool\nto write and test your own queries. Try copying the query below and experiment\nwith changing the properties. You can also click the “Docs” button in the top\nright of the explorer to view all of the available data and query parameters."),"\n",l.createElement(t.p,null,"If you’d like some more information regarding writing queries and using the\nQuery component, we recommend\n",l.createElement(t.a,{href:"https://www.apollographql.com/docs/tutorial/queries"},"Apollo’s documentation")," on\nthis topic."),"\n",l.createElement(t.p,null,"Add this after your imports:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-graphql",metaData:"path=src/views/RepoPage/RepoPage.vue"},"const REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n")),"\n",l.createElement(t.p,null,"Next, we need to configure apollo in our component script, adding the following\nafter the data() declaration."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoPage.vue"},"apollo: {\n  organization: REPO_QUERY\n},\n")),"\n",l.createElement(t.p,null,"At this point, we should run our query view the raw the results to verify that\nthe request is working."),"\n",l.createElement(t.p,null,"In RepoPage.vue add the following before the ",l.createElement(t.code,null,"RepoTable")," tag."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoPage.vue"},"{{ this.organization }}\n")),"\n",l.createElement(t.p,null,"When the data loads you should see the response rendered on your repository\npage. If not, check the console to see if there are any errors and fix."),"\n",l.createElement(t.p,null,"Revert this last change and continue."),"\n",l.createElement(t.p,null,"This data is not quite in the format our ",l.createElement(t.code,null,"RepoTable")," component is expecting so\nwe’ll use a computed property to transform it. Computed properties in Vue cache\nand watch their reactive dependencies for us."),"\n",l.createElement(t.p,null,"Remove the ‘rows’ constant and its use in the data declaration, and add this\ncomputed property."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoPage.vue"},"computed: {\n  rows() {\n      if (!this.organization) {\n      return [];\n    } else {\n      return this.organization.repositories.nodes.map(row => ({\n        ...row,\n        key: row.id,\n        stars: row.stargazers.totalCount,\n        issueCount: row.issues.totalCount,\n        createdAt: new Date(row.createdAt).toLocaleDateString(),\n        updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n        links: { url: row.url, homepageUrl: row.homepageUrl }\n      }));\n    }\n  }\n}\n")),"\n",l.createElement(t.p,null,"At this point you have a working table but the links column clearly isn’t what\nwe want."),"\n",l.createElement(t.h3,null,"Helper component"),"\n",l.createElement(t.p,null,"This column in the data table will be a list of repository and home page links,\nso let’s create a component called ",l.createElement(t.code,null,"LinkList"),"."),"\n",l.createElement(t.p,null,"Add the following to create your component:"),"\n",l.createElement(t.p,null,"A template section:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/LinkList.vue"},'<ul class="link-list">\n  <li>\n    <cv-link :href="url">GitHub</cv-link>\n  </li>\n\n  <li v-if="homepageUrl">\n    <span>&nbsp;|&nbsp;</span>\n    <cv-link :href="homepageUrl">Homepage</cv-link>\n  </li>\n</ul>\n')),"\n",l.createElement(t.p,null,"A script section:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/LinkList.vue"},"export default {\n  name: 'LinkList',\n  props: {\n    url: String,\n    homepageUrl: String,\n  },\n};\n")),"\n",l.createElement(t.p,null,"And a style section:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=src/views/RepoPage/LinkList.vue"},".link-list {\n  display: flex;\n}\n")),"\n",l.createElement(t.p,null,"Now let’s make use of this component in our ",l.createElement(t.code,null,"RepoTable")," component."),"\n",l.createElement(t.p,null,"At the top of the script section import the link list component:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoTable.vue"},"import LinkList from './LinkList';\n")),"\n",l.createElement(t.p,null,"And below the name of the component add:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoTable.vue"},"  components: { LinkList },\n")),"\n",l.createElement(t.p,null,"Then make use of it in our template replacing:"),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'<cv-data-table-cell\n  v-for="(cell, cellIndex) in row.data"\n  :key="`${cellIndex}`"\n  >{{cell}}</cv-data-table-cell>\n')),"\n","\n",l.createElement(t.p,null,"with"),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'<cv-data-table-cell v-for="(cell, cellIndex) in row.data" :key="`${cellIndex}`">\n  <template v-if="!cell.url">\n    {{cell}}\n  </template>\n  <link-list v-else :url="cell.url" :homepage-url="cell.homepageUrl" />\n</cv-data-table-cell>\n')),"\n","\n",l.createElement(t.p,null,"Here in order to switch between the standard rendering of a data cell we’ve\nwrapped our standard ",l.createElement(t.code,null,"{{cell}}")," rendering in a template tag. The template tag is\nnon-rendering so it will disappear, leaving us with the same content as before."),"\n",l.createElement(t.p,null,"Using the v-if and v-else directives we switch based on the contents of the cell\nbetween the standard rendering and the LinkList component."),"\n",l.createElement(t.p,null,"Checking our output again, you should now see the LinkList component rendering\nthe final column."),"\n",l.createElement(t.p,null,"Next we’ll update our row description. Update the computed property data() in\n",l.createElement(t.code,null,"RepoTable.vue")," to have the following description:"),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoTable.vue"},"  description: row.description\n")),"\n","\n",l.createElement(t.p,null,"Check the output again and you should find the descriptions are updated."),"\n",l.createElement(t.p,null,"After this many refreshes you may have noticed a slight delay in the data\nloading. As outlined in the\n",l.createElement(t.a,{href:"https://vue-apollo.netlify.com/guide/apollo/#apollo"},"documentation"),", all\ncomponents contained under one with an apolloProvider have a ",l.createElement(t.code,null,"$apollo"),"\nattribute. As we added the ",l.createElement(t.code,null,"apolloProvider")," to our app when creating the Vue\ninstance it is available to us everywhere."),"\n",l.createElement(t.p,null,"We can use the property to react to\n",l.createElement(t.a,{href:"https://vue-apollo.netlify.com/guide/apollo/queries.html#loading-state"},"loading state"),"."),"\n",l.createElement(t.p,null,"First let’s demonstrate that this works."),"\n",l.createElement(t.p,null,"Pass the loading state into our ",l.createElement(t.code,null,"RepoTable")," component by updating the template\nwith the following:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoPage.vue"},'<repo-table\n  :headers="headers"\n  :rows="rows"\n  title="Carbon Repositories"\n  helperText="A collection of public Carbon repositories."\n  :loading="$apollo.loading" />\n')),"\n",l.createElement(t.p,null,"Next add this property to the ",l.createElement(t.code,null,"RepoTable")," component:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoTable.vue"},"  props: {\n    headers: Array,\n    rows: Array,\n    title: String,\n    helperText: String,\n    loading: Boolean,\n  },\n")),"\n",l.createElement(t.p,null,"Making use of the property to display a loading message."),"\n",l.createElement(t.p,null,"Replace:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'<cv-data-table\n  :columns="columns"\n  :title="title"\n  :helper-text="helperText"></cv-data-table>\n')),"\n",l.createElement(t.p,null,"with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'<div v-if="loading">Loading...</div>\n<cv-data-table\n  v-else\n  :columns="columns"\n  :title="title"\n  :helper-text="helperText"></cv-data-table>\n')),"\n",l.createElement(t.p,null,"Here we have made use of the v-if and v-else directives to switch content based\non the state of ",l.createElement(t.code,null,"$apollo.loading"),". If you refresh your app you should see this\ntake effect."),"\n",l.createElement(t.p,null,"Now that we know this is works let’s try something a bit more sophisticated and\nreplace the div containing our loading message with use of the\n",l.createElement(t.code,null,"CvDataTableSkeleton")," component."),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'<cv-data-table-skeleton\n  v-if="loading"\n  :columns="columns"\n  :title="title"\n  :helper-text="helperText"\n  :rows="10"\n/>\n')),"\n","\n",l.createElement(t.p,null,"We need to tell the loading skeleton how many rows to render, so let’s use 10\nskeleton rows to prepare for the next enhancement…"),"\n",l.createElement(t.h2,null,"Add pagination"),"\n",l.createElement(t.p,null,"Pagination! Instead of rendering every repository, let’s add pagination to the\ndata table to only render 10 at a time. Depending on your specific requirements,\nyou may need to fetch new data each time that you interact with the pagination\ncomponent, but for simplicity, we’re going to make one request to fetch all\ndata, and then paginate the in-memory row data."),"\n",l.createElement(t.p,null,"Let’s start by adjusting our ",l.createElement(t.code,null,"PageTable")," component template to add pagination.\nIf you review the\n",l.createElement(t.a,{href:"http://vue.carbondesignsystem.com/?path=/info/components-cvdatatable--default"},"storybook notes"),"\nyou’ll see that pagination is added to the data table by supplying a pagination\nobject and listening for pagination events as follows."),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoTable.vue"},'  <cv-data-table\n    v-else\n    :columns="columns"\n    :title="title"\n    :helper-text="helperText"\n    :pagination="{ numberOfItems: this.totalRows }"\n    @pagination="$emit(\'pagination\', $event)"\n>\n')),"\n","\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," ",l.createElement(t.code,null,":prop")," is an abbreviation of ",l.createElement(t.code,null,"v-bind:prop"),". ",l.createElement(t.code,null,"@event")," is an\nabbreviation of ",l.createElement(t.code,null,"v-on:event"),".")),"\n",l.createElement(t.p,null,"In the pagination event we’ve used $emit and $event to re-raise the pagination\nevent to our ",l.createElement(t.code,null,"RepoPage")," component so that it can arrange to pass only the rows\nwe want to see to the ",l.createElement(t.code,null,"RepoTable")," component."),"\n",l.createElement(t.p,null,"We also need to add the ",l.createElement(t.code,null,"totalRows")," property used in the data tables pagination\nproperty."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoTable.vue"},"totalRows: Number,\n")),"\n",l.createElement(t.p,null,"Next to our ",l.createElement(t.code,null,"RepoPage")," component, let’s first update our template by updating\nour ",l.createElement(t.code,null,"RepoTable")," use with the following attributes."),"\n","\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoPage.vue"},':rows="pagedRows"\n:totalRows="rows.length"\n@pagination="onPagination"\n')),"\n","\n",l.createElement(t.p,null,"replacing"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=src/views/RepoPage/RepoPage.vue"},':rows="rows"\n')),"\n",l.createElement(t.p,null,"Next in the data property of our component add values for ",l.createElement(t.code,null,"pageSize"),",\n",l.createElement(t.code,null,"pageStart")," and ",l.createElement(t.code,null,"page")," into the data method return to support our pagination."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoPage.vue"},"  data() {\n    return {\n      headers,\n      pageSize: 0,\n      pageStart: 0,\n      page: 0\n    };\n  },\n")),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," We could have passed values for ",l.createElement(t.code,null,"pageSize")," and ",l.createElement(t.code,null,"page")," into our\npagination component if we had a specific page or page size we wanted to start\nwith. Instead we are relying on the pagination component to set some sensible\ndefaults and provide us with the details through an event.")),"\n",l.createElement(t.p,null,"Then before we can see our paginated table we need to add: a ",l.createElement(t.code,null,"pagedRows"),"\ncomputed property to select the slice of input rows we are interested in, and a\nmethod to handle the pagination event."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=src/views/RepoPage/RepoPage.vue"},"  computed: {\n    // other computed properties\n    // ...\n    pagedRows() {\n      return this.rows.slice(this.pageStart, this.pageStart + this.pageSize);\n    }\n  },\n  methods: {\n    onPagination(val) {\n      this.pageSize = val.length;\n      this.pageStart = val.start;\n      this.page = val.page;\n    }\n  }\n")),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Like the other Carbon Vue components, ",l.createElement(t.code,null,"Pagination")," component examples\ncan be found in\n",l.createElement(t.a,{href:"http://vue.carbondesignsystem.com/?path=/story/components-cvpagination--default"},"Storybook"),"\nby browsing the story and knobs.")),"\n",l.createElement(t.p,null,"That does it! Your data table should fetch GitHub data on first render. You can\nexpand each row to see the repository’s description. You can modify the\npagination items per page and cycle through pages or jump to a specific page of\nrepositories."),"\n",l.createElement(t.h2,null,"Mystery"),"\n",l.createElement(t.p,null,"Hmmm, there is at least one more issue to resolve. If you expand a row or two to\nsee the repository descriptions you will and then change page. What happens?"),"\n",l.createElement(t.p,null,"Assuming you didn’t catch this earlier you will find that the expanded rows,\nstay expanded after paging. That is if row two was expanded before pagination it\nis expanded after."),"\n",l.createElement(t.p,null,"This is because we chose poor values to use as our row and cell keys as we\niterated over them. The result is that Vue sees these items as having the same\nkey and makes the assumption that content but not state has changed."),"\n",l.createElement(t.p,null,"To fix this add the following to the RepoPage component you should be able to\nfind something better."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript"},"  watch: {\n    rows() {\n      if (this.organization) {\n        console.dir(this.organization.repositories.nodes);\n      }\n    }\n  },\n")),"\n",l.createElement(t.p,null,l.createElement(t.em,null,"Hint: ",l.createElement(t.code,null,"id")," and ",l.createElement(t.code,null,"url")," are likely unique properties, you could use either of\nthese to update the prototype. In fact we already pass the id value to\nRepoTable.")),"\n",l.createElement(t.p,null,"Can you fix it?"),"\n",l.createElement(t.h2,null,"Submit pull request"),"\n",l.createElement(t.p,null,"We’re going to submit a pull request to verify completion of this tutorial step."),"\n",l.createElement(t.h3,null,"Continuous integration (CI) check"),"\n",l.createElement(t.p,null,"Run the CI check to make sure we’re all set to submit a pull request."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"yarn ci-check\n")),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Having issues running the CI check?\n",l.createElement(t.a,{href:"/developing/vue-tutorial/step-1#continuous-integration-ci-check"},"Step 1")," has\ntroubleshooting notes that may help.")),"\n",l.createElement(t.h3,null,"Git commit and push"),"\n",l.createElement(t.p,null,"Before we can create a pull request, stage and commit all of your changes:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},'git add --all && git commit -m "feat(tutorial): complete step 3"\n')),"\n",l.createElement(t.p,null,"Then, push to your repository:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git push origin vue-step-3\n")),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Having issues pushing your changes?\n",l.createElement(t.a,{href:"/developing/vue-tutorial/step-1#git-commit-and-push"},"Step 1")," has\ntroubleshooting notes that may help.")),"\n",l.createElement(t.h3,null,"Pull request (PR)"),"\n",l.createElement(t.p,null,"Finally, visit\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-vue"},"carbon-tutorial-vue"),"\nto “Compare & pull request”. In doing so, make sure that you are comparing to\n",l.createElement(t.code,null,"vue-step-3")," into ",l.createElement(t.code,null,"base: vue-step-3"),"."),"\n",l.createElement(c,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We’ll close your PR so we can keep the repository’s remote branches\npristine and ready for the next person!")))}function s(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(e={}){const{wrapper:t}=Object.assign({},(0,a.R)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)}},725441:function(e,t,n){n.d(t,{A:function(){return l}});var a=n(296540);var l=({title:e,...t})=>a.createElement("iframe",Object.assign({loading:"lazy",title:e},t,{className:"Preview-module--preview--3e1df"}))}}]);