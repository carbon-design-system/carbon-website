"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[76472],{391156:function(e,n,t){t.r(n);var a=t(28453),l=t(296540),o=t(725441);function c(e){const n=Object.assign({p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre",h4:"h4",strong:"strong"},(0,a.R)(),e.components),{PageDescription:t,AnchorLinks:c,AnchorLink:r,InlineNotification:i}=n;return r||s("AnchorLink",!0),c||s("AnchorLinks",!0),i||s("InlineNotification",!0),t||s("PageDescription",!0),l.createElement(l.Fragment,null,l.createElement(t,null,l.createElement(n.p,null,"Starting from a base ",l.createElement(n.code,null,"create-vite")," app, created using the ",l.createElement(n.code,null,"Vanilla")," and\n",l.createElement(n.code,null,"Javascript")," options, let’s install Carbon and begin using Carbon components. By\nthe end you will have a Vanilla app that uses the UI Shell to navigate between\npages.")),"\n",l.createElement(c,null,l.createElement(r,null,"Fork, clone and branch"),l.createElement(r,null,"Build and start"),l.createElement(r,null,"Install Carbon"),l.createElement(r,null,"Install Sass"),l.createElement(r,null,"A working Carbon button"),l.createElement(r,null,"Add UI Shell"),l.createElement(r,null,"Push to GitHub")),"\n",l.createElement(n.h2,null,"Preview"),"\n",l.createElement(n.p,null,"A ",l.createElement(n.a,{href:"https://solid-carnival-1pg38np.pages.github.io/"},"preview")," of what you will\nbuild:"),"\n",l.createElement(o.A,{height:"200",title:"Carbon Next Tutorial Step 1",src:"https://carbon-tutorial-nextjs-git-v11-next-step-2-carbon-design-system.vercel.app/",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"}),"\n",l.createElement(n.h2,null,"Fork, clone and branch"),"\n",l.createElement(n.p,null,"This tutorial has an accompanying GitHub repository called\n",l.createElement(n.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-web-components"},"carbon-tutorial-web-components"),"\nthat we’ll use as a starting point for each step."),"\n",l.createElement(n.h3,null,"Fork"),"\n",l.createElement(n.p,null,"To begin, fork\n",l.createElement(n.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-web-components"},"carbon-tutorial-web-components"),"\nusing your GitHub account. Please note when forking you must uncheck “Copy the\nmain branch only” so you can access all branches / steps of the tutorial."),"\n",l.createElement(n.h3,null,"Clone"),"\n",l.createElement(n.p,null,"Go to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git clone [your fork SSH/HTTPS]\ncd carbon-tutorial-web-components\n")),"\n",l.createElement(n.h3,null,"Add upstream remote"),"\n",l.createElement(n.p,null,"Add a remote called ",l.createElement(n.code,null,"upstream")," so we can eventually submit a pull request once\nyou have completed this tutorial step. There are two choices: SSH or HTTPS"),"\n",l.createElement(n.h4,null,"SSH"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git remote add upstream git@github.com:carbon-design-system/carbon-tutorial-web-components.git\n")),"\n",l.createElement(n.h4,null,"HTTPS"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git remote add upstream https://github.com/carbon-design-system/carbon-tutorial-web-components.git\n")),"\n",l.createElement(n.p,null,"Verify that your forked repository remotes are correct:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git remote -v\n")),"\n",l.createElement(n.p,null,"Your terminal should output something like this:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"origin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-web-components.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-web-components.git (push)\n")),"\n",l.createElement(n.h3,null,"Branch"),"\n",l.createElement(n.p,null,"Now that we have our repository set up, let’s check out the branch for this\ntutorial step’s starting point. Run the two commands:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git fetch upstream\ngit checkout -b step-1 upstream/step-1\n")),"\n",l.createElement(n.h2,null,"Build and start"),"\n",l.createElement(n.p,null,"We have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the app’s\ndependencies (Vite) with:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm i\n")),"\n",l.createElement(n.p,null,"After the dependencies are installed, you can start the app with:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm dev\n")),"\n",l.createElement(n.p,null,"Open Your default browser should open up with an empty page that says:\n",l.createElement(n.code,null,"Hello Carbon! Well, not quite yet. This is the starting point for the Carbon Web Components tutorial.")),"\n",l.createElement(n.h2,null,"Install Carbon"),"\n",l.createElement(n.p,null,"Even though we installed existing dependencies, we’ve yet to install our any\nCarbon packages."),"\n",l.createElement(n.p,null,"Stop your development server with ",l.createElement(n.code,null,"CTRL-C")," and install Carbon dependencies with:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm add @carbon/web-components @carbon/styles\n")),"\n",l.createElement(n.h2,null,"Install Sass"),"\n",l.createElement(n.p,null,"We need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install ",l.createElement(n.code,null,"sass")," as a dependency."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm add sass\n")),"\n",l.createElement(n.p,null,"Before restarting our app rename ",l.createElement(n.code,null,"style.css")," to ",l.createElement(n.code,null,"style.scss")," and change the\nimport in ",l.createElement(n.code,null,"main.js")," from ",l.createElement(n.code,null,"import './style.css';")," to ",l.createElement(n.code,null,"import './style.scss';"),"."),"\n",l.createElement(n.p,null,"Then, start the app again. If your app’s currently running, you’ll need to\nrestart it for the new packages to be used."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm dev\n")),"\n",l.createElement(n.p,null,"The app looks as it did before. We, need to import Carbon styles have an impact."),"\n",l.createElement(n.h3,null,"Import Carbon styles"),"\n",l.createElement(n.p,null,"Replace the contents of ",l.createElement(n.code,null,"style.scss")," with"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},"@use '@carbon/styles/scss/reset';\n")),"\n",l.createElement(n.p,null,"This has reset the styles to a common base from which Carbon applications are\nbuilt. What you see, if you run the application, is a largely unstyled page. It\nis however making use of the IBM Plex font, standard in all Carbon applications."),"\n",l.createElement(n.h2,null,"A working Carbon button"),"\n",l.createElement(n.h3,null,"Import the button"),"\n",l.createElement(n.p,null,"Next, we’ll import a ",l.createElement(n.code,null,"Button")," from Carbon to test that our dependencies are\nworking properly. At the top of ",l.createElement(n.code,null,"main.js"),", import the ",l.createElement(n.code,null,"Button")," and delete\neverything else, leaving just:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"import './style.scss';\nimport '@carbon/web-components/es/components/button/button.js';\n")),"\n",l.createElement(n.h3,null,"Tidy up our HTML file"),"\n",l.createElement(n.p,null,"In ",l.createElement(n.code,null,"index.html")," first move this script tag up inside the ",l.createElement(n.code,null,"head")," tag, so we don’t\naccidentally delete it later. It’s location does not matter in this tutorial."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<script type="module" src="/main.js"><\/script>\n')),"\n",l.createElement(n.p,null,"Then replace the Vite logo"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<link rel="icon" type="image/svg+xml" href="/vite.svg" />\n')),"\n",l.createElement(n.p,null,"with the Carbon one:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<link rel="icon" type="image/svg+xml" href="/carbon.svg" />\n')),"\n",l.createElement(n.p,null,"Update the title ",l.createElement(n.code,null,"Vite App")," to ",l.createElement(n.code,null,"Carbon tutorial web components"),"."),"\n",l.createElement(n.h3,null,"Add the button by replacing:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<div id="app"></div>\n')),"\n",l.createElement(n.p,null,"with:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-button class="button">Click more than once</cds-button>\n')),"\n",l.createElement(n.p,null,"Congratulations, you’ve imported your first component! You should see a Carbon\nstyled button on the page."),"\n",l.createElement(n.h3,null,"Make the button do something"),"\n",l.createElement(n.p,null,"Before giving the button something to do, add the following to ",l.createElement(n.code,null,"style.scss"),"\nwhich will allow our button to theme the app."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},"@use '@carbon/styles/scss/theme' as *;\n@use '@carbon/styles/scss/themes';\n\n:root {\n  @include theme(themes.$g10);\n\n  @media (prefers-color-scheme: dark) {\n    @include theme(themes.$g100);\n  }\n}\n\n.g10 {\n  @include theme(themes.$g10);\n}\n\n.g100 {\n  @include theme(themes.$g100);\n}\n")),"\n",l.createElement(n.p,null,"Then in ",l.createElement(n.code,null,"main.js")," add the following code to handle the button clicks."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"const bodyEl = document.querySelector('body');\n\n// button click handler\nconst handleClick = () => {\n  bodyEl.classList.toggle('g10');\n  bodyEl.classList.toggle('g100');\n};\ndocument.querySelector('.button').addEventListener('click', handleClick);\n\n// set initial theme based on preferences\nif (matchMedia('prefers-color-scheme').matches) {\n  bodyEl.classList.add('g100');\n} else {\n  bodyEl.classList.add('g10');\n}\n")),"\n",l.createElement(n.p,null,"After these changes clicking the button will toggle theme classes, which in the\napp changes the background color."),"\n",l.createElement(n.h2,null,"Add UI Shell"),"\n",l.createElement(n.p,null,"Now we’re going to add the UI shell."),"\n",l.createElement(n.h3,null,"UI Shell for the landing page"),"\n",l.createElement(n.p,null,"First import the header into ",l.createElement(n.code,null,"main.js")),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"import '@carbon/web-components/es/components/ui-shell/index';\n")),"\n",l.createElement(i,null,l.createElement(n.p,null,l.createElement(n.strong,null,"Note:")," you can find a description of the different components used in the UI\nShell in our\n",l.createElement(n.a,{href:"https://web-components.carbondesignsystem.com/?path=/docs/components-ui-shell--overview"},"Storybook"),"\npackage.")),"\n",l.createElement(n.p,null,"Before we add the header to ",l.createElement(n.code,null,"index.html")," add the class ",l.createElement(n.code,null,"app")," to the body tag."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<body class="app"></body>\n')),"\n",l.createElement(n.p,null,"Wrap the button as follows."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<main class="main">\n  <cds-button class="button">Click more than once</cds-button>\n</main>\n')),"\n",l.createElement(n.p,null,"Then above ",l.createElement(n.code,null,"<main>")," add our header."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<header>\n  <cds-header class="g100">\n    <cds-header-name href="./" prefix="IBM">Carbon Tutorial</cds-header-name>\n  </cds-header>\n</header>\n')),"\n",l.createElement(n.p,null,"Running the application at this point it looks like the button has disappeared.\nAdd the following to ",l.createElement(n.code,null,"style.scss"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-path=style.scss"},"@use '@carbon/styles/scss/spacing' as *; /* near top of file */\n\n.app {\n  display: grid;\n  grid-template-rows: $spacing-09 1fr;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.main {\n  height: 100%;\n  overflow-y: auto;\n}\n")),"\n",l.createElement(n.p,null,"This imports the Carbon ",l.createElement(n.code,null,"spacing")," and establishes a grid to contain our header\nand main. The overflow settings are there to ensure it is our ",l.createElement(n.code,null,"<main>")," that\nscrolls if needed."),"\n",l.createElement(n.h3,null,"Adding the repositories page"),"\n",l.createElement(n.p,null,"After the ",l.createElement(n.code,null,"<cds-header-name>")," closing tag add a link to a new page."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-header-nav menu-bar-label="Carbon Tutorial">\n  <cds-header-nav-item href="./repositories.html"\n    >Repositories</cds-header-nav-item\n  >\n</cds-header-nav>\n')),"\n",l.createElement(n.p,null,"Duplicate ",l.createElement(n.code,null,"index.html")," and name it ",l.createElement(n.code,null,"repositories.html"),"."),"\n",l.createElement(n.p,null,"In this new file replace the contents of the ",l.createElement(n.code,null,"main")," tag with the words\n",l.createElement(n.code,null,"REPOSITORIES PAGE"),"."),"\n",l.createElement(n.p,null,"You can now switch between the two pages by clicking on ",l.createElement(n.code,null,"Repositories")," and\n",l.createElement(n.code,null,"IBM Carbon Tutorial")," in the header. This will look a little glitchy, this is\nbecause it is a genuine page navigation, and the CSS is still being processed.\nWhen using Web Components inside libraries such as Lit, React, Angular, Vue etc\nthis is resolved by taking control of the routing. We will not investigate\nfurther here."),"\n",l.createElement(n.h3,null,"Behaving responsively"),"\n",l.createElement(n.p,null,"Switch back to the landing page by clicking on ",l.createElement(n.code,null,"IBM Carbon Tutorial"),"."),"\n",l.createElement(n.p,null,"Checking responsive behavior (window narrower than 1080px) you will notice the\nrepositories page disappear from the menu. This goes into a sidebar controlled\nby a hamburger menu as follows."),"\n",l.createElement(n.p,null,"Before the ",l.createElement(n.code,null,"<cds-header-name>")," tag add"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-header-menu-button\n  button-label-active="Close menu"\n  button-label-inactive="Open menu"></cds-header-menu-button>\n')),"\n",l.createElement(n.p,null,"Then after the closing ",l.createElement(n.code,null,"</cds-header-nav>")," add"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-side-nav\n  is-not-persistent\n  aria-label="Side navigation"\n  collapse-mode="${SIDE_NAV_COLLAPSE_MODE.RESPONSIVE}">\n  <cds-side-nav-items>\n    <cds-side-nav-link href="./repositories.html">\n      Repositories\n    </cds-side-nav-link>\n  </cds-side-nav-items>\n</cds-side-nav>\n')),"\n",l.createElement(n.h3,null,"Global actions"),"\n",l.createElement(n.p,null,"As part of the Carbon header we can also add global actions this involves making\nuse of some Carbon Icons so first we will add that dependency."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"pnpm add @carbon/icons\n")),"\n",l.createElement(n.p,null,"There are various ways to add SVGs to our page. Often the SVG is copied directly\ninto source HTML or a bundler is used to load it. Rather than rely on a bundler\nor add them inline, which can make our HTML harder to read, we will use CSS to\nadd refer directly to the icon files (which have been conveniently copied into\nthe ",l.createElement(n.code,null,"./public")," folder) from the ",l.createElement(n.code,null,"@carbon/icons")," package."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},".action-icon {\n  width: 1.25rem;\n  height: 1.25rem;\n  background-color: $text-primary;\n}\n\n.notification .action-icon {\n  mask: url('/notification.svg') no-repeat center;\n}\n\n.user-avatar .action-icon {\n  mask: url('/user--avatar.svg') no-repeat center;\n}\n\n.app-switcher .action-icon {\n  mask: url('/switcher.svg') no-repeat center;\n}\n")),"\n",l.createElement(n.p,null,"The above CSS allows us to simply add the two classes associated with each icon\nto display it in a themeable way in our application."),"\n",l.createElement(n.p,null,"Next we need to add the global actions and related panels to the ",l.createElement(n.code,null,"index.html"),"\nfile after the closing ",l.createElement(n.code,null,"</cds-side-nav>"),". The Carbon icons are applied to the\nslotted icon element using CSS."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<div class="cds--header__global">\n  <cds-header-global-action\n    aria-label="Notifications"\n    class="notification"\n    panel-id="notification-panel">\n    <div class="action-icon" slot="icon"></div>\n  </cds-header-global-action>\n  <cds-header-global-action\n    aria-label="User Profile"\n    class="user-avatar"\n    panel-id="user-profile-panel">\n    <div class="action-icon" slot="icon"></div>\n  </cds-header-global-action>\n  <cds-header-global-action\n    aria-label="App Switcher"\n    class="app-switcher"\n    panel-id="app-switcher-panel">\n    <div class="action-icon" slot="icon"></div>\n  </cds-header-global-action>\n</div>\n')),"\n",l.createElement(i,null,l.createElement(n.p,null,l.createElement(n.strong,null,"Note:")," this is the first time we have seen the ",l.createElement(n.code,null,"slot")," attribute. Standard\nHTML elements often have the ability to host child content. Web components are\nmore flexible allowing both the default child and named child areas, it uses the\nterm ",l.createElement(n.code,null,"slot")," to refer to these. The slot attribute is used to target named slots,\nin this case ",l.createElement(n.code,null,"icon"),"."),l.createElement(n.p,null,"Further details on slots can be found on the\n",l.createElement(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot"},"mdn docs"),"\npackage.")),"\n",l.createElement(n.p,null,"The global action buttons are passed a ",l.createElement(n.code,null,"panel-id")," used to identify the panels\nthey toggle the visibility of. Just below the last global action add the\nfollowing HTML."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-header-panel id="notification-panel" aria-label="Notification Panel"\n  >Notification Panel</cds-header-panel\n>\n<cds-header-panel id="user-profile-panel" aria-label="User profile Panel"\n  >User profile Panel</cds-header-panel\n>\n<cds-header-panel id="app-switcher-panel" aria-label="App switcher Panel"\n  >App switcher Panel</cds-header-panel\n>\n')),"\n",l.createElement(n.p,null,"Note as web components behave like native components we can add event handlers\nand interact with them directly."),"\n",l.createElement(n.p,null,"The default panel behavior simply toggles the panel when clicked. This can\nresult in multiple panels being open at once. Adding the following to ",l.createElement(n.code,null,"main.js"),"\nchanges this behavior by listening for clicks and closing the other panels."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"const handleGlobalActionClick = (ev) => {\n  const targetPanelId = ev.currentTarget.getAttribute('panel-id');\n  const panels = document.querySelectorAll('cds-header-panel');\n  // check to see if other panels are open and close them\n  panels.forEach((panel) => {\n    if (panel.id !== targetPanelId) {\n      panel.expanded = false;\n    }\n  });\n};\nconst globalActions = document.querySelectorAll('cds-header-global-action');\n[...globalActions].forEach((action) =>\n  action.addEventListener('click', handleGlobalActionClick)\n);\n")),"\n",l.createElement(n.h3,null,"A better theme switcher"),"\n",l.createElement(n.p,null,"The current theme switcher is not very practical, here we will move it inside\nthe profile panel."),"\n",l.createElement(n.p,null,"First replace the button in ",l.createElement(n.code,null,"index.html")," with ",l.createElement(n.code,null,"LANDING PAGE")," leaving the main\ntag looking like this."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<main class="main">LANDING PAGE</main>\n')),"\n",l.createElement(n.p,null,"In ",l.createElement(n.code,null,"main.js")," remove this code handling the button click and initial load."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"// button click handler\nconst handleClick = () => {\n  bodyEl.classList.toggle('g10');\n  bodyEl.classList.toggle('g100');\n};\ndocument.querySelector('.button').addEventListener('click', handleClick);\n\n// set initial theme based on preferences\nif (matchMedia('(prefers-color-scheme: dark)')) {\n  bodyEl.classList.add('g100');\n} else {\n  bodyEl.classList.add('g10');\n}\n")),"\n",l.createElement(n.p,null,"Still in ",l.createElement(n.code,null,"main.js")," add imports for checkbox and content-switcher."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"import '@carbon/web-components/es/components/checkbox/index';\nimport '@carbon/web-components/es/components/content-switcher/index';\n")),"\n",l.createElement(n.p,null,"Locate the ",l.createElement(n.code,null,"cds-header-panel")," with the id=“user-profile-panel” in ",l.createElement(n.code,null,"index.html"),"\nand replace it’s content with the following."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<div class="header-panel__content">\n  <h2 class="header-panel__title">User profile Panel</h2>\n\n  <cds-content-switcher value="system" class="theme-selector">\n    <cds-content-switcher-item icon value="light">\n      <div class="theme-selector__icon theme-selector__icon--light"></div>\n      <span slot="tooltip-content">Light theme</span>\n    </cds-content-switcher-item>\n    <cds-content-switcher-item icon value="system">\n      <div class="theme-selector__icon theme-selector__icon--system"></div>\n      <span slot="tooltip-content">System theme</span>\n    </cds-content-switcher-item>\n    <cds-content-switcher-item icon value="dark">\n      <div class="theme-selector__icon theme-selector__icon--dark"></div>\n      <span slot="tooltip-content">Dark theme</span>\n    </cds-content-switcher-item>\n  </cds-content-switcher>\n\n  <cds-checkbox\n    id="theme-header__compliment"\n    class="theme-header__compliment"\n    checked\n    name="theme-header__compliment"\n    >Global header reverse theme</cds-checkbox\n  >\n</div>\n')),"\n",l.createElement(n.p,null,"This adds a content switcher and checkbox to our user profile side panel. If you\nview it now it works but is in need of some styling."),"\n",l.createElement(n.p,null,"These styles import the Carbon typography features, define a layout for our\npanel, and set the title size."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},"@use '@carbon/styles/scss/type' as *; /* place at top of file */\n\n.header-panel__content {\n  display: flex;\n  flex-direction: column;\n  gap: $spacing-05;\n  padding: $spacing-05;\n}\n\n.header-panel__title {\n  @include type-style('productive-heading-02');\n}\n")),"\n",l.createElement(n.p,null,"As per the global actions we will use additional styling to add icons to our\ncontent switcher."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},".theme-selector__icon {\n  width: 1.25rem;\n  height: 1.25rem;\n  background-color: $text-primary;\n}\n\ncds-content-switcher-item[selected] .theme-selector__icon {\n  /* switch icon color when selected */\n  background-color: $background;\n}\n\n.theme-selector__icon--light {\n  mask: url('/sun.svg') no-repeat center;\n}\n\n.theme-selector__icon--system {\n  mask: url('/brightness-contrast.svg') no-repeat center;\n}\n\n.theme-selector__icon--dark {\n  mask: url('/moon.svg') no-repeat center;\n}\n")),"\n",l.createElement(n.p,null,"Currently the theme switcher looks good but needs the following Javascript to\nswitch themes."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"const handleSwitch = (ev) => {\n  // Applies new theme or defers to system preferences by removing theme\n  switch (ev.detail.item.value) {\n    case 'light':\n      bodyEl.classList.remove('g100');\n      bodyEl.classList.add('g10');\n      break;\n    case 'dark':\n      bodyEl.classList.remove('g10');\n      bodyEl.classList.add('g100');\n      break;\n    default:\n      bodyEl.classList.remove('g10');\n      bodyEl.classList.remove('g100');\n  }\n};\ndocument\n  .querySelector('.theme-selector')\n  .addEventListener('cds-content-switcher-selected', handleSwitch);\n\nconst handleHeaderCompliment = (ev) => {\n  document\n    .querySelector('cds-header')\n    .classList.toggle('compliment', ev.target.checked);\n};\ndocument\n  .querySelector('.theme-header__compliment')\n  .addEventListener('cds-checkbox-changed', handleHeaderCompliment);\n")),"\n",l.createElement(n.p,null,"At this point our theme switcher is mostly working, only the checkbox\n",l.createElement(n.code,null,"Global header reverse theme")," appears to do nothing. In the script above the\nclass ",l.createElement(n.code,null,"compliment")," is being toggled on and off in the ",l.createElement(n.code,null,"<header>")," tag."),"\n",l.createElement(n.p,null,"A little more CSS is needed to make this functionality work. Add the following\nin addition to the existing theme classes."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-scss",metaData:"path=style.scss"},":root .compliment {\n  @include theme(themes.$g100);\n\n  @media (prefers-color-scheme: dark) {\n    @include theme(themes.$g10);\n  }\n}\n\n.g10 .compliment {\n  @include theme(themes.$g100);\n}\n\n.g100 .compliment {\n  @include theme(themes.$g10);\n}\n")),"\n",l.createElement(n.p,null,"Then replace the cds-header tags ",l.createElement(n.code,null,"g100")," class in ",l.createElement(n.code,null,"index.html")," with ",l.createElement(n.code,null,"compliment"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-header class="compliment"> . . . </cds-header>\n')),"\n",l.createElement(n.h3,null,"Skip to content"),"\n",l.createElement(n.p,null,"When creating navigation headers, it’s important to have a ",l.createElement(n.code,null,"Skip to content"),"\nlink so keyboard users can skip the navigation items and go straight to the main\ncontent."),"\n",l.createElement(n.p,null,"Import the component in ",l.createElement(n.code,null,"main.js")),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",metaData:"path=main.js"},"import '@carbon/web-components/es/components/skip-to-content/index.js';\n")),"\n",l.createElement(n.p,null,"Add in to our header in ",l.createElement(n.code,null,"index.html")," as the first child of our ",l.createElement(n.code,null,"cds-header"),"\ncomponent."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<cds-header class="compliment">\n  <cds-skip-to-content href="#main-content"></cds-skip-to-content>\n  \x3c!-- keep existing content\n   .\n    .\n    .\n   --\x3e\n</cds-header>\n')),"\n",l.createElement(n.p,null,"Then update the main tag to include the id ",l.createElement(n.code,null,"main-content")),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-html",metaData:"path=index.html"},'<main id="main-content" class="main">\n  \x3c!-- keep existing content\n   .\n    .\n    .\n   --\x3e\n</main>\n')),"\n",l.createElement(n.h3,null,"Update the repositories page"),"\n",l.createElement(n.p,null,"One final task before completing step 1. Our repositories page has missed out on\nall of the HTML updates we have been making to the landing page. Simply copy the\ncontents of ",l.createElement(n.code,null,"index.html")," to ",l.createElement(n.code,null,"repositories.html")," and replace ",l.createElement(n.code,null,"LANDING")," with\n",l.createElement(n.code,null,"REPOSITORIES"),"."),"\n",l.createElement(n.p,null,"NOTE: We could do something better than duplicating our pages. This could be\npure Javascript, HTML templates or native Web Components. However, that might\ndistract from the message that no library is required."),"\n",l.createElement(n.h2,null,"Push to GitHub"),"\n",l.createElement(n.p,null,"That is it you are done. Just one more push to save your completion of step 1."),"\n",l.createElement(n.h3,null,"Git commit and push"),"\n",l.createElement(n.p,null,"First, stage and commit all of your changes:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},'git add --all && git commit -m "feat(tutorial): complete step 1"\n')),"\n",l.createElement(n.p,null,"Then, push to your repository:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"git push -u origin step-1\n")),"\n",l.createElement(i,null,l.createElement(n.p,null,l.createElement(n.strong,null,"Note:")," If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n",l.createElement(n.a,{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"},"create a personal access token for the command line"),".\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.")))}function s(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e={}){const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)}},725441:function(e,n,t){t.d(n,{A:function(){return l}});var a=t(296540);var l=({title:e,...n})=>a.createElement("iframe",Object.assign({loading:"lazy",title:e},n,{className:"Preview-module--preview--3e1df"}))}}]);