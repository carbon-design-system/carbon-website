"use strict";(self.webpackChunkcarbondesignsystem=self.webpackChunkcarbondesignsystem||[]).push([[788934],{887614:function(e,t,n){n.r(t);var a=n(28453),l=n(296540),r=n(725441);function o(e){const t=Object.assign({p:"p",h2:"h2",a:"a",h3:"h3",pre:"pre",code:"code",strong:"strong"},(0,a.R)(),e.components),{PageDescription:n,AnchorLinks:o,AnchorLink:s,InlineNotification:i}=t;return s||c("AnchorLink",!0),o||c("AnchorLinks",!0),i||c("InlineNotification",!0),n||c("PageDescription",!0),l.createElement(l.Fragment,null,l.createElement(n,null,l.createElement(t.p,null,"This step takes our static components and populates them with data from the\nGitHub GraphQL API – loading states and all. We’ll be displaying Carbon\nrepository information in a data table.")),"\n",l.createElement(o,null,l.createElement(s,null,"Fork, clone and branch"),l.createElement(s,null,"Install dependencies"),l.createElement(s,null,"Fetch and render data"),l.createElement(s,null,"Pagination"),l.createElement(s,null,"Push to GitHub")),"\n",l.createElement(t.h2,null,"Preview"),"\n",l.createElement(t.p,null,"The ",l.createElement(t.a,{href:"https://docs.github.com/en/rest?apiVersion=2022-11-28"},"GitHub REST API")," is\nvery well documented, we’ll use it to fetch Carbon-related data for this Carbon\ntutorial."),"\n",l.createElement(t.p,null,"To do so, we’ll be using\n",l.createElement(t.a,{href:"https://github.com/octokit/core.js/#readme"},"Octokit Core"),", a client that makes\nit easy to interact with GitHub’s APIs."),"\n",l.createElement(t.p,null,"A\n",l.createElement(t.a,{href:"https://carbon-tutorial-nextjs-git-step-4-carbon-design-system.vercel.app/"},"preview"),"\nof what you will build (see repositories page):"),"\n",l.createElement(r.A,{height:"400",title:"Carbon Tutorial Step 3",src:"https://carbon-tutorial-nextjs-git-v11-next-step-4-carbon-design-system.vercel.app/",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"}),"\n",l.createElement(t.h2,null,"Fork, clone and branch"),"\n",l.createElement(t.p,null,"This tutorial has an accompanying GitHub repository called\n",l.createElement(t.a,{href:"https://github.com/carbon-design-system/carbon-tutorial-web-components"},"carbon-tutorial-web-components"),"\nthat we’ll use as a starting point for each step. If you haven’t forked and\ncloned that repository yet, and haven’t added the upstream remote, go ahead and\ndo so by following the [step 1\ninstructions](",l.createElement(t.a,{href:"/developing/web-components-tutorial/step-1#fork-clone-and-branch"},"previous step"),"."),"\n",l.createElement(t.h3,null,"Branch"),"\n",l.createElement(t.p,null,"With your repository all set up, let’s check out the branch for this tutorial\nstep’s starting point."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git fetch upstream\ngit checkout -b step-3 upstream/step-3\n")),"\n",l.createElement(t.h3,null,"Build and start app"),"\n",l.createElement(t.p,null,"Install the app’s dependencies and build the app:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"pnpm i\n")),"\n",l.createElement(t.p,null,"Then, start the app:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"pnpm dev\n")),"\n",l.createElement(t.p,null,"You should see something similar to where the\n",l.createElement(t.a,{href:"/developing/web-components-tutorial/step-1#fork-clone-and-branch/step-2"},"previous step"),"\nleft off. Stop your app with ",l.createElement(t.code,null,"CTRL-C")," and let’s get everything installed."),"\n",l.createElement(t.h2,null,"Install dependencies"),"\n",l.createElement(t.p,null,"We’ll need to install ",l.createElement(t.code,null,"@octokit/core"),", a package that allows us to query GitHub\nAPIs easily. Stop your development server with ",l.createElement(t.code,null,"CTRL-C")," and install the octokit\ndependency with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"pnpm add @octokit/core\n")),"\n",l.createElement(t.p,null,"Then, start the app again. If your app’s currently running, you’ll need to\nrestart it."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"pnpm dev\n")),"\n",l.createElement(t.h2,null,"Fetch and render data"),"\n",l.createElement(t.h3,null,"Imports"),"\n",l.createElement(t.p,null,"Add the following import Octokit into ",l.createElement(t.code,null,"repos.js")," and create a new instance of\nOctokit."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"import { Octokit } from '@octokit/core';\n\nconst octokitClient = new Octokit({});\n")),"\n",l.createElement(t.h3,null,"API Request"),"\n",l.createElement(t.p,null,"Next, we’ll assemble our GitHub API request to fetch a list of repositories that\nbelong to the ",l.createElement(t.code,null,"carbon-design-system")," GitHub organization."),"\n",l.createElement(t.p,null,"First empty the data array in ",l.createElement(t.code,null,"repos.js")),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"let data = [];\n")),"\n",l.createElement(t.p,null,"Then add the function ",l.createElement(t.code,null,"fetchData")," calling it immediately afterwards."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"const fetchData = async () => {\n  const res = await octokitClient.request('GET /orgs/{org}/repos', {\n    org: 'carbon-design-system',\n    per_page: 75,\n    sort: 'updated',\n    direction: 'desc',\n  });\n\n  if (res.status === 200) {\n    data = res.data.map((row) => ({\n      name: row.name,\n      created: new Date(row.created_at).toLocaleDateString(),\n      updated: new Date(row.updated_at).toLocaleDateString(),\n      openIssues: row.open_issues_count,\n      stars: row.stargazers_count,\n      links: 'link',\n      expansion: row.description,\n    }));\n\n    // replace table here\n    // replaceSkeleton();\n  } else {\n    console.log('Error obtaining repository data');\n  }\n};\nfetchData();\n")),"\n",l.createElement(t.h3,null,"Rendering the data"),"\n",l.createElement(t.p,null,"If you have the application running then the only change you see is an empty\ntable. Let’s fix that next."),"\n",l.createElement(t.p,null,"In ",l.createElement(t.code,null,"repositories.html")," just above the ",l.createElement(t.code,null,"<cds-table>")," add a table skeleton."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=repositories.html"},"<cds-table-skeleton></cds-table-skeleton>\n")),"\n",l.createElement(t.p,null,"Then move the ",l.createElement(t.code,null,"<cds-table>")," into a template called ",l.createElement(t.code,null,"template--table")," at the\nbottom of the file."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=repositories.html"},'<template id="template--table">\n  <cds-table expandable>\n    <cds-table-header-title slot="title"\n      >Carbon Repositories</cds-table-header-title\n    >\n    <cds-table-header-description slot="description"\n      >A collection of public Carbon repositories.</cds-table-header-description\n    >\n    <cds-table-head>\n      <cds-table-header-row>\n        <cds-table-header-cell>Name</cds-table-header-cell>\n        <cds-table-header-cell>Created</cds-table-header-cell>\n        <cds-table-header-cell>Updated</cds-table-header-cell>\n        <cds-table-header-cell>Open issues</cds-table-header-cell>\n        <cds-table-header-cell>Stars</cds-table-header-cell>\n        <cds-table-header-cell>Links</cds-table-header-cell>\n      </cds-table-header-row>\n    </cds-table-head>\n    <cds-table-body>Table body goes here</cds-table-body>\n  </cds-table>\n</template>\n')),"\n",l.createElement(t.p,null,"With the application running the repositories page now shows the skeleton table.\nSkeleton components are used in the Carbon Design System to information is still\nbeing loaded. For further details on\n",l.createElement(t.a,{href:"https://carbondesignsystem.com/patterns/loading-pattern/"},"Carbon loading patterns"),"."),"\n",l.createElement(t.p,null,"Returning to ",l.createElement(t.code,null,"repos.js")," we will makes use of the fetched data to replace the\nskeleton table. Find the current call to ",l.createElement(t.code,null,"updateTable")),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"updateTable();\n")),"\n",l.createElement(t.p,null,"and replace it with the new function called ",l.createElement(t.code,null,"replaceSkeleton")," below:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"const replaceSkeleton = () => {\n  const tableSkeleton = document.querySelector('cds-table-skeleton');\n  const tableTemplate = document.querySelector('template#template--table');\n\n  if (tableSkeleton && tableTemplate) {\n    tableSkeleton.replaceWith(tableTemplate.content.cloneNode(true));\n    // update table rows\n    updateTable();\n  }\n};\n")),"\n",l.createElement(t.p,null,"This function locates the ",l.createElement(t.code,null,"template--table")," and replaces the skeleton with it.\nIt then makes a call to ",l.createElement(t.code,null,"updateTable")," to add the rows."),"\n",l.createElement(t.p,null,"We are now ready to display the data by adjusting the function ",l.createElement(t.code,null,"fetchData")," by\nuncommenting the call to ",l.createElement(t.code,null,"replaceSkeleton"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"// replace table here\n// replaceSkeleton();\n")),"\n",l.createElement(t.p,null,"to leave:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"// replace table here\nreplaceSkeleton();\n")),"\n",l.createElement(t.p,null,"At this point when you refresh the ",l.createElement(t.code,null,"repositories")," page the table skeleton is\nbriefly shown before the table is populated with data from github. The link\ncolumn however just shows ",l.createElement(t.code,null,"link")," we will fix that next."),"\n",l.createElement(t.p,null,"At the top of ",l.createElement(t.code,null,"repos.js")," import the ",l.createElement(t.code,null,"cds-link")," component."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"import '@carbon/web-components/es/components/link/index';\n")),"\n",l.createElement(t.p,null,"Find ",l.createElement(t.code,null,"links: 'link'")," in the ",l.createElement(t.code,null,"fetchData")," function and replace it with:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"links: { url: row.html_url, homepage: row.homepage },\n")),"\n",l.createElement(t.p,null,"In our ",l.createElement(t.code,null,"updateTable")," function we need to do something different for the links\nkey. Replace"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"keyEl.innerHTML = row[key];\n")),"\n",l.createElement(t.p,null,"with"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},'if (key === \'links\') {\n  keyEl.innerHTML = `<ul class="link-list">\n  <li>\n    <cds-link href="${row[key].url}">GitHub</cds-link>\n  </li>\n  <li>\n    <cds-link href="${row[key].homepage}">Homepage</cds-link>\n  </li>\n</ul>`;\n} else {\n  keyEl.innerHTML = row[key];\n}\n')),"\n",l.createElement(t.p,null,"Now it we could have added the HTML for the links in ",l.createElement(t.code,null,"repositories.html")," but\nthis serves to demonstrate that as with standard HTML tags it is possible to\nsimply insert Carbon Web Components as innerHTML using a string. Just a little\nbit of CSS is needed to present this as per our tutorial design."),"\n",l.createElement(t.p,null,"Open ",l.createElement(t.code,null,"styles.scss")," and add the following."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-scss",metaData:"path=style.scss"},".link-list {\n  display: flex;\n  list-style: none;\n  padding: 0;\n}\n\n.link-list li:not(:last-child) {\n  padding-inline-end: $spacing-02;\n\n  &::after {\n    content: '|';\n    display: inline;\n  }\n}\n\n.link-list li:not(:first-child) {\n  padding-left: $spacing-02;\n}\n")),"\n",l.createElement(t.h2,null,"Pagination"),"\n",l.createElement(t.p,null,"The data rendered in our table produces quite a tall page which grows with each\nnew Carbon repository. To complete our repositories page we will add pagination\nto the table."),"\n",l.createElement(t.p,null,"In ",l.createElement(t.code,null,"repos.js")," import the pagination component."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"import '@carbon/web-components/es/components/pagination/index';\n")),"\n",l.createElement(t.p,null,"Now, as part of the ",l.createElement(t.code,null,"template--table")," template we can add the pagination to\n",l.createElement(t.code,null,"repositories.html")," after the closing ",l.createElement(t.code,null,"<cds-table>")," tag."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-html",metaData:"path=repositories.html"},'<cds-pagination\n  backward-text="Previous page"\n  forward-text="Next page"\n  itemsPerPageText="Items per page">\n  <cds-select-item value="10">10</cds-select-item>\n  <cds-select-item value="20">20</cds-select-item>\n  <cds-select-item value="30">30</cds-select-item>\n  <cds-select-item value="40">40</cds-select-item>\n  <cds-select-item value="50">50</cds-select-item>\n</cds-pagination>\n')),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," The ",l.createElement(t.code,null,"Pagination")," component isn’t inherently connected in any way to\nthe ",l.createElement(t.code,null,"DataTable")," - we need to tell it what to do when a change occurs using the\n",l.createElement(t.code,null,"onChange")," prop. This includes both page size changes and displaying different\nrows.")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," Like the other Carbon Web Components components, ",l.createElement(t.code,null,"Pagination"),"\ncomponent examples can be found in\n",l.createElement(t.a,{href:"https://web-components.carbondesignsystem.com/?path=/story/components-pagination--overview"},"Storybook"),"\nby browsing the story and knobs.")),"\n",l.createElement(t.p,null,"If you scroll to the bottom of the ",l.createElement(t.code,null,"repositories")," page in the browser you should\nsee the pagination component rendered."),"\n",l.createElement(t.p,null,"Back in ",l.createElement(t.code,null,"repos.js")," next to the declaration of our data array add two further\nvariables to work with the pagination component. Where we declare the data\nvariable, add variables for page size and row index."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"let data = [];\nlet pageSize = 10;\nlet firstRowIndex = 0;\n")),"\n",l.createElement(t.p,null,"Next we need to add some script to handle events raised by the pagination\ncomponent and update it with the values defined for ",l.createElement(t.code,null,"pageSize")," and\n",l.createElement(t.code,null,"firstRowIndex"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"const handlePageChangeCurrent = ({ detail }) => {\n  firstRowIndex = (detail.page - 1) * detail.pageSize;\n  updateTable();\n};\n\nconst handlePageSizeChange = ({ detail }) => {\n  pageSize = detail.pageSize;\n  updateTable();\n};\n\nconst updatePagination = () => {\n  // update pagination to match data fetched\n  const paginationEl = document.querySelector('cds-pagination');\n  paginationEl.setAttribute('total-items', data.length);\n\n  setTimeout(() => {\n    // defer until after the dom is updated\n    paginationEl.addEventListener(\n      'cds-pagination-changed-current',\n      handlePageChangeCurrent\n    );\n    paginationEl.addEventListener(\n      'cds-page-sizes-select-changed',\n      handlePageSizeChange\n    );\n  }, 10);\n};\n")),"\n",l.createElement(t.p,null,"Add a call to ",l.createElement(t.code,null,"updatePagination")," in ",l.createElement(t.code,null,"replaceSkeleton")," just after the call to\n",l.createElement(t.code,null,"updateTable")),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"// update table rows\nupdateTable();\n\n// update pagination\nupdatePagination();\n")),"\n",l.createElement(t.p,null,"When triggered the handlers update ",l.createElement(t.code,null,"firstRowIndex")," and ",l.createElement(t.code,null,"pageSize")," before calling\n",l.createElement(t.code,null,"updateTable")," which re-renders our table rows. Before it all works we need to\nmake a change to ",l.createElement(t.code,null,"updateTable")," to render just the rows on the current page."),"\n",l.createElement(t.p,null,"Currently, we iterate over the data as follows:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"// iterate over data and render rows\ndata.forEach((row) => {\n  // rows update here\n});\n")),"\n",l.createElement(t.p,null,"Change this introducing a filter before the ",l.createElement(t.code,null,"forEach"),"."),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-javascript",metaData:"path=repos.js"},"// iterate over data and render rows\ndata\n  .filter((v, i) => i >= firstRowIndex && i < firstRowIndex + pageSize)\n  .forEach((row) => {\n    // rows update here\n  });\n")),"\n",l.createElement(t.p,null,"Refreshing the repositories page should now show just ten rows. Try changing the\npage size and the current page number, this should result in new data being\nloaded."),"\n",l.createElement(t.p,null,"That does it! Your data table should fetch GitHub data on first render. You can\nexpand each row to see the repository’s description. You can modify the\npagination items per page and cycle through pages or jump to a specific page of\nrepositories."),"\n",l.createElement(t.h2,null,"Push to GitHub"),"\n",l.createElement(t.p,null,"That is it you are done. Just one more push to save your completion of step 3."),"\n",l.createElement(t.h3,null,"Git commit and push"),"\n",l.createElement(t.p,null,"First, stage and commit all of your changes:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},'git add --all && git commit -m "feat(tutorial): complete step 3"\n')),"\n",l.createElement(t.p,null,"Then, push to your repository:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-bash"},"git push -u origin step-3\n")),"\n",l.createElement(i,null,l.createElement(t.p,null,l.createElement(t.strong,null,"Note:")," If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n",l.createElement(t.a,{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line"},"create a personal access token for the command line"),".\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.")))}function c(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}t.default=function(e={}){const{wrapper:t}=Object.assign({},(0,a.R)(),e.components);return t?l.createElement(t,e,l.createElement(o,e)):o(e)}},725441:function(e,t,n){n.d(t,{A:function(){return l}});var a=n(296540);var l=({title:e,...t})=>a.createElement("iframe",Object.assign({loading:"lazy",title:e},t,{className:"Preview-module--preview--3e1df"}))}}]);