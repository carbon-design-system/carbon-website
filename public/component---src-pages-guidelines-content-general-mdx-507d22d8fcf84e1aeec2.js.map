{"version":3,"sources":["webpack:///./src/pages/guidelines/content/general.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","_extends","mdxType","id","isMDXComponent","components_PageHeader","_cx","children","title","_ref$tabs","tabs","shouldHideHeader","core_browser_esm","className","cx","PageHeader_module","length","text","components_EditLink","relativePagePath","repositoryProp","repository","_1805934869","data","site","siteMetadata","_ref2","baseUrl","href","subDirectory","row","EditLink_module","components_PageTabs","render","_this$props","this","slug","currentTab","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","key","PageTabs_module","gatsby_browser_entry","to","tabsContainer","list","React","Component","__webpack_exports__","pageContext","location","_pageContext$frontmat","frontmatter","scrollDirection","useScrollDirection","pathPrefix","_2216853253","pathname","Layout","homepage","label","Main","padded","NextPrevious","es"],"mappings":"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","file":"component---src-pages-guidelines-content-general-mdx-507d22d8fcf84e1aeec2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/vincepicone/Programming/Work/carbon-www/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"content-design-can-make-or-break-an-online-experience-always-strive-for-writing-that-is-clear-concise-and-on-brand\"\n    }}>{`Content design can make or break an online experience. Always strive for writing that is clear, concise, and on-brand.`}</h3>\n    <h2 {...{\n      \"id\": \"voice-and-tone\"\n    }}>{`Voice and tone`}</h2>\n    <p>{`Consistent voice and tone are crucial for connecting and resonating with users. What’s the difference between voice and tone? One way to think about it is that voice is always consistent, but tone often changes depending on context.`}</p>\n    <h3 {...{\n      \"id\": \"voice\"\n    }}>{`Voice`}</h3>\n    <p>{`Voice is the foundation for communicating about IBM products and delivering brand messages. At IBM, our voice expresses the core of our personality, while bringing comfort, ease, and a sense of connection to our users. Through careful use of the IBM voice, we help empower users to meet their business goals.`}</p>\n    <h3 {...{\n      \"id\": \"tone\"\n    }}>{`Tone`}</h3>\n    <p>{`Tone conveys an attitude toward both the subject matter and the reader. All content – whether it’s introductory text on the UI, an error message, or a topic in the docs – tells part of a bigger story. Good storytellers are skilled in two main areas: what they are saying (the substantive content) and how to say it to any given audience (the style and tone in which it is presented). Be a good storyteller.`}</p>\n    <h2 {...{\n      \"id\": \"conversational-levels\"\n    }}>{`Conversational levels`}</h2>\n    <p>{`Content should never feel complex, distant, or disjointed. Rather, it should feel like a conversation with a smart friend – personal, relatable, helpful, and engaging. Do not mistake conversational style for sloppy writing! Conversational content still needs to be clear, concise, and easy to understand. The best content creates a connection with the user.`}</p>\n    <p>{`Here’s a quick guide to conversational levels based on the six stages of the user journey:`}</p>\n    <h3 {...{\n      \"id\": \"less-conversational\"\n    }}>{`Less conversational`}</h3>\n    <h4 {...{\n      \"id\": \"instructional-content-for-how-to-complete-a-task-eg-steps\"\n    }}>{`Instructional content for how to complete a task (e.g. steps)`}</h4>\n    <p>{`“Go to Avatar icon > Account > Notifications to set up general account and spending notifications. Spending notifications are available only for Subscription and Pay-As-You-Go account owners.”`}</p>\n    <h3 {...{\n      \"id\": \"more-conversational\"\n    }}>{`More conversational`}</h3>\n    <h4 {...{\n      \"id\": \"welcome-pages-and-standard-interface-content-for-productive-use-managing-and-upgrading-leverage-and-extend-content-and-support\"\n    }}>{`Welcome pages and standard interface content for productive use, managing and upgrading, leverage and extend content, and support`}</h4>\n    <p>{`“To start using IBM Cloud, name your first organization. Think of an org as a project or team that shares resources, such as apps, databases, and other services. Orgs exist in geographic regions, so decide where you’d like to put your first one.”`}</p>\n    <h3 {...{\n      \"id\": \"most-conversational\"\n    }}>{`Most conversational`}</h3>\n    <h4 {...{\n      \"id\": \"discover-try-buy\"\n    }}>{`Discover, Try, Buy`}</h4>\n    <p>{`“Watson Assistant comes pre-trained with industry-relevant content. It can make sense of your historical chat or call logs, and it has a visual dialog editor — meaning it’s never been easier to get started (developers not required).”`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  pageHeader,\n  text,\n  pageHeaderSticky,\n  pageHeaderShifted,\n} from './PageHeader.module.scss';\n\nconst PageHeader = ({ children, title, tabs = [], shouldHideHeader }) => (\n  <div\n    className={cx({\n      [pageHeader]: pageHeader,\n      [pageHeaderSticky]: tabs.length,\n      [pageHeaderShifted]: shouldHideHeader,\n    })}\n  >\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n    {children}\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Pass in the children that will be rendered within the PageHeader\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { WebsiteBackToTopBtn } from '@carbon/addons-website';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport { useScrollDirection } from '../util/hooks';\n\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath } = pageContext;\n  const { tabs, title } = frontmatter;\n  const scrollDirection = useScrollDirection();\n  const shouldHideHeader = !!tabs && scrollDirection === 'down';\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout shouldHideHeader={shouldHideHeader} homepage={false}>\n      <PageHeader\n        shouldHideHeader={shouldHideHeader}\n        title={title}\n        label=\"label\"\n        tabs={tabs}\n      >\n        {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      </PageHeader>\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <WebsiteBackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}