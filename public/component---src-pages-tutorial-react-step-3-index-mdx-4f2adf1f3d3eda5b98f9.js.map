{"version":3,"sources":["webpack:///./src/pages/tutorial/react-step-3/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","AnchorLinks","AnchorLink","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_extends","mdxType","id","parentName","href","offsetLg","height","title","src","frameBorder","allowtransparency","allowFullScreen","className","isMDXComponent","components_PageHeader","_cx","children","_ref$tabs","tabs","shouldHideHeader","core_browser_esm","cx","PageHeader_module","length","text","components_EditLink","relativePagePath","repositoryProp","repository","_1805934869","data","site","siteMetadata","_ref2","baseUrl","subDirectory","row","EditLink_module","components_PageTabs","render","_this$props","this","slug","currentTab","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","key","PageTabs_module","gatsby_browser_entry","to","tabsContainer","list","React","Component","__webpack_exports__","pageContext","location","_pageContext$frontmat","frontmatter","scrollDirection","useScrollDirection","pathPrefix","_2216853253","pathname","Layout","homepage","label","Main","padded","NextPrevious","es"],"mappings":"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","file":"component---src-pages-tutorial-react-step-3-index-mdx-4f2adf1f3d3eda5b98f9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/vincepicone/Programming/Work/carbon-www/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"this-step-takes-our-static-components-and-populates-them-with-data-from-the-github-graphql-api--loading-states-and-all-well-be-displaying-carbon-repository-information-in-a-data-table\"\n    }}>{`This step takes our static components and populates them with data from the GitHub GraphQL API – loading states and all. We’ll be displaying Carbon repository information in a data table.`}</h3>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n      <AnchorLink mdxType=\"AnchorLink\">Fork, clone and branch</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Install dependencies</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Create access token</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Connect to Apollo</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Fetch data</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Populate data table</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Add loading</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Add pagination</AnchorLink>\n      <AnchorLink mdxType=\"AnchorLink\">Submit pull request</AnchorLink>\n    </AnchorLinks>\n    <h3 {...{\n      \"id\": \"preview\"\n    }}>{`Preview`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.github.com/v4/\"\n      }}>{`GitHub GraphQL API`}</a>{` is very well documented, and even though the focus of this tutorial isn’t learning and using GraphQL, it’s a great opportunity to fetch Carbon-related data for this Carbon tutorial.`}</p>\n    <p>{`To do so, we’ll be using Apollo Client, the front-end component of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/intro/platform\"\n      }}>{`Apollo Platform`}</a>{`. Apollo provides several open source tools for using GraphQL throughout your application’s stack. Apollo Client is a sophisticated GraphQL client that manages data and state in an application.`}</p>\n    <p>{`A `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-step-4--carbon-tutorial.netlify.com\"\n      }}>{`preview`}</a>{` of what you will build (see repositories page):`}</p>\n    <Row mdxType=\"Row\">\n  <Column offsetLg=\"4\" mdxType=\"Column\">\n    <iframe height=\"400\" title=\"Carbon Tutorial Step 3\" src=\"https://react-step-4--carbon-tutorial.netlify.com\" frameBorder=\"no\" allowtransparency=\"true\" allowFullScreen=\"true\" className=\"bx--iframe bx--iframe--border\" />\n  </Column>\n    </Row>\n    <h2 {...{\n      \"id\": \"fork-clone-and-branch\"\n    }}>{`Fork, clone and branch`}</h2>\n    <p>{`This tutorial has an accompanying GitHub repository called `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon-tutorial\"\n      }}>{`carbon-tutorial`}</a>{` that we’ll use as a starting point for each step. If you haven’t forked and cloned that repository yet, and haven’t added the upstream remote, go ahead and do so by following the `}<a parentName=\"p\" {...{\n        \"href\": \"/tutorial/react-step-1#fork-clone--branch\"\n      }}>{`step 1 instructions`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"branch\"\n    }}>{`Branch`}</h3>\n    <p>{`With your repository all set up, let’s check out the branch for this tutorial step’s starting point.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ git fetch upstream\n$ git checkout -b react-step-3 upstream/react-step-3\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"build-and-start-app\"\n    }}>{`Build and start app`}</h3>\n    <p>{`Install the app’s dependencies:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn\n`}</code></pre>\n    <p>{`Then, start the app:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn start\n`}</code></pre>\n    <p>{`You should see something similar to where the `}<a parentName=\"p\" {...{\n        \"href\": \"/tutorial/react-step-2\"\n      }}>{`previous step`}</a>{` left off. Stop your app with `}<inlineCode parentName=\"p\">{`CTRL-C`}</inlineCode>{` and let’s get everything installed.`}</p>\n    <h2 {...{\n      \"id\": \"install-dependencies\"\n    }}>{`Install dependencies`}</h2>\n    <p>{`We’ll need to install three new dependencies to incorporate Apollo into our application.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`apollo-boost`}</inlineCode>{` - package containing everything you need to set up Apollo Client`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`graphql`}</inlineCode>{` - parses your GraphQL queries`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`react-apollo`}</inlineCode>{` - Apollo integration for React`}</li>\n    </ul>\n    <p>{`Install them with the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn add apollo-boost graphql react-apollo\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-access-token\"\n    }}>{`Create access token`}</h2>\n    <p>{`You’ll need a personal access token from your GitHub account in order to make requests to the GitHub API. Check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`this guide`}</a>{` to see how to get one.`}</p>\n    <p>{`When you get to the scope/permissions step, you can leave them all unchecked. We don’t need any special permissions, we just need access to the public API.`}</p>\n    <p>{`Once you have your token, we need to put it in a place where create-react-app can use it. When your application is being built and developed, create-react-app will parse environmental variables in any file that starts with `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` and make them available under `}<inlineCode parentName=\"p\">{`process.env.MY_VARIABLE`}</inlineCode>{`.`}</p>\n    <p>{`One caveat is that we need to start our variables with `}<inlineCode parentName=\"p\">{`REACT_APP_`}</inlineCode>{`. You can read more about environmental variables in `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables\"\n      }}>{`create-react-app’s guide`}</a>{`.`}</p>\n    <p>{`Since we don’t want to commit this file to Git, we can put it in `}<inlineCode parentName=\"p\">{`.env.local`}</inlineCode>{` which is in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` list. Your file should just have a single line like this one, where the `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{`s are replaced with your unique token.`}</p>\n    <h5 {...{\n      \"id\": \"envlocal\"\n    }}>{`.env.local`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN=xxxxxx\n`}</code></pre>\n    <p>{`Go ahead and start your app with `}<inlineCode parentName=\"p\">{`yarn start`}</inlineCode>{`, or, if your app is running, you’ll need to restart it to get access to this token.`}</p>\n    <h2 {...{\n      \"id\": \"connect-to-apollo\"\n    }}>{`Connect to Apollo`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{` library gives us a component that we need to put at the base of our application. Typically the best place for things that need to wrap the entire application is at the root of the application. For us, that’s at `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{`.`}</p>\n    <p>{`Add these two imports to `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{`:`}</p>\n    <h5 {...{\n      \"id\": \"srcindexjs\"\n    }}>{`src/index.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n`}</code></pre>\n    <p>{`Next, make your client by providing a URI for the GitHub GraphQL API as well as an authorization header using the environmental variable you just added to `}<inlineCode parentName=\"p\">{`.env.local`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"srcindexjs-1\"\n    }}>{`src/index.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: \\`Bearer \\${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}\\`,\n  },\n});\n`}</code></pre>\n    <p>{`Now we can wrap our application with `}<inlineCode parentName=\"p\">{`ApolloProvider`}</inlineCode>{`. At the same time, we’ll pass in the client we just made as a prop to the `}<inlineCode parentName=\"p\">{`ApolloProvider`}</inlineCode>{` component. Replace:`}</p>\n    <h5 {...{\n      \"id\": \"srcindexjs-2\"\n    }}>{`src/index.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<Router>\n  <App />\n</Router>\n`}</code></pre>\n    <p>{`With:`}</p>\n    <h5 {...{\n      \"id\": \"srcindexjs-3\"\n    }}>{`src/index.js`}</h5>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<ApolloProvider client={client}>\n  <Router>\n    <App />\n  </Router>\n</ApolloProvider>\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <h2 {...{\n      \"id\": \"fetch-data\"\n    }}>{`Fetch data`}</h2>\n    <h3 {...{\n      \"id\": \"imports\"\n    }}>{`Imports`}</h3>\n    <p>{`Add the following imports at the top of `}<inlineCode parentName=\"p\">{`RepoPage.js`}</inlineCode>{`:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"query\"\n    }}>{`Query`}</h3>\n    <p>{`Next we’ll assemble our GraphQL query to fetch only the data we need from the GraphQL API. We’ll do this using the `}<inlineCode parentName=\"p\">{`gql`}</inlineCode>{` helper we just imported. The `}<inlineCode parentName=\"p\">{`gql`}</inlineCode>{` helper lets you write GraphQL queries using interpolated strings (backticks) in JavaScript. In addition, we’ll be using the `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` component from `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{` which gives us some great information about our query’s loading state in addition to the data.`}</p>\n    <p>{`You can use GitHub’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.github.com/v4/explorer/\"\n      }}>{`explorer`}</a>{` tool to write and test your own queries. Try copying the query below and experiment with changing the properties. You can also click the “Docs” button in the top right of the explorer to view all of the available data and query parameters.`}</p>\n    <p>{`If you’d like some more information regarding writing queries and using the Query component, we recommend `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/tutorial/queries\"\n      }}>{`Apollo’s documentation`}</a>{` on this topic.`}</p>\n    <p>{`Add this after your imports:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-1\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`const REPO_QUERY = gql\\`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"helpers\"\n    }}>{`Helpers`}</h3>\n    <p>{`Below that, we should have our table headers set in a previous step that are good to go. Let’s also keep our example rows below that.`}</p>\n    <p>{`Our last column in the data table will be a comma-separated list of repository and home page links, so let’s create a component called `}<inlineCode parentName=\"p\">{`LinkList`}</inlineCode>{`.`}</p>\n    <p>{`Import `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` at the top of `}<inlineCode parentName=\"p\">{`RepoPage.js`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-2\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Link } from 'carbon-components-react';\n`}</code></pre>\n    <p>{`Then use `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` in this component that has two props (`}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`homepageUrl`}</inlineCode>{`) and returns an unordered list. If the repository does not have a home page URL, only render the repository link.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-3\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n`}</code></pre>\n    <p>{`As a final helper, let’s create a function that transforms row data to our expected header keys. Notice how we’re using our new `}<inlineCode parentName=\"p\">{`LinkList`}</inlineCode>{` component to generate the value of the `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` key in each row.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-4\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const getRowItems = rows =>\n  rows.map(row => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"query-component\"\n    }}>{`Query component`}</h3>\n    <p>{`At this point, we should run our query and `}<inlineCode parentName=\"p\">{`console.log()`}</inlineCode>{` the results to verify that the request is working.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` component from `}<inlineCode parentName=\"p\">{`react-apollo`}</inlineCode>{` lets us render different content based on the state of our request. When `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{` is true, we’ll render `}<inlineCode parentName=\"p\">{`Loading...`}</inlineCode>{` for the time being. If there’s an issue, we’ll render the corresponding error message.`}</p>\n    <p>{`Finally, if neither of those are true, it means we have our data! One nice advantage of GraphQL is that as long as there are no errors, we can be certain the properties on the data we requested aren’t `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`.`}</p>\n    <p>{`We need to render the `}<inlineCode parentName=\"p\">{`RepoTable`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{`’s `}<inlineCode parentName=\"p\">{`return()`}</inlineCode>{` statement once the request is no longer loading and when there are no errors. To do so, replace the `}<inlineCode parentName=\"p\">{`RepoTable`}</inlineCode>{` line with the following `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-5\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<RepoTable headers={headers} rows={rows} />\n`}</code></pre>\n    <p>{`Notice how we’re passing the `}<inlineCode parentName=\"p\">{`REPO_QUERY`}</inlineCode>{` that we previously defined into the `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` prop.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-6\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Query query={REPO_QUERY}>\n  {({ loading, error, data: { organization } }) => {\n    // Wait for the request to complete\n    if (loading) return 'Loading...';\n\n    // Something went wrong with the data fetching\n    if (error) return \\`Error! \\${error.message}\\`;\n\n    // If we're here, we've got our data!\n    console.log(organization);\n\n    return (\n      <>\n        <RepoTable headers={headers} rows={rows} />\n      </>\n    );\n  }}\n</Query>\n`}</code></pre>\n    <p>{`The page will look the same as we’re still rendering our static example rows, but if you view your browser’s console (e.g. `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/web/tools/chrome-devtools/\"\n      }}>{`Chrome DevTools`}</a>{`), you should see the response from GitHub!`}</p>\n    <h2 {...{\n      \"id\": \"populate-data-table\"\n    }}>{`Populate data table`}</h2>\n    <p>{`Now that we have that data, let’s populate the data table. Replace `}<inlineCode parentName=\"p\">{`console.log(organization);`}</inlineCode>{` with the following that destructures the `}<inlineCode parentName=\"p\">{`organization`}</inlineCode>{` object. Once we have the repositories, we can call our `}<inlineCode parentName=\"p\">{`getRowItems()`}</inlineCode>{` helper to build the data table rows.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-7\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// If we're here, we've got our data!\nconst { repositories } = organization;\nconst rows = getRowItems(repositories.nodes);\n`}</code></pre>\n    <p>{`Then, towards the top of `}<inlineCode parentName=\"p\">{`RepoPage.js`}</inlineCode>{` delete the `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` array because we no longer need the example rows.`}</p>\n    <h3 {...{\n      \"id\": \"render-repository-descriptions\"\n    }}>{`Render repository descriptions`}</h3>\n    <p>{`The data table component and its pieces use a common React pattern called `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/render-props.html\"\n      }}>{`render props`}</a>{`. This a really powerful way for libraries to give developers control of rendering and manipulating their data.`}</p>\n    <p>{`Revisiting `}<inlineCode parentName=\"p\">{`RepoTable.js`}</inlineCode>{`, we are already passing in our row objects along with headers for each column. The `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` prop is being used to tell the data table how to render the headers and rows. That prop takes a function that receives the processed headers and rows as arguments as well as some helper functions for rendering the table.`}</p>\n    <p>{`One common hurdle with the data table is how to access data that might not correspond with a table column but is needed to compute the value of a cell that does. The data table component processes and controls only the row properties which corresponds to headers (columns). Because of this, the `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` object you get access to in the render prop function is `}<em parentName=\"p\">{`different`}</em>{` than the one you passed in to the `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` prop.`}</p>\n    <p>{`We need to modify one aspect of the data table because if you expand a row, it says `}<inlineCode parentName=\"p\">{`Row description`}</inlineCode>{`. We want to update that with the repository description coming from the GitHub API. This is an example of where we need a simple look-up function to find the data we care about - data that does not directly correspond to a column.`}</p>\n    <p>{`To do so, in `}<inlineCode parentName=\"p\">{`RepoTable.js`}</inlineCode>{`, add this look-up function as the first lines inside the `}<inlineCode parentName=\"p\">{`RepoTable`}</inlineCode>{`. This should go immediately before the component’s `}<inlineCode parentName=\"p\">{`return()`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepotablejs\"\n    }}>{`src/content/RepoPage/RepoTable.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const getRowDescription = rowId => {\n  const row = rows.find(({ id }) => id === rowId);\n  return row ? row.description : '';\n};\n`}</code></pre>\n    <p>{`Finally, in `}<inlineCode parentName=\"p\">{`RepoTable.js`}</inlineCode>{`, replace `}<inlineCode parentName=\"p\">{`<p>Row description</p>`}</inlineCode>{` with:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepotablejs-1\"\n    }}>{`src/content/RepoPage/RepoTable.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<p>{getRowDescription(row.id)}</p>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-loading\"\n    }}>{`Add loading`}</h2>\n    <p>{`At this point, the first time that you visit the repositories page, we’re querying the GitHub API and rendering the response through the `}<inlineCode parentName=\"p\">{`DataTable`}</inlineCode>{` component. We could stop here, but there’s more to be done! Let’s replace the `}<inlineCode parentName=\"p\">{`Loading...`}</inlineCode>{` string with the `}<a parentName=\"p\" {...{\n        \"href\": \"http://react.carbondesignsystem.com/?selectedKind=DataTableSkeleton\"\n      }}>{`DataTableSkeleton component`}</a>{`.`}</p>\n    <p>{`To do so, back to `}<inlineCode parentName=\"p\">{`RepoPage.js`}</inlineCode>{`, add the `}<inlineCode parentName=\"p\">{`DataTableSkeleton`}</inlineCode>{` import by modifying the existing `}<inlineCode parentName=\"p\">{`carbon-components-react`}</inlineCode>{` import.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-8\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Link, DataTableSkeleton } from 'carbon-components-react';\n`}</code></pre>\n    <p>{`Then replace the `}<inlineCode parentName=\"p\">{`if (loading) return 'Loading...';`}</inlineCode>{` with:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-9\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`if (loading)\n  return (\n    <DataTableSkeleton\n      columnCount={headers.length + 1}\n      rowCount={10}\n      headers={headers}\n    />\n  );\n`}</code></pre>\n    <p>{`We need to tell the loading skeleton how many rows to render, so let’s use 10 skeleton rows to prepare for the next enhancement…`}</p>\n    <h2 {...{\n      \"id\": \"add-pagination\"\n    }}>{`Add pagination`}</h2>\n    <p>{`Pagination! Instead of rendering every repository, let’s add pagination to the data table to only render 10 at a time. Depending on your specific requirements, you may need to fetch new data each time that you interact with the pagination component, but for simplicity, we’re going to make one request to fetch all data, and then paginate the in-memory row data.`}</p>\n    <p>{`We’ll be using `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`React Hooks`}</a>{` to manage our state. Hooks are a relatively new React API that allows us to author a React component’s stateful logic in a function component rather than a class component. Using hooks means we don’t need to worry about complex lifecycle methods.`}</p>\n    <p>{`Import React’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-state.html\"\n      }}>{`useState`}</a>{` by modifying the `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{` import.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-10\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState } from 'react';\n`}</code></pre>\n    <p>{`Then initialize the new state variables that we’ll use for pagination as the first lines inside the `}<inlineCode parentName=\"p\">{`RepoPage`}</inlineCode>{` component, above the `}<inlineCode parentName=\"p\">{`return()`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-11\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const [totalItems, setTotalItems] = useState(0);\nconst [firstRowIndex, setFirstRowIndex] = useState(0);\nconst [currentPageSize, setCurrentPageSize] = useState(10);\n`}</code></pre>\n    <p>{`This initializes the total number of rows and the index of the first row to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, and the page size to `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{` as we also specified in our loading skeleton.`}</p>\n    <p>{`Next we need to use the function that updates the `}<inlineCode parentName=\"p\">{`totalItems`}</inlineCode>{` state, `}<inlineCode parentName=\"p\">{`setTotalItems()`}</inlineCode>{`, after we destructure our `}<inlineCode parentName=\"p\">{`organization.repositories`}</inlineCode>{`. Your block that transforms row data should look like:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-12\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// If we're here, we've got our data!\nconst { repositories } = organization;\nsetTotalItems(repositories.totalCount);\nconst rows = getRowItems(repositories.nodes);\n`}</code></pre>\n    <p>{`Then we need to update our `}<inlineCode parentName=\"p\">{`RepoTable`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` prop to only render the subset of rows for the current “page”. Update `}<inlineCode parentName=\"p\">{`<RepoTable headers={headers} rows={rows} />`}</inlineCode>{` to:`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-13\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    {\n      /* prettier-ignore-start */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<RepoTable\n  headers={headers}\n  rows={rows.slice(\n    firstRowIndex,\n    firstRowIndex + currentPageSize\n  )}\n/>\n`}</code></pre>\n    {\n      /* prettier-ignore-end */\n    }\n    <p><em parentName=\"p\">{`Note: We only pass the rows that we want our table to display. We can do this by slicing the our array of rows depending on the first item and the page size.`}</em></p>\n    <p>{`Finally, let’s add the `}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{` to update our state variables and cause the data table to render new rows.`}</p>\n    <p>{`Import `}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{` by updating the `}<inlineCode parentName=\"p\">{`carbon-components-react`}</inlineCode>{` import.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-14\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n`}</code></pre>\n    <p>{`Immediately after the `}<inlineCode parentName=\"p\">{`RepoTable`}</inlineCode>{` closing tag (`}<inlineCode parentName=\"p\">{`/>`}</inlineCode>{`), add the `}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{` component using the state variables that we previously initialized.`}</p>\n    <h5 {...{\n      \"id\": \"srccontentrepopagerepopagejs-15\"\n    }}>{`src/content/RepoPage/RepoPage.js`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Pagination\n  totalItems={totalItems}\n  backwardText=\"Previous page\"\n  forwardText=\"Next page\"\n  pageSize={currentPageSize}\n  pageSizes={[5, 10, 15, 25]}\n  itemsPerPageText=\"Items per page\"\n  onChange={({ page, pageSize }) => {\n    if (pageSize !== currentPageSize) {\n      setCurrentPageSize(pageSize);\n    }\n    setFirstRowIndex(pageSize * (page - 1));\n  }}\n/>\n`}</code></pre>\n    <p><em parentName=\"p\">{`Note: The`}</em>{` `}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{` `}<em parentName=\"p\">{`component isn’t inherently connected in any way to the`}</em>{` `}<inlineCode parentName=\"p\">{`DataTable`}</inlineCode>{` `}<em parentName=\"p\">{`- we need to tell it what to do when a change occurs using the`}</em>{` `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` `}<em parentName=\"p\">{`prop. This includes both page size changes and displaying different rows.`}</em></p>\n    <p><em parentName=\"p\">{`Note: Like the other Carbon React components,`}</em>{` `}<inlineCode parentName=\"p\">{`Pagination`}</inlineCode>{` `}<em parentName=\"p\">{`component examples can be found in `}<a parentName=\"em\" {...{\n          \"href\": \"http://react.carbondesignsystem.com/?selectedKind=Pagination\"\n        }}>{`Storybook`}</a>{` by browsing the story and knobs.`}</em></p>\n    <p>{`That does it! Your data table should fetch GitHub data on first render. You can expand each row to see the repository’s description. You can modify the pagination items per page and cycle through pages or jump to a specific page of repositories.`}</p>\n    <h2 {...{\n      \"id\": \"submit-pull-request\"\n    }}>{`Submit pull request`}</h2>\n    <p>{`We’re going to submit a pull request to verify completion of this tutorial step.`}</p>\n    <h3 {...{\n      \"id\": \"continuous-integration-ci-check\"\n    }}>{`Continuous integration (CI) check`}</h3>\n    <p>{`Run the CI check to make sure we’re all set to submit a pull request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn ci-check\n`}</code></pre>\n    <p><em parentName=\"p\">{`Note: Having issues running the CI check? `}<a parentName=\"em\" {...{\n          \"href\": \"/tutorial/react-step-1#continuous-integration-(ci)-check\"\n        }}>{`Step 1`}</a>{` has troubleshooting notes that may help.`}</em></p>\n    <h3 {...{\n      \"id\": \"git-commit-and-push\"\n    }}>{`Git commit and push`}</h3>\n    <p>{`Before we can create a pull request, stage and commit all of your changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ git add --all && git commit -m \"feat(tutorial): complete step 3\"\n`}</code></pre>\n    <p>{`Then, push to your repository:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ git push origin react-step-3\n`}</code></pre>\n    <p><em parentName=\"p\">{`Note: Having issues pushing your changes? `}<a parentName=\"em\" {...{\n          \"href\": \"/tutorial/react-step-1#git-commit-and-push\"\n        }}>{`Step 1`}</a>{` has troubleshooting notes that may help.`}</em></p>\n    <h3 {...{\n      \"id\": \"pull-request-pr\"\n    }}>{`Pull request (PR)`}</h3>\n    <p>{`Finally, visit `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon-tutorial\"\n      }}>{`carbon-tutorial`}</a>{` to “Compare & pull request”. In doing so, make sure that you are comparing to `}<inlineCode parentName=\"p\">{`react-step-3`}</inlineCode>{` into `}<inlineCode parentName=\"p\">{`base: react-step-3`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`Note: Expect your tutorial step PRs to be reviewed by the Carbon team but not merged. We’ll close your PR so we can keep the repository’s remote branches pristine and ready for the next person!`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n  pageHeader,\n  text,\n  pageHeaderSticky,\n  pageHeaderShifted,\n} from './PageHeader.module.scss';\n\nconst PageHeader = ({ children, title, tabs = [], shouldHideHeader }) => (\n  <div\n    className={cx({\n      [pageHeader]: pageHeader,\n      [pageHeaderSticky]: tabs.length,\n      [pageHeaderShifted]: shouldHideHeader,\n    })}\n  >\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n    {children}\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Pass in the children that will be rendered within the PageHeader\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { WebsiteBackToTopBtn } from '@carbon/addons-website';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport { useScrollDirection } from '../util/hooks';\n\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath } = pageContext;\n  const { tabs, title } = frontmatter;\n  const scrollDirection = useScrollDirection();\n  const shouldHideHeader = !!tabs && scrollDirection === 'down';\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout shouldHideHeader={shouldHideHeader} homepage={false}>\n      <PageHeader\n        shouldHideHeader={shouldHideHeader}\n        title={title}\n        label=\"label\"\n        tabs={tabs}\n      >\n        {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      </PageHeader>\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <WebsiteBackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}