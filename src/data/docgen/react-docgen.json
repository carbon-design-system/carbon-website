{
  "Accordion": {
    "description": "",
    "displayName": "Accordion",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered within the Accordion"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "AccordionItem": {
    "description": "",
    "displayName": "AccordionItem",
    "props": {
      "iconDescription": {
        "defaultValue": { "value": "'Expand/Collapse'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the expando icon."
      },
      "open": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to open the expando."
      },
      "renderExpando": {
        "defaultValue": {
          "value": "props => <button {...props} />",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "The callback function to render the expando button.\nCan be a React component class."
      },
      "title": {
        "defaultValue": { "value": "'title'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "The accordion title."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your AccordionItem"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "The handler of the massaged `click` event."
      },
      "onHeadingClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "The handler of the massaged `click` event on the heading."
      }
    }
  },
  "Breadcrumb": {
    "description": "",
    "displayName": "Breadcrumb",
    "props": {
      "aria-label": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the label for the breadcrumb container"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the BreadcrumbItem's for your Breadcrumb"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "noTrailingSlash": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Optional prop to omit the trailing slash for the breadcrumbs"
      }
    }
  },
  "BreadcrumbItem": {
    "description": "",
    "displayName": "BreadcrumbItem",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in content that will be inside of the BreadcrumbItem"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optional string representing the link location for the BreadcrumbItem"
      },
      "isCurrentPage": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Provide if this breadcrumb item represents the current page"
      }
    }
  },
  "Button": {
    "description": "",
    "props": {
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Optional prop to specify the tabIndex of the Button"
      },
      "type": {
        "defaultValue": { "value": "'button'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'button'", "computed": false },
            { "value": "'reset'", "computed": false },
            { "value": "'submit'", "computed": false }
          ]
        },
        "required": false,
        "description": "Optional prop to specify the type of the Button"
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the Button should be disabled, or not"
      },
      "kind": {
        "defaultValue": { "value": "'primary'", "computed": false },
        "type": { "name": "enum", "computed": true, "value": "ButtonKinds" },
        "required": false,
        "description": "Specify the kind of Button you want to create"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the content of your Button"
      },
      "as": {
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "string" }]
        },
        "required": false,
        "description": "Specify how the button itself should be rendered.\nMake sure to apply all props to the root node and render children appropriately"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be added to your Button"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'default'", "computed": false },
            { "value": "'field'", "computed": false },
            { "value": "'small'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the size of the button, from a list of available sizes.\nFor `default` buttons, this prop can remain unspecified."
      },
      "small": {
        "type": {
          "name": "custom",
          "raw": "deprecate(\n  PropTypes.bool,\n  `\\nThe prop \\`small\\` for Button has been deprecated in favor of \\`size\\`. Please use \\`size=\"small\"\\` instead.`\n)"
        },
        "required": false,
        "description": "Deprecated in v10 in favor of `size`.\nSpecify whether the Button should be a small variant"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify an href for your Button to become an <a> element"
      },
      "role": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optional prop to specify the role of the Button"
      },
      "renderIcon": {
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": "Optional prop to allow overriding the icon rendering.\nCan be a React component class"
      },
      "iconDescription": {
        "type": {
          "name": "custom",
          "raw": "props => {\n  if (props.renderIcon && !props.children && !props.iconDescription) {\n    return new Error(\n      'renderIcon property specified without also providing an iconDescription property.'\n    );\n  }\n  return undefined;\n}"
        },
        "required": false,
        "description": "If specifying the `renderIcon` prop, provide a description for that icon that can\nbe read by screen readers"
      },
      "hasIconOnly": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the button is an icon-only button"
      },
      "tooltipPosition": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'top'", "computed": false },
            { "value": "'right'", "computed": false },
            { "value": "'bottom'", "computed": false },
            { "value": "'left'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left."
      },
      "tooltipAlignment": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'start'", "computed": false },
            { "value": "'center'", "computed": false },
            { "value": "'end'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end."
      }
    }
  },
  "Checkbox": {
    "description": "",
    "displayName": "Checkbox",
    "props": {
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Receives three arguments: true/false, the checkbox's id, and the dom event.\n`(value, id, event) => console.log({value, id, event})`"
      },
      "indeterminate": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the Checkbox is in an indeterminate state"
      },
      "checked": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the underlying input should be checked"
      },
      "defaultChecked": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the underlying input should be checked by default"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the <label> node"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the Checkbox should be disabled"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide an `id` to uniquely identify the Checkbox input"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user"
      },
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "title": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a title for the <label> node for the Checkbox"
      },
      "wrapperClassName": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name to be placed on the wrapping element"
      }
    }
  },
  "CodeSnippet": {
    "description": "",
    "displayName": "CodeSnippet",
    "props": {
      "type": {
        "defaultValue": { "value": "'single'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'single'", "computed": false },
            { "value": "'inline'", "computed": false },
            { "value": "'multi'", "computed": false }
          ]
        },
        "required": false,
        "description": "Provide the type of Code Snippet"
      },
      "showMoreText": {
        "defaultValue": { "value": "'Show more'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a string that is displayed when the Code Snippet text is more\nthan 15 lines"
      },
      "showLessText": {
        "defaultValue": { "value": "'Show less'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a string that is displayed when the Code Snippet has been\ninteracted with to show more lines"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "children": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the content of your CodeSnippet as a string"
      },
      "feedback": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the string displayed when the snippet is copied"
      },
      "copyButtonDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the description for the Copy Button"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "An optional handler to listen to the `onClick` even fired by the Copy\nButton"
      },
      "copyLabel": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a label to be read by screen readers on the containing <textbox>\nnode"
      },
      "ariaLabel": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a label to be read by screen readers on the containing <textbox>\nnode"
      },
      "light": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you are using the light variant of the Code Snippet,\ntypically used for inline snippet to display an alternate color"
      }
    }
  },
  "ComboBox": {
    "description": "",
    "displayName": "ComboBox",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the control should be disabled, or not"
      },
      "itemToString": {
        "defaultValue": {
          "value": "item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item && item.label;\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Helper function passed to downshift that allows the library to render a\ngiven item to a string label. By default, it extracts the `label` field\nfrom a given item to serve as the item label in the list"
      },
      "itemToElement": {
        "defaultValue": { "value": "null", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optional function to render items as custom components instead of strings.\nDefaults to null and is overriden by a getter"
      },
      "shouldFilterItem": {
        "defaultValue": { "value": "() => true", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Specify your own filtering logic by passing in a `shouldFilterItem`\nfunction that takes in the current input and an item and passes back\nwhether or not the item should be filtered."
      },
      "type": {
        "defaultValue": { "value": "'default'", "computed": false },
        "type": { "name": "custom", "raw": "ListBoxPropTypes.ListBoxType" },
        "required": false,
        "description": "Currently supports either the default type, or an inline variant"
      },
      "ariaLabel": {
        "defaultValue": { "value": "'Choose an item'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "'aria-label' of the ListBox component."
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "should use \"light theme\" (white background)?"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "An optional className to add to the container node"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id` for the input"
      },
      "initialSelectedItem": {
        "type": {
          "name": "union",
          "value": [{ "name": "object" }, { "name": "string" }]
        },
        "required": false,
        "description": "Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\nfrom their collection that are pre-selected"
      },
      "items": {
        "type": { "name": "array" },
        "required": true,
        "description": "We try to stay as generic as possible here to allow individuals to pass\nin a collection of whatever kind of data structure they prefer"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": true,
        "description": "`onChange` is a utility for this controlled component to communicate to a\nconsuming component when a specific dropdown item is selected.\n@param {{ selectedItem }}"
      },
      "placeholder": {
        "type": { "name": "string" },
        "required": true,
        "description": "Used to provide a placeholder text node before a user enters any input.\nThis is only present if the control has no items selected"
      },
      "invalid": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the currently selected value is invalid."
      },
      "invalidText": {
        "type": { "name": "string" },
        "required": false,
        "description": "Message which is displayed if the value is invalid."
      },
      "selectedItem": {
        "type": {
          "name": "union",
          "value": [{ "name": "object" }, { "name": "string" }]
        },
        "required": false,
        "description": "For full control of the selection"
      },
      "translateWithId": {
        "type": { "name": "func" },
        "required": false,
        "description": "Specify a custom translation function that takes in a message identifier\nand returns the localized string for the message"
      },
      "onInputChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Callback function to notify consumer when the text input changes.\nThis provides support to change available items based on the text.\n@param {string} inputText"
      },
      "downshiftProps": {
        "type": {
          "name": "shape",
          "value": "Downshift.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Additional props passed to Downshift"
      }
    }
  },
  "ContentSwitcher": {
    "description": "",
    "displayName": "ContentSwitcher",
    "props": {
      "selectedIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify a selected index for the initially selected content"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in Switch components to be rendered in the ContentSwitcher"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be added to the container node"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": true,
        "description": "Specify an `onChange` handler that is called whenever the ContentSwitcher\nchanges which item is selected"
      }
    }
  },
  "Copy": {
    "description": "",
    "displayName": "Copy",
    "props": {
      "feedback": {
        "defaultValue": { "value": "'Copied!'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the string that is displayed when the button is clicked and the\ncontent is copied"
      },
      "feedbackTimeout": {
        "defaultValue": { "value": "2000", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the time it takes for the feedback message to timeout"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Specify an optional `onClick` handler that is called when the underlying\n<button> is clicked"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in content to be rendred in the underlying <button>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the underlying <button>"
      }
    }
  },
  "CopyButton": {
    "description": "",
    "displayName": "CopyButton",
    "props": {
      "iconDescription": {
        "defaultValue": { "value": "'Copy to clipboard'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for the icon representing the copy action that can\nbe read by screen readers"
      },
      "feedback": {
        "defaultValue": { "value": "'Copied!'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the string that is displayed when the button is clicked and the\ncontent is copied"
      },
      "feedbackTimeout": {
        "defaultValue": { "value": "2000", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the time it takes for the feedback message to timeout"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Specify an optional `onClick` handler that is called when the underlying\n<button> is clicked"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the underlying <button>"
      }
    }
  },
  "DangerButton": { "description": "", "displayName": "DangerButton" },
  "DataTable": {
    "description": "Data Tables are used to represent a collection of resources, displaying a\nsubset of their fields in columns, or headers. We prioritize direct updates\nto the state of what we're rendering, so internally we end up normalizing the\ngiven data and then denormalizing it when rendering.\n\nAs a result, each part of the DataTable is accessible through look-up by id,\nand updating the state of the single entity will cascade updates to the\nconsumer.",
    "displayName": "DataTable",
    "props": {
      "sortRow": {
        "defaultValue": { "value": "defaultSortRow", "computed": true },
        "type": { "name": "func" },
        "required": false,
        "description": "Optional hook to manually control sorting of the rows."
      },
      "filterRows": {
        "defaultValue": { "value": "defaultFilterRows", "computed": true },
        "type": { "name": "func" },
        "required": false,
        "description": "Optional hook to manually control filtering of the rows from the\nTableToolbarSearch component"
      },
      "locale": {
        "defaultValue": { "value": "'en'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a string for the current locale"
      },
      "translateWithId": {
        "defaultValue": {
          "value": "id => defaultTranslations[id]",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Optional method that takes in a message id and returns an\ninternationalized string. See `DataTable.translationKeys` for all\navailable message ids."
      },
      "rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "id": { "name": "string", "required": true },
              "disabled": { "name": "bool", "required": false },
              "isSelected": { "name": "bool", "required": false },
              "isExpanded": { "name": "bool", "required": false }
            }
          }
        },
        "required": true,
        "description": "The `rows` prop is where you provide us with a list of all the rows that\nyou want to render in the table. The only hard requirement is that this\nis an array of objects, and that each object has a unique `id` field\navailable on it."
      },
      "headers": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "key": { "name": "string", "required": true },
              "header": { "name": "node", "required": true }
            }
          }
        },
        "required": true,
        "description": "The `headers` prop represents the order in which the headers should\nappear in the table. We expect an array of objects to be passed in, where\n`key` is the name of the key in a row object, and `header` is the name of\nthe header."
      },
      "radio": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control should be a radio button or inline checkbox"
      },
      "stickyHeader": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the header should be sticky.\nStill experimental: may not work with every combination of table props"
      },
      "isSortable": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the table should be able to be sorted by its headers"
      }
    }
  },
  "Table": {
    "description": "",
    "displayName": "Table",
    "props": {
      "isSortable": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`false` If true, will apply sorting styles"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "useZebraStyles": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to add useZebraStyles striping."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'compact'", "computed": false },
            { "value": "'short'", "computed": false },
            { "value": "'normal'", "computed": false },
            { "value": "'tall'", "computed": false }
          ]
        },
        "required": false,
        "description": "`normal` Change the row height of table"
      },
      "useStaticWidth": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`false` If true, will use a width of 'auto' instead of 100%"
      },
      "shouldShowBorder": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`false` If true, will remove the table border"
      },
      "stickyHeader": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`false` If true, will keep the header sticky (only data rows will scroll)"
      }
    }
  },
  "TableBatchAction": {
    "description": "",
    "displayName": "TableBatchAction",
    "props": {
      "renderIcon": {
        "defaultValue": { "value": "iconAddSolid", "computed": true },
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": "Optional function to render your own icon in the underlying button"
      },
      "hasIconOnly": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the button is an icon-only button"
      },
      "iconDescription": {
        "type": {
          "name": "custom",
          "raw": "props => {\n  if (props.renderIcon && !props.children && !props.iconDescription) {\n    return new Error(\n      'renderIcon property specified without also providing an iconDescription property.'\n    );\n  }\n  return undefined;\n}"
        },
        "required": false,
        "description": "If specifying the `renderIcon` prop, provide a description for that icon that can\nbe read by screen readers"
      }
    }
  },
  "TableBatchActions": {
    "description": "",
    "displayName": "TableBatchActions",
    "props": {
      "translateWithId": {
        "defaultValue": {
          "value": "(id, state) => {\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n  return `${state.totalSelected} ${translationKeys[id]}`;\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Supply a method to translate internal strings with your i18n tool of\nchoice. Translation keys are avabile on the `translationKeys` field for\nthis component."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "shouldShowBatchActions": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Boolean specifier for whether or not the batch action bar should be\ndisplayed"
      },
      "totalSelected": {
        "type": { "name": "number" },
        "required": true,
        "description": "Numeric representation of the total number of items selected in a table.\nThis number is used to derive the selection message"
      },
      "onCancel": {
        "type": { "name": "func" },
        "required": true,
        "description": "Hook required to listen for when the user initiates a cancel request\nthrough this comopnent"
      }
    }
  },
  "TableBody": {
    "description": "",
    "displayName": "TableBody",
    "props": {
      "aria-live": {
        "defaultValue": { "value": "'polite'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'polite'", "computed": false },
            { "value": "'assertive'", "computed": false },
            { "value": "'off'", "computed": false }
          ]
        },
        "required": false,
        "description": "`polite` Adjust the notification behavior of screen readers"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      }
    }
  },
  "TableContainer": {
    "description": "",
    "displayName": "TableContainer",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "title": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide a title for the Table"
      },
      "description": {
        "type": { "name": "node" },
        "required": false,
        "description": "Optional description text for the Table"
      }
    }
  },
  "TableExpandHeader": {
    "description": "",
    "displayName": "TableExpandHeader"
  },
  "TableExpandRow": {
    "description": "",
    "displayName": "TableExpandRow",
    "props": {
      "expandHeader": {
        "defaultValue": { "value": "'expand'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The id of the matching th node in the table head. Addresses a11y concerns outlined here: https://www.ibm.com/able/guidelines/ci162/info_and_relationships.html and https://www.w3.org/TR/WCAG20-TECHS/H43"
      },
      "ariaLabel": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the string read by a voice reader when the expand trigger is\nfocused"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "isExpanded": {
        "type": { "name": "bool" },
        "required": true,
        "description": "Specify whether this row is expanded or not. This helps coordinate data\nattributes so that `TableExpandRow` and `TableExapndedRow` work together"
      },
      "onExpand": {
        "type": { "name": "func" },
        "required": true,
        "description": "Hook for when a listener initiates a request to expand the given row"
      },
      "expandIconDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the chevron right icon, to be put in its SVG `<title>` element."
      }
    }
  },
  "TableExpandedRow": {
    "description": "",
    "displayName": "TableExpandedRow",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the contents for your TableExpandedRow"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "colSpan": {
        "type": { "name": "number" },
        "required": true,
        "description": "The width of the expanded row's internal cell"
      }
    }
  },
  "TableHeader": {
    "description": "",
    "displayName": "TableHeader",
    "props": {
      "isSortable": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether this header is one through which a user can sort the table"
      },
      "scope": {
        "defaultValue": { "value": "'col'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the scope of this table header. You can find more info about this\nattribute at the following URL:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope"
      },
      "translateWithId": {
        "defaultValue": {
          "value": "(key, { sortDirection, isSortHeader, sortStates }) => {\n  if (key === translationKeys.iconDescription) {\n    if (isSortHeader) {\n      // When transitioning, we know that the sequence of states is as follows:\n      // NONE -> ASC -> DESC -> NONE\n      if (sortDirection === sortStates.NONE) {\n        return 'Sort rows by this header in ascending order';\n      }\n      if (sortDirection === sortStates.ASC) {\n        return 'Sort rows by this header in descending order';\n      }\n\n      return 'Unsort rows by this header';\n    }\n    return 'Sort rows by this header in ascending order';\n  }\n\n  return '';\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Supply a method to translate internal strings with your i18n tool of\nchoice. Translation keys are avabile on the `translationKeys` field for\nthis component."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in children that will be embedded in the table header label"
      },
      "isSortHeader": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether this header is the header by which a table is being sorted\nby"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "Hook that is invoked when the header is clicked"
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "Object.values(sortStates)"
        },
        "required": false,
        "description": "Specify which direction we are currently sorting by, should be one of DESC,\nNONE, or ASC."
      }
    }
  },
  "TableRow": {
    "description": "",
    "displayName": "TableRow",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "TableSelectAll": {
    "description": "",
    "displayName": "TableSelectAll",
    "props": {
      "ariaLabel": {
        "defaultValue": {
          "value": "'Select all rows in the table'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the aria label for the underlying input control"
      },
      "checked": {
        "type": { "name": "bool" },
        "required": true,
        "description": "Specify whether all items are selected, or not"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide an `id` for the underlying input control"
      },
      "indeterminate": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the selection only has a subset of all items"
      },
      "name": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide a `name` for the underlying input control"
      },
      "onSelect": {
        "type": { "name": "func" },
        "required": true,
        "description": "Provide a handler to listen to when a user initiates a selection request"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names of the cell that wraps the underlying input control"
      }
    }
  },
  "TableSelectRow": {
    "description": "",
    "displayName": "TableSelectRow",
    "props": {
      "ariaLabel": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the aria label for the underlying input control"
      },
      "checked": {
        "type": { "name": "bool" },
        "required": true,
        "description": "Specify whether all items are selected, or not"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide an `id` for the underlying input control"
      },
      "name": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide a `name` for the underlying input control"
      },
      "onSelect": {
        "type": { "name": "func" },
        "required": true,
        "description": "Provide a handler to listen to when a user initiates a selection request"
      },
      "radio": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control should be a radio button or inline checkbox"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names of the cell that wraps the underlying input control"
      }
    }
  },
  "TableToolbar": {
    "description": "",
    "displayName": "TableToolbar",
    "props": {
      "aria-label": {
        "defaultValue": { "value": "'data table toolbar'", "computed": false },
        "required": false
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered inside the TableToolbar"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "TableToolbarAction": {
    "description": "",
    "displayName": "TableToolbarAction",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": { "name": "func" },
        "required": true,
        "description": ""
      }
    }
  },
  "TableToolbarSearch": {
    "description": "",
    "displayName": "TableToolbarSearch",
    "props": {
      "translateWithId": {
        "defaultValue": {
          "value": "id => {\n  return translationKeys[id];\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide custom text for the component for each translation id"
      },
      "persistent": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Whether the search should be allowed to expand"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class name for the search container"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional id for the search container"
      },
      "searchContainerClasses": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className for the overal container of the Search"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional hook that is called each time the input is updated"
      },
      "placeHolderText": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional placeholder text for the Search component"
      },
      "labelText": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional label text for the Search component icon"
      },
      "defaultValue": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional default value for the Search component"
      },
      "persistant": {
        "type": {
          "name": "custom",
          "raw": "deprecate(\n  PropTypes.bool,\n  `\\nThe prop \\`persistant\\` for TableToolbarSearch has been deprecated in favor of \\`persistent\\`. Please use \\`persistent\\` instead.`\n)"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "TableToolbarMenu": {
    "description": "",
    "displayName": "TableToolbarMenu",
    "props": {
      "renderIcon": {
        "defaultValue": { "value": "Settings16", "computed": true },
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": "Optional prop to allow overriding the default menu icon"
      },
      "iconDescription": {
        "defaultValue": { "value": "'Settings'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the menu icon."
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": ""
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class name for the toolbar menu"
      }
    }
  },
  "DatePicker": {
    "description": "",
    "displayName": "DatePicker",
    "props": {
      "short": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the short version."
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "dateFormat": {
        "defaultValue": { "value": "'m/d/Y'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The date format."
      },
      "locale": {
        "defaultValue": { "value": "'en'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'ar'", "computed": false },
            { "value": "'at'", "computed": false },
            { "value": "'be'", "computed": false },
            { "value": "'bg'", "computed": false },
            { "value": "'bn'", "computed": false },
            { "value": "'cat'", "computed": false },
            { "value": "'cs'", "computed": false },
            { "value": "'cy'", "computed": false },
            { "value": "'da'", "computed": false },
            { "value": "'de'", "computed": false },
            { "value": "'en'", "computed": false },
            { "value": "'en'", "computed": false },
            { "value": "'eo'", "computed": false },
            { "value": "'es'", "computed": false },
            { "value": "'et'", "computed": false },
            { "value": "'fa'", "computed": false },
            { "value": "'fi'", "computed": false },
            { "value": "'fr'", "computed": false },
            { "value": "'gr'", "computed": false },
            { "value": "'he'", "computed": false },
            { "value": "'hi'", "computed": false },
            { "value": "'hr'", "computed": false },
            { "value": "'hu'", "computed": false },
            { "value": "'id'", "computed": false },
            { "value": "'it'", "computed": false },
            { "value": "'ja'", "computed": false },
            { "value": "'ko'", "computed": false },
            { "value": "'lt'", "computed": false },
            { "value": "'lv'", "computed": false },
            { "value": "'mk'", "computed": false },
            { "value": "'mn'", "computed": false },
            { "value": "'ms'", "computed": false },
            { "value": "'my'", "computed": false },
            { "value": "'nl'", "computed": false },
            { "value": "'no'", "computed": false },
            { "value": "'pa'", "computed": false },
            { "value": "'pl'", "computed": false },
            { "value": "'pt'", "computed": false },
            { "value": "'ro'", "computed": false },
            { "value": "'ru'", "computed": false },
            { "value": "'si'", "computed": false },
            { "value": "'sk'", "computed": false },
            { "value": "'sl'", "computed": false },
            { "value": "'sq'", "computed": false },
            { "value": "'sr'", "computed": false },
            { "value": "'sv'", "computed": false },
            { "value": "'th'", "computed": false },
            { "value": "'tr'", "computed": false },
            { "value": "'uk'", "computed": false },
            { "value": "'vn'", "computed": false },
            { "value": "'zh'", "computed": false }
          ]
        },
        "required": false,
        "description": "The language locale used to format the days of the week, months, and numbers.\n\n* `ar` - Arabic\n* `at` - Austria\n* `be` - Belarusian\n* `bg` - Bulgarian\n* `bn` - Bangla\n* `cat` - Catalan\n* `cs` - Czech\n* `cy` - Welsh\n* `da` - Danish\n* `de` - German\n* `en` - English\n* `eo` - Esperanto\n* `es` - Spanish\n* `et` - Estonian\n* `fa` - Persian\n* `fi` - Finnish\n* `fr` - French\n* `gr` - Greek\n* `he` - Hebrew\n* `hi` - Hindi\n* `hr` - Croatian\n* `hu` - Hungarian\n* `id` - Indonesian\n* `it` - Italian\n* `ja` - Japanese\n* `ko` - Korean\n* `lt` - Lithuanian\n* `lv` - Latvian\n* `mk` - Macedonian\n* `mn` - Mongolian\n* `ms` - Malaysian\n* `my` - Burmese\n* `nl` - Dutch\n* `no` - Norwegian\n* `pa` - Punjabi\n* `pl` - Polish\n* `pt` - Portuguese\n* `ro` - Romanian\n* `si` - Sinhala\n* `sk` - Slovak\n* `sl` - Slovenian\n* `sq` - Albanian\n* `sr` - Serbian\n* `sv` - Swedish\n* `th` - Thai\n* `tr` - Turkish\n* `uk` - Ukrainian\n* `vn` - Vietnamese\n* `zh` - Mandarin"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "datePickerType": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'simple'", "computed": false },
            { "value": "'single'", "computed": false },
            { "value": "'range'", "computed": false }
          ]
        },
        "required": false,
        "description": "The type of the date picker:\n\n* `simple` - Without calendar dropdown.\n* `single` - With calendar dropdown and single date.\n* `range` - With calendar dropdown and a date range."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            { "name": "string" },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  { "name": "string" },
                  { "name": "number" },
                  { "name": "object" }
                ]
              }
            },
            { "name": "object" },
            { "name": "number" }
          ]
        },
        "required": false,
        "description": "The value of the date value provided to flatpickr, could\nbe a date, a date number, a date string, an array of dates."
      },
      "appendTo": {
        "type": { "name": "object" },
        "required": false,
        "description": "The DOM element the Flatpicker should be inserted into. `<body>` by default."
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "The `change` event handler."
      },
      "onClose": {
        "type": { "name": "func" },
        "required": false,
        "description": "The `close` event handler."
      },
      "minDate": {
        "type": { "name": "string" },
        "required": false,
        "description": "The minimum date that a user can start picking from."
      },
      "maxDate": {
        "type": { "name": "string" },
        "required": false,
        "description": "The maximum date that a user can pick to."
      }
    }
  },
  "DatePickerInput": {
    "description": "",
    "displayName": "DatePickerInput",
    "props": {
      "pattern": {
        "defaultValue": {
          "value": "'\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}'",
          "computed": false
        },
        "required": false
      },
      "type": {
        "defaultValue": { "value": "'text'", "computed": false },
        "required": false
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "required": false
      },
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "required": false
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify an id that unique identifies the <input>"
      },
      "iconDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the calendar icon."
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      }
    }
  },
  "Dropdown": {
    "description": "",
    "displayName": "Dropdown",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Disable the control"
      },
      "type": {
        "defaultValue": { "value": "'default'", "computed": false },
        "type": { "name": "custom", "raw": "ListBoxPropTypes.ListBoxType" },
        "required": false,
        "description": "The dropdown type, `default` or `inline`"
      },
      "itemToString": {
        "defaultValue": {
          "value": "item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item ? item.label : '';\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Helper function passed to downshift that allows the library to render a\ngiven item to a string label. By default, it extracts the `label` field\nfrom a given item to serve as the item label in the list."
      },
      "itemToElement": {
        "defaultValue": { "value": "null", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Function to render items as custom components instead of strings.\nDefaults to null and is overriden by a getter"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "titleText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "node" }]
        },
        "required": false,
        "description": "Provide the title text that will be read by a screen reader when\nvisiting this control"
      },
      "helperText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "node" }]
        },
        "required": false,
        "description": "Provide helper text that is used alongside the control label for\nadditional help"
      },
      "items": {
        "type": { "name": "array" },
        "required": true,
        "description": "We try to stay as generic as possible here to allow individuals to pass\nin a collection of whatever kind of data structure they prefer"
      },
      "initialSelectedItem": {
        "type": {
          "name": "union",
          "value": [{ "name": "object" }, { "name": "string" }]
        },
        "required": false,
        "description": "Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\nfrom their collection that are pre-selected"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id`"
      },
      "inline": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      },
      "invalid": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the currently selected value is invalid."
      },
      "invalidText": {
        "type": { "name": "string" },
        "required": false,
        "description": "Message which is displayed if the value is invalid."
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "`onChange` is a utility for this controlled component to communicate to a\nconsuming component what kind of internal state changes are occuring."
      },
      "label": {
        "type": { "name": "node" },
        "required": true,
        "description": "Generic `label` that will be used as the textual representation of what\nthis field is for"
      },
      "translateWithId": {
        "type": { "name": "func" },
        "required": false,
        "description": "Callback function for translating ListBoxMenuIcon SVG title"
      },
      "ariaLabel": {
        "type": { "name": "string" },
        "required": false,
        "description": "'aria-label' of the ListBox component."
      },
      "selectedItem": {
        "type": {
          "name": "union",
          "value": [{ "name": "object" }, { "name": "string" }]
        },
        "required": false,
        "description": "In the case you want to control the dropdown selection entirely."
      },
      "downshiftProps": {
        "type": {
          "name": "shape",
          "value": "Downshift.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Additional props passed to Downshift"
      }
    }
  },
  "FileUploader": {
    "description": "",
    "displayName": "FileUploader",
    "props": {
      "iconDescription": {
        "defaultValue": {
          "value": "'Provide icon description'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for the complete/close icon that can be read by screen readers"
      },
      "filenameStatus": {
        "defaultValue": { "value": "'uploading'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'edit'", "computed": false },
            { "value": "'complete'", "computed": false },
            { "value": "'uploading'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the status of the File Upload"
      },
      "buttonLabel": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the label text to be read by screen readers when interacting with\nthe <FileUploaderButton>"
      },
      "buttonKind": {
        "defaultValue": { "value": "'primary'", "computed": false },
        "type": { "name": "enum", "computed": true, "value": "ButtonKinds" },
        "required": false,
        "description": "Specify the type of the <FileUploaderButton>"
      },
      "multiple": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the component should accept multiple files to upload"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onClick` hook that is called each time the button is\nclicked"
      },
      "accept": {
        "defaultValue": { "value": "[]", "computed": false },
        "type": { "name": "arrayOf", "value": { "name": "string" } },
        "required": false,
        "description": "Specify the types of files that this input should be able to receive"
      },
      "labelDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the description text of this <FileUploader>"
      },
      "labelTitle": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the title text of this <FileUploader>"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a name for the underlying <input> node"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the container node"
      }
    }
  },
  "Filename": {
    "description": "",
    "displayName": "Filename",
    "props": {
      "iconDescription": {
        "defaultValue": { "value": "'Uploading file'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description of the SVG icon to denote file upload status"
      },
      "status": {
        "defaultValue": { "value": "'uploading'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'edit'", "computed": false },
            { "value": "'complete'", "computed": false },
            { "value": "'uploading'", "computed": false }
          ]
        },
        "required": false,
        "description": "Status of the file upload"
      },
      "tabIndex": {
        "defaultValue": { "value": "'0'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom tabIndex value for the <Filename>"
      }
    }
  },
  "FileUploaderButton": {
    "description": "",
    "displayName": "FileUploaderButton",
    "props": {
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Provide a custom tabIndex value for the <FileUploaderButton>"
      },
      "disableLabelChanges": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want to disable any updates to the FileUploaderButton\nlabel"
      },
      "labelText": {
        "defaultValue": { "value": "'Add file'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the label text to be read by screen readers when interacting with\nthis control"
      },
      "buttonKind": {
        "defaultValue": { "value": "'primary'", "computed": false },
        "type": { "name": "enum", "computed": true, "value": "ButtonKinds" },
        "required": false,
        "description": "Specify the type of underlying button"
      },
      "multiple": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the component should accept multiple files to upload"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onChange` hook that is called each time the <input>\nvalue changes"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onClick` hook that is called each time the button is\nclicked"
      },
      "accept": {
        "defaultValue": { "value": "[]", "computed": false },
        "type": { "name": "arrayOf", "value": { "name": "string" } },
        "required": false,
        "description": "Specify the types of files that this input should be able to receive"
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether file input is disabled"
      },
      "role": {
        "defaultValue": { "value": "'button'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an accessibility role for the <FileUploaderButton>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the container node"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a unique id for the underlying <input> node"
      },
      "listFiles": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the component to list the files that have been\nsubmitted to be uploaded"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a name for the underlying <input> node"
      }
    }
  },
  "FileUploaderDropContainer": {
    "description": "",
    "displayName": "FileUploaderDropContainer",
    "props": {
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Provide a custom tabIndex value for the <FileUploaderButton>"
      },
      "labelText": {
        "defaultValue": { "value": "'Add file'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the label text to be read by screen readers when interacting with\nthis control"
      },
      "multiple": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the component should accept multiple files to upload"
      },
      "onAddFiles": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Event handler that is called after files are added to the uploader\nThe event handler signature looks like `onAddFiles(evt, { addedFiles })`"
      },
      "accept": {
        "defaultValue": { "value": "[]", "computed": false },
        "type": { "name": "arrayOf", "value": { "name": "string" } },
        "required": false,
        "description": "Specify the types of files that this input should be able to receive"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the container node"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a unique id for the underlying <input> node"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a name for the underlying <input> node"
      },
      "role": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an accessibility role for the <FileUploaderButton>"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether file input is disabled"
      }
    }
  },
  "FileUploaderItem": {
    "description": "",
    "displayName": "FileUploaderItem",
    "props": {
      "uuid": {
        "defaultValue": { "value": "uid()", "computed": true },
        "type": { "name": "string" },
        "required": false,
        "description": "Unique identifier for the file object"
      },
      "status": {
        "defaultValue": { "value": "'uploading'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'uploading'", "computed": false },
            { "value": "'edit'", "computed": false },
            { "value": "'complete'", "computed": false }
          ]
        },
        "required": false,
        "description": "Status of the file upload"
      },
      "onDelete": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Event handler that is called after removing a file from the file uploader\nThe event handler signature looks like `onDelete(evt, { uuid })`"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Name of the uploaded file"
      },
      "iconDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "Description of status icon (displayed in native tooltip)"
      },
      "invalid": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the currently uploaded file is invalid"
      },
      "errorSubject": {
        "type": { "name": "string" },
        "required": false,
        "description": "Error message subject for an invalid file upload"
      },
      "errorBody": {
        "type": { "name": "string" },
        "required": false,
        "description": "Error message body for an invalid file upload"
      }
    }
  },
  "Form": {
    "description": "",
    "displayName": "Form",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide children to be rendered inside of the <form> element"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied on the containing <form> node"
      }
    }
  },
  "FormGroup": {
    "description": "",
    "displayName": "FormGroup",
    "props": {
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <FormGroup> is invalid"
      },
      "message": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the message should be displayed in the <FormGroup>"
      },
      "messageText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the text for the message in the <FormGroup>"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the children form elements to be rendered inside of the <fieldset>"
      },
      "legendText": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide the text to be rendered inside of the fieldset <legend>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <fieldset> node"
      }
    }
  },
  "FormItem": {
    "description": "",
    "displayName": "FormItem",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide content to be rendered in the form item"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the containing node"
      }
    }
  },
  "FormLabel": {
    "description": "",
    "displayName": "FormLabel",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the content of the form label"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <label> node"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a unique id for the given <FormLabel>"
      }
    }
  },
  "Icon": {
    "description": "",
    "displayName": "Icon",
    "props": {
      "fillRule": {
        "defaultValue": { "value": "'evenodd'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `<svg>` `fillRule` attribute."
      },
      "role": {
        "defaultValue": { "value": "'img'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `role` attribute."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name."
      },
      "iconTitle": {
        "type": { "name": "string" },
        "required": false,
        "description": "The icon title."
      },
      "description": {
        "type": { "name": "string" },
        "required": true,
        "description": "The icon description."
      },
      "fill": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `<svg>` `fill` attribute."
      },
      "height": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `<svg>` `height` attribute."
      },
      "icon": {
        "type": {
          "name": "shape",
          "value": {
            "width": { "name": "string", "required": false },
            "height": { "name": "string", "required": false },
            "viewBox": { "name": "string", "required": true },
            "svgData": { "name": "object", "required": true }
          }
        },
        "required": false,
        "description": "The icon data."
      },
      "style": {
        "type": { "name": "object" },
        "required": false,
        "description": "The CSS styles."
      },
      "viewBox": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `<svg>` `viewbox` attribute."
      },
      "width": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `<svg>` `width` attribute."
      },
      "iconRef": {
        "type": { "name": "func" },
        "required": false,
        "description": "The `ref` callback for the icon."
      }
    }
  },
  "InlineLoading": {
    "description": "",
    "displayName": "InlineLoading",
    "props": {
      "status": {
        "defaultValue": {
          "value": "success ? 'finished' : 'active'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'inactive'", "computed": false },
            { "value": "'active'", "computed": false },
            { "value": "'finished'", "computed": false },
            { "value": "'error'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the loading status"
      },
      "successDelay": {
        "defaultValue": { "value": "1500", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Provide a delay for the `setTimeout` for success"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a custom className to be applied to the container node"
      },
      "success": {
        "type": {
          "name": "custom",
          "raw": "deprecate(\n  PropTypes.bool,\n  `\\nThe prop \\`success\\` for InlineLoading has been deprecated in favor of \\`status\\`. Please use \\`status=\"finished\"\\` instead.`\n)"
        },
        "required": false,
        "description": "Specify whether the load was successful"
      },
      "description": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the description for the inline loading text"
      },
      "iconDescription": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the description for the inline loading text"
      },
      "onSuccess": {
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional handler to be inovked when <InlineLoading> is\nsuccessful"
      }
    }
  },
  "Link": {
    "description": "",
    "displayName": "Link",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the content for the Link"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <a> node"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the `href` attribute for the <a> node"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the control should be disabled, or not"
      },
      "inline": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      }
    }
  },
  "ListItem": {
    "description": "",
    "displayName": "ListItem",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the content for the ListItem"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to apply to the underlying <li> node"
      }
    }
  },
  "Loading": {
    "description": "",
    "displayName": "Loading",
    "props": {
      "active": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the loading indicator to be spinning or not"
      },
      "withOverlay": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the loader to be applied with an overlay"
      },
      "small": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you would like the small variant of <Loading>"
      },
      "description": {
        "defaultValue": {
          "value": "'Active loading indicator'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an description that would be used to best describe the loading state"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the containing node"
      }
    }
  },
  "ModalWrapper": {
    "description": "",
    "displayName": "ModalWrapper",
    "props": {
      "primaryButtonText": {
        "defaultValue": { "value": "'Save'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "secondaryButtonText": {
        "defaultValue": { "value": "'Cancel'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "triggerButtonIconDescription": {
        "defaultValue": {
          "value": "'Provide icon description if icon is used'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "triggerButtonKind": {
        "defaultValue": { "value": "'primary'", "computed": false },
        "type": { "name": "enum", "computed": true, "value": "ButtonKinds" },
        "required": false,
        "description": ""
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      },
      "selectorPrimaryFocus": {
        "defaultValue": {
          "value": "'[data-modal-primary-focus]'",
          "computed": false
        },
        "required": false
      },
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "status": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "handleOpen": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "buttonTriggerText": {
        "type": { "name": "node" },
        "required": false,
        "description": ""
      },
      "buttonTriggerClassName": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "modalLabel": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "modalHeading": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "modalText": {
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "passiveModal": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      },
      "withHeader": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      },
      "modalBeforeContent": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      },
      "handleSubmit": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "renderTriggerButtonIcon": {
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": ""
      },
      "shouldCloseAfterSubmit": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      }
    }
  },
  "MultiSelect": {
    "description": "",
    "displayName": "MultiSelect",
    "props": {
      "compareItems": {
        "defaultValue": { "value": "defaultCompareItems", "computed": true },
        "required": false
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Disable the control"
      },
      "locale": {
        "defaultValue": { "value": "'en'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the locale of the control. Used for the default `compareItems`\nused for sorting the list of items in the control."
      },
      "itemToString": {
        "defaultValue": { "value": "defaultItemToString", "computed": true },
        "type": { "name": "func" },
        "required": false,
        "description": "Helper function passed to downshift that allows the library to render a\ngiven item to a string label. By default, it extracts the `label` field\nfrom a given item to serve as the item label in the list."
      },
      "initialSelectedItems": {
        "defaultValue": { "value": "[]", "computed": false },
        "type": { "name": "array" },
        "required": false,
        "description": "Allow users to pass in arbitrary items from their collection that are\npre-selected"
      },
      "sortItems": {
        "defaultValue": { "value": "defaultSortItems", "computed": true },
        "required": false
      },
      "type": {
        "defaultValue": { "value": "'default'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'default'", "computed": false },
            { "value": "'inline'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify 'inline' to create an inline multi-select."
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "title": {
        "defaultValue": { "value": "false", "computed": false },
        "required": false
      },
      "open": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Initialize the component with an open(`true`)/closed(`false`) menu."
      },
      "selectionFeedback": {
        "defaultValue": { "value": "'top-after-reopen'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'top'", "computed": false },
            { "value": "'fixed'", "computed": false },
            { "value": "'top-after-reopen'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify feedback (mode) of the selection.\n`top`: selected item jumps to top\n`fixed`: selected item stays at it's position\n`top-after-reopen`: selected item jump to top after reopen dropdown"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id`"
      },
      "items": {
        "type": { "name": "array" },
        "required": true,
        "description": "We try to stay as generic as possible here to allow individuals to pass\nin a collection of whatever kind of data structure they prefer"
      },
      "label": {
        "type": { "name": "node" },
        "required": true,
        "description": "Generic `label` that will be used as the textual representation of what\nthis field is for"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "`onChange` is a utility for this controlled component to communicate to a\nconsuming component what kind of internal state changes are occuring."
      },
      "useTitleInItem": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify title to show title on hover"
      },
      "invalid": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Is the current selection invalid?"
      },
      "invalidText": {
        "type": { "name": "string" },
        "required": false,
        "description": "If invalid, what is the error?"
      },
      "translateWithId": {
        "type": { "name": "func" },
        "required": false,
        "description": "Callback function for translating ListBoxMenuIcon SVG title"
      },
      "downshiftProps": {
        "type": {
          "name": "shape",
          "value": "Downshift.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Additional props passed to Downshift"
      }
    },
    "composes": ["./MultiSelectPropTypes"]
  },
  "ToastNotification": {
    "description": "",
    "displayName": "ToastNotification",
    "props": {
      "kind": {
        "defaultValue": { "value": "'error'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'error'", "computed": false },
            { "value": "'info'", "computed": false },
            { "value": "'success'", "computed": false },
            { "value": "'warning'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify what state the notification represents"
      },
      "title": {
        "defaultValue": { "value": "'provide a title'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the title"
      },
      "caption": {
        "defaultValue": { "value": "'provide a caption'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the caption"
      },
      "role": {
        "defaultValue": { "value": "'alert'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "By default, this value is \"alert\". You can also provide an alternate\nrole if it makes sense from the accessibility-side"
      },
      "notificationType": {
        "defaultValue": { "value": "'toast'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "By default, this value is \"toast\". You can also provide an alternate type\nif it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`"
      },
      "iconDescription": {
        "defaultValue": { "value": "'closes notification'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for \"close\" icon that can be read by screen readers"
      },
      "onCloseButtonClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a function that is called when menu is closed"
      },
      "hideCloseButton": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify the close button should be disabled, or not"
      },
      "timeout": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify an optional duration the notification should be closed in"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered within the ToastNotification"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the notification box"
      },
      "lowContrast": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you are using the low contrast variant of the ToastNotification."
      },
      "subtitle": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the sub-title"
      }
    }
  },
  "InlineNotification": {
    "description": "",
    "displayName": "InlineNotification",
    "props": {
      "role": {
        "defaultValue": { "value": "'alert'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "By default, this value is \"alert\". You can also provide an alternate\nrole if it makes sense from the accessibility-side"
      },
      "notificationType": {
        "defaultValue": { "value": "'inline'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "By default, this value is \"inline\". You can also provide an alternate type\nif it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`"
      },
      "iconDescription": {
        "defaultValue": { "value": "'closes notification'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for \"close\" icon that can be read by screen readers"
      },
      "onCloseButtonClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a function that is called when menu is closed"
      },
      "hideCloseButton": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify the close button should be disabled, or not"
      },
      "actions": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the action nodes that will be rendered within the InlineNotification"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered within the InlineNotification"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the notification box"
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'error'", "computed": false },
            { "value": "'info'", "computed": false },
            { "value": "'success'", "computed": false },
            { "value": "'warning'", "computed": false }
          ]
        },
        "required": true,
        "description": "Specify what state the notification represents"
      },
      "lowContrast": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you are using the low contrast variant of the InlineNotification."
      },
      "title": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the title"
      },
      "subtitle": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the sub-title"
      }
    }
  },
  "NotificationActionButton": {
    "description": "",
    "displayName": "NotificationActionButton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the notification action button"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the content of the notification action button."
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally specify a click handler for the notification action button."
      }
    }
  },
  "NotificationButton": {
    "description": "",
    "displayName": "NotificationButton",
    "props": {
      "ariaLabel": {
        "defaultValue": { "value": "'close notification'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a label to be read by screen readers on the notification button"
      },
      "notificationType": {
        "defaultValue": { "value": "'toast'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'toast'", "computed": false },
            { "value": "'inline'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the notification type"
      },
      "type": {
        "defaultValue": { "value": "'button'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Optional prop to specify the type of the Button"
      },
      "iconDescription": {
        "defaultValue": { "value": "'close icon'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for \"close\" icon that can be read by screen readers"
      },
      "renderIcon": {
        "defaultValue": { "value": "Close20", "computed": true },
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": "Optional prop to allow overriding the icon rendering.\nCan be a React component class"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the notification button"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional icon for the Button through a string,\nif something but regular \"close\" icon is desirable"
      }
    }
  },
  "NotificationTextDetails": {
    "description": "",
    "displayName": "NotificationTextDetails",
    "props": {
      "title": {
        "defaultValue": { "value": "'title'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the title"
      },
      "caption": {
        "defaultValue": { "value": "'caption'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the caption"
      },
      "notificationType": {
        "defaultValue": { "value": "'toast'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'toast'", "computed": false },
            { "value": "'inline'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the notification type"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered in NotificationTextDetails"
      },
      "subtitle": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the sub-title"
      }
    }
  },
  "OrderedList": {
    "description": "",
    "displayName": "OrderedList",
    "props": {
      "nested": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether this ordered list is nested inside of another nested list"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide list items to be rendered in the ordered list"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the containing <ol> node"
      }
    }
  },
  "OverflowMenuItem": {
    "description": "",
    "displayName": "OverflowMenuItem",
    "props": {
      "hasDivider": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to make this menu item a divider."
      },
      "isDelete": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to make this menu item a \"danger button\"."
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to make this menu item disabled."
      },
      "itemText": {
        "defaultValue": { "value": "'Provide itemText'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "The text in the menu item."
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name to be placed on the button element"
      },
      "wrapperClassName": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name to be placed on the wrapper list item element"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "If given, overflow item will render as a link with the given href"
      },
      "onBlur": {
        "type": { "name": "func" },
        "required": false,
        "description": "event handlers"
      },
      "onFocus": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onKeyUp": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onMouseDown": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onMouseEnter": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onMouseLeave": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onMouseUp": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "closeMenu": {
        "type": { "name": "func" },
        "required": false,
        "description": "A callback to tell the parent menu component that the menu should be closed."
      },
      "primaryFocus": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if this menu item should get focus when the menu gets open."
      },
      "requireTitle": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if this menu item has long text and requires a browser tooltip"
      }
    }
  },
  "Pagination": {
    "description": "",
    "displayName": "Pagination",
    "props": {
      "backwardText": {
        "defaultValue": { "value": "'Previous page'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description for the backward icon."
      },
      "itemRangeText": {
        "defaultValue": {
          "value": "(min, max, total) => `${min}–${max} of ${total} items`",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "The function returning a translatable text showing where the current page is,\nin a manner of the range of items."
      },
      "forwardText": {
        "defaultValue": { "value": "'Next page'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description for the forward icon."
      },
      "itemsPerPageText": {
        "defaultValue": { "value": "'Items per page:'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The translatable text indicating the number of items per page."
      },
      "pageNumberText": {
        "defaultValue": { "value": "'Page Number'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": ""
      },
      "pageRangeText": {
        "defaultValue": {
          "value": "(current, total) => `of ${total} pages`",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "A function returning PII showing where the current page is."
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the backward/forward buttons should be disabled."
      },
      "page": {
        "defaultValue": { "value": "1", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "The current page."
      },
      "pagesUnknown": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the total number of items is unknown."
      },
      "isLastPage": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the current page should be the last page."
      },
      "pageInputDisabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the select box to change the page should be disabled."
      },
      "itemText": {
        "defaultValue": {
          "value": "(min, max) => `${min}–${max} items`",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "A variant of `itemRangeText`, used if the total number of items is unknown."
      },
      "pageText": {
        "defaultValue": {
          "value": "page => `page ${page}`",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "The translatable text showing the current page."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "id": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "The unique ID of this component instance."
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "The callback function called when the current page changes."
      },
      "pageSizes": {
        "type": { "name": "arrayOf", "value": { "name": "number" } },
        "required": true,
        "description": "The choices for `pageSize`."
      },
      "totalItems": {
        "type": { "name": "number" },
        "required": false,
        "description": "The total number of items."
      },
      "pageSize": {
        "type": { "name": "number" },
        "required": false,
        "description": "The number dictating how many items a page contains."
      }
    }
  },
  "PrimaryButton": { "description": "", "displayName": "PrimaryButton" },
  "ProgressIndicator": {
    "description": "",
    "displayName": "ProgressIndicator",
    "props": {
      "currentIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Optionally specify the current step array index"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide <ProgressStep> components to be rendered in the\n<ProgressIndicator>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the containing node"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optional callback called if a ProgressStep is clicked on.  Returns the index of the step."
      }
    }
  },
  "ProgressStep": {
    "description": "",
    "displayName": "ProgressStep",
    "props": {
      "renderLabel": {
        "defaultValue": {
          "value": "props => <p {...props} />",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "index": {
        "type": { "name": "number" },
        "required": false,
        "description": "Index of the current step within the ProgressIndicator"
      },
      "label": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the label for the <ProgressStep>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the containing <li> node"
      },
      "current": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the step is the current step"
      },
      "complete": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the step has been completed"
      },
      "description": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for the <ProgressStep>"
      },
      "invalid": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the step is invalid"
      },
      "secondaryLabel": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional secondary label"
      },
      "overflowTooltipProps": {
        "type": { "name": "object" },
        "required": false,
        "description": "Provide the props that describe a progress step tooltip"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the step is disabled"
      },
      "tooltipId": {
        "type": { "name": "string" },
        "required": false,
        "description": "The ID of the tooltip content."
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "A callback called if the step is clicked or the enter key is pressed"
      }
    }
  },
  "RadioButtonGroup": {
    "description": "",
    "displayName": "RadioButtonGroup",
    "props": {
      "orientation": {
        "defaultValue": { "value": "'horizontal'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'horizontal'", "computed": false },
            { "value": "'vertical'", "computed": false }
          ]
        },
        "required": false,
        "description": "Provide where radio buttons should be placed"
      },
      "labelPosition": {
        "defaultValue": { "value": "'right'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'left'", "computed": false },
            { "value": "'right'", "computed": false }
          ]
        },
        "required": false,
        "description": "Provide where label text should be placed"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onChange` hook that is called whenever the value of\nthe group changes"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide a collection of <RadioButton> components to render in the group"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the container node"
      },
      "defaultSelected": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the <RadioButton> to be selected by default"
      },
      "name": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the name of the underlying <input> nodes"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the group is disabled"
      },
      "valueSelected": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the value that is currently selected in the group"
      }
    }
  },
  "Search": {
    "description": "",
    "displayName": "Search",
    "props": {
      "type": {
        "defaultValue": { "value": "'text'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Optional prop to specify the type of the `<input>`"
      },
      "placeHolderText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional placeholder text for the Search.\nNote: if the label and placeholder differ,\nVoiceOver on Mac will read both"
      },
      "closeButtonLabelText": {
        "defaultValue": { "value": "'Clear search input'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a label to be read by screen readers on the \"close\" button"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "small": {
        "type": {
          "name": "custom",
          "raw": "deprecate(\n  PropTypes.bool,\n  `\\nThe prop \\`small\\` for Search has been deprecated in favor of \\`size\\`. Please use \\`size=\"sm\"\\` instead.`\n)"
        },
        "required": false,
        "description": "Specify whether the load was successful"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'sm'", "computed": false },
            { "value": "'lg'", "computed": false },
            { "value": "'xl'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the search size"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide an optional label text for the Search icon"
      },
      "light": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify light version or default version of this control"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a custom `id` for the input"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the value of the <input>"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Optionally provide the default value of the <input>"
      }
    }
  },
  "SearchFilterButton": {
    "description": "The filter button for `<Search>`.",
    "displayName": "SearchFilterButton",
    "props": {
      "labelText": {
        "defaultValue": { "value": "'Search'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The a11y label text."
      },
      "iconDescription": {
        "defaultValue": { "value": "'filter'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The icon description."
      }
    }
  },
  "SearchLayoutButton": {
    "description": "The layout button for `<Search>`.",
    "displayName": "SearchLayoutButton",
    "props": {
      "labelText": {
        "defaultValue": { "value": "'Filter'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The a11y label text."
      },
      "iconDescriptionList": {
        "defaultValue": { "value": "'list'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description for the \"list\" icon."
      },
      "iconDescriptionGrid": {
        "defaultValue": { "value": "'grid'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description for the \"grid\" icon."
      },
      "format": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "'list'", "computed": false },
            { "value": "'grid'", "computed": false }
          ]
        },
        "required": false,
        "description": "The layout."
      },
      "onChangeFormat": {
        "type": { "name": "func" },
        "required": false,
        "description": "The callback called when layout switches."
      }
    }
  },
  "SecondaryButton": { "description": "", "displayName": "SecondaryButton" },
  "Select": {
    "description": "",
    "displayName": "Select",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "labelText": {
        "defaultValue": { "value": "'Select'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide label text to be read by screen readers when interacting with the\ncontrol"
      },
      "inline": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      },
      "iconDescription": {
        "defaultValue": {
          "value": "'open list of options'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for the twistie icon that can be read by screen readers"
      },
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the currently value is invalid."
      },
      "invalidText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Message which is displayed if the value is invalid."
      },
      "helperText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the light version of this control"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your Select"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the node containing the label and the select box"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id` for the `<select>`"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onChange` hook that is called each time the value of\nthe underlying <input> changes"
      },
      "defaultValue": {
        "type": { "name": "any" },
        "required": false,
        "description": "Optionally provide the default value of the `<select>`"
      },
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "noLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Reserved for use with <Pagination> component. Will not render a label for the\nselect since Pagination renders one for us."
      }
    }
  },
  "SelectItem": {
    "description": "",
    "displayName": "SelectItem",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <SelectItem> should be disabled"
      },
      "hidden": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <SelectItem> is hidden"
      },
      "value": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "any" },
        "required": false,
        "description": "Specify the value of the <SelectItem>"
      },
      "text": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the contents of your <SelectItem>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the node"
      }
    }
  },
  "SelectItemGroup": {
    "description": "",
    "displayName": "SelectItemGroup",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <SelectItemGroup> should be disabled"
      },
      "label": {
        "defaultValue": { "value": "'Provide label'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the label to be displayed"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your <SelectItemGroup>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the node"
      }
    }
  },
  "Switch": {
    "description": "",
    "displayName": "Switch",
    "props": {
      "selected": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Whether your Switch is selected. Reserved for usage in ContentSwitcher"
      },
      "text": {
        "defaultValue": { "value": "'Provide text'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the contents of your Switch"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "A handler that is invoked when a user clicks on the control.\nReserved for usage in ContentSwitcher"
      },
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "A handler that is invoked on the key down event for the control.\nReserved for usage in ContentSwitcher"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be added to your Switch"
      },
      "index": {
        "type": { "name": "number" },
        "required": false,
        "description": "The index of your Switch in your ContentSwitcher that is used for event handlers.\nReserved for usage in ContentSwitcher"
      },
      "name": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Provide the name of your Switch that is used for event handlers"
      }
    }
  },
  "Slider": {
    "description": "",
    "displayName": "Slider",
    "props": {
      "hideTextInput": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to hide the number input box."
      },
      "step": {
        "defaultValue": { "value": "1", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "A value determining how much the value should increase/decrease by moving the thumb by mouse."
      },
      "stepMuliplier": {
        "defaultValue": { "value": "4", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "A value determining how much the value should increase/decrease by Shift+arrow keys,\nwhich will be `(max - min) / stepMuliplier`."
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to disable this slider."
      },
      "minLabel": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The label associated with the minimum value."
      },
      "maxLabel": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The label associated with the maximum value."
      },
      "inputType": {
        "defaultValue": { "value": "'number'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `type` attribute of the `<input>`."
      },
      "ariaLabelInput": {
        "defaultValue": { "value": "'Slider number input'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `ariaLabel` for the `<input>`."
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name for the slider."
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "The ID of the `<input>`."
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "The callback to get notified of change in value."
      },
      "onRelease": {
        "type": { "name": "func" },
        "required": false,
        "description": "The callback to get notified of value on handle release."
      },
      "value": {
        "type": { "name": "number" },
        "required": true,
        "description": "The value."
      },
      "min": {
        "type": { "name": "number" },
        "required": true,
        "description": "The minimum value."
      },
      "max": {
        "type": { "name": "number" },
        "required": true,
        "description": "The maximum value."
      },
      "formatLabel": {
        "type": { "name": "func" },
        "required": false,
        "description": "The callback to format the label associated with the minimum/maximum value."
      },
      "labelText": {
        "type": { "name": "node" },
        "required": false,
        "description": "The label for the slider."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `name` attribute of the `<input>`."
      }
    }
  },
  "StructuredListWrapper": {
    "description": "",
    "displayName": "StructuredListWrapper",
    "props": {
      "border": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether a border should be added to your StructuredListWrapper"
      },
      "selection": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether your StructuredListWrapper should have selections"
      },
      "ariaLabel": {
        "defaultValue": {
          "value": "'Structured list section'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a label to be read by screen readers on the container node"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your StructuredListWrapper"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "StructuredListHead": {
    "description": "",
    "displayName": "StructuredListHead",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your StructuredListHead"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the node"
      }
    }
  },
  "StructuredListBody": {
    "description": "",
    "displayName": "StructuredListBody",
    "props": {
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a handler that is invoked on the key down event for the control"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your StructuredListBody"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "head": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      }
    }
  },
  "StructuredListRow": {
    "description": "",
    "displayName": "StructuredListRow",
    "props": {
      "head": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether your StructuredListRow should be used as a header row"
      },
      "label": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether a `<label>` should be used"
      },
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the tab index of the container node, if `<label>` is in use"
      },
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a handler that is invoked on the key down event for the control,\nif `<label>` is in use"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your StructuredListRow"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "StructuredListInput": {
    "description": "",
    "displayName": "StructuredListInput",
    "props": {
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional hook that is called each time the input is updated"
      },
      "value": {
        "defaultValue": { "value": "'value'", "computed": false },
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the value of the input"
      },
      "title": {
        "defaultValue": { "value": "'title'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a `title` for the input"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the input"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify a custom `id` for the input"
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a `name` for the input"
      },
      "defaultChecked": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the underlying input should be checked by default"
      }
    }
  },
  "StructuredListCell": {
    "description": "",
    "displayName": "StructuredListCell",
    "props": {
      "head": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether your StructuredListCell should be used as a header cell"
      },
      "noWrap": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether your StructuredListCell should have text wrapping"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your StructuredListCell"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "Tab": {
    "description": "",
    "displayName": "Tab",
    "props": {
      "role": {
        "defaultValue": { "value": "'presentation'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an accessibility role for your Tab"
      },
      "label": {
        "defaultValue": { "value": "'provide a label'", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your Tab"
      },
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the tab index of the <a> node"
      },
      "href": {
        "defaultValue": { "value": "'#'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a string that represents the `href` of the Tab"
      },
      "selected": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Whether your Tab is selected.\nReserved for usage in Tabs"
      },
      "renderContent": {
        "defaultValue": { "value": "TabContent", "computed": true },
        "type": { "name": "func" },
        "required": false,
        "description": ""
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a handler that is invoked when a user clicks on the control"
      },
      "onKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a handler that is invoked on the key down event for the control"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be added to your Tab"
      },
      "handleTabClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "A handler that is invoked when a user clicks on the control.\nReserved for usage in Tabs"
      },
      "handleTabAnchorFocus": {
        "type": { "name": "func" },
        "required": false,
        "description": "A handler that is invoked when a user presses left/right key.\nReserved for usage in Tabs"
      },
      "handleTabKeyDown": {
        "type": { "name": "func" },
        "required": false,
        "description": "A handler that is invoked on the key down event for the control.\nReserved for usage in Tabs"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Whether your Tab is disabled."
      },
      "index": {
        "type": { "name": "number" },
        "required": false,
        "description": "The index of your Tab in your Tabs. Reserved for usage in Tabs"
      },
      "renderAnchor": {
        "type": { "name": "func" },
        "required": false,
        "description": ""
      }
    }
  },
  "TabContent": {
    "description": "",
    "displayName": "TabContent",
    "props": {
      "selected": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the TabContent is selected"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in content to render inside of the TabContent"
      }
    }
  },
  "Tabs": {
    "description": "",
    "displayName": "Tabs",
    "props": {
      "iconDescription": {
        "defaultValue": { "value": "'show menu options'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description that is read out when a user visits the caret icon\nfor the dropdown menu of items"
      },
      "role": {
        "defaultValue": { "value": "'navigation'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify whether the Tab content is hidden\n    hidden: PropTypes.bool,\n\n    /**\nBy default, this value is \"navigation\". You can also provide an alternate\nrole if it makes sense from the accessibility-side"
      },
      "type": {
        "defaultValue": { "value": "'default'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'default'", "computed": false },
            { "value": "'container'", "computed": false }
          ]
        },
        "required": false,
        "description": "Provide the type of Tab"
      },
      "triggerHref": {
        "defaultValue": { "value": "'#'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a string that represents the `href` for the triggered <Tab>"
      },
      "selected": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Optionally provide an index for the currently selected <Tab>"
      },
      "ariaLabel": {
        "defaultValue": { "value": "'listbox'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the text to be read by screen-readers when visiting the <Tabs>\ncomponent"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in a collection of <Tab> children to be rendered depending on the\ncurrently selected tab"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a className that is applied to the root <nav> component for the\n<Tabs>"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is invoked when a <Tab> is\nclicked"
      },
      "onKeyDown": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onKeyDown` handler that is invoked when keyed\nnavigation is triggered"
      },
      "onSelectionChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional handler that is called whenever the selection\nchanges. This method is called with the index of the tab that was\nselected"
      },
      "tabContentClassName": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a className that is applied to the <TabContent> components"
      }
    }
  },
  "Tag": {
    "description": "",
    "displayName": "Tag",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide content to be rendered inside of a <Tag>"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className that is applied to the containing <span>"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            { "value": "\"red\"", "computed": false },
            { "value": "\"magenta\"", "computed": false },
            { "value": "\"purple\"", "computed": false },
            { "value": "\"blue\"", "computed": false },
            { "value": "\"cyan\"", "computed": false },
            { "value": "\"teal\"", "computed": false },
            { "value": "\"green\"", "computed": false },
            { "value": "\"gray\"", "computed": false },
            { "value": "\"cool-gray\"", "computed": false },
            { "value": "\"warm-gray\"", "computed": false }
          ]
        },
        "required": true,
        "description": "Specify the type of the <Tag>"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the <Tag> is disabled"
      },
      "filter": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Determine if <Tag> is a filter/chip"
      },
      "title": {
        "type": { "name": "string" },
        "required": false,
        "description": "Text to show on clear filters"
      }
    }
  },
  "TextArea": {
    "description": "",
    "displayName": "TextArea",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onChange` handler that is called whenever <textarea>\nis updated"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is called whenever the\n<textarea> is clicked"
      },
      "placeholder": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the placeholder attribute for the <textarea>"
      },
      "rows": {
        "defaultValue": { "value": "4", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the rows attribute for the <textarea>"
      },
      "cols": {
        "defaultValue": { "value": "50", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the `cols` attribute for the underlying <textarea> node"
      },
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is currently invalid"
      },
      "invalidText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the text that is displayed when the control is in an invalid state"
      },
      "helperText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the light version of this control"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a custom className that is applied directly to the underlying\n<textarea> node"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Optionally provide the default value of the <textarea>"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a unique identifier for the control"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Provide the current value of the <textarea>"
      },
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden"
      }
    }
  },
  "TextInput": {
    "description": "",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <input> should be disabled"
      },
      "type": {
        "defaultValue": { "value": "'text'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the type of the <input>"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onChange` handler that is called whenever <input>\nis updated"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is called whenever the\n<input> is clicked"
      },
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is currently invalid"
      },
      "invalidText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the text that is displayed when the control is in an invalid state"
      },
      "helperText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the <input> node"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Optionally provide the default value of the <input>"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id` for the <input>"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      },
      "placeholder": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the placeholder attribute for the <input>"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the value of the <input>"
      },
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden"
      }
    }
  },
  "Tile": {
    "description": "",
    "displayName": "Tile",
    "props": {
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version. For use on $ui-01 backgrounds only.\nDon't use this to make tile background color same as container background color."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      }
    }
  },
  "ClickableTile": {
    "description": "",
    "displayName": "ClickableTile",
    "props": {
      "clicked": {
        "defaultValue": { "value": "false", "computed": false },
        "required": false
      },
      "handleClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "handleKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version. For use on $ui-01 backgrounds only.\nDon't use this to make tile background color same as container background color."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "The href for the link."
      },
      "rel": {
        "type": { "name": "string" },
        "required": false,
        "description": "The rel property for the link."
      }
    }
  },
  "SelectableTile": {
    "description": "",
    "displayName": "SelectableTile",
    "props": {
      "value": {
        "defaultValue": { "value": "'value'", "computed": false },
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "The value of the `<input>`."
      },
      "title": {
        "defaultValue": { "value": "'title'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `title` of the `<input>`."
      },
      "iconDescription": {
        "defaultValue": { "value": "'Tile checkmark'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the checkmark icon."
      },
      "selected": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to select this tile."
      },
      "handleClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "handleKeyDown": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "The empty handler of the `<input>`."
      },
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the tab index of the wrapper element"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version. For use on $ui-01 backgrounds only.\nDon't use this to make tile background color same as container background color."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "The ID of the `<input>`."
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `name` of the `<input>`."
      }
    }
  },
  "ExpandableTile": {
    "description": "",
    "displayName": "ExpandableTile",
    "props": {
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "The `tabindex` attribute."
      },
      "expanded": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the tile is expanded."
      },
      "tileMaxHeight": {
        "defaultValue": { "value": "0", "computed": false },
        "required": false
      },
      "tilePadding": {
        "defaultValue": { "value": "0", "computed": false },
        "required": false
      },
      "onBeforeClick": {
        "defaultValue": { "value": "() => true", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "optional handler to decide whether to ignore a click. returns false if click should be ignored"
      },
      "handleClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "required": false
      },
      "tileCollapsedIconText": {
        "defaultValue": {
          "value": "'Interact to expand Tile'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the \"collapsed\" icon that can be read by screen readers."
      },
      "tileExpandedIconText": {
        "defaultValue": {
          "value": "'Interact to collapse Tile'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the \"expanded\" icon that can be read by screen readers."
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version. For use on $ui-01 backgrounds only.\nDon't use this to make tile background color same as container background color."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "An ID that can be provided to aria-labelledby"
      }
    }
  },
  "TileAboveTheFoldContent": {
    "description": "",
    "displayName": "TileAboveTheFoldContent",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      }
    }
  },
  "TileBelowTheFoldContent": {
    "description": "",
    "displayName": "TileBelowTheFoldContent",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      }
    }
  },
  "RadioTile": {
    "description": "",
    "displayName": "RadioTile",
    "props": {
      "iconDescription": {
        "defaultValue": { "value": "'Tile checkmark'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The description of the tile checkmark icon."
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "The handler of the massaged `change` event on the `<input>`."
      },
      "tabIndex": {
        "defaultValue": { "value": "0", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the tab index of the wrapper element"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "checked": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if this tile should be selected."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "defaultChecked": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` if the `<input>` should be checked at initialization."
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "The ID of the `<input>`."
      },
      "name": {
        "type": { "name": "string" },
        "required": false,
        "description": "The `name` of the `<input>`."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": true,
        "description": "The `value` of the `<input>`."
      }
    }
  },
  "TileGroup": {
    "description": "",
    "displayName": "TileGroup",
    "props": {
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide an optional `onChange` hook that is called whenever the value of\nthe group changes"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide a collection of <RadioTile> components to render in the group"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional className to be applied to the container node"
      },
      "defaultSelected": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the the value of <RadioTile> to be selected by default"
      },
      "name": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the name of the underlying <input> nodes"
      },
      "disabled": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the group is disabled"
      },
      "legend": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional legend for this group"
      },
      "valueSelected": {
        "type": {
          "name": "union",
          "value": [{ "name": "string" }, { "name": "number" }]
        },
        "required": false,
        "description": "Specify the value that is currently selected in the group"
      }
    }
  },
  "TimePicker": {
    "description": "",
    "displayName": "TimePicker",
    "props": {
      "type": {
        "defaultValue": { "value": "'text'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the type of the <input>"
      },
      "pattern": {
        "defaultValue": {
          "value": "'(1[012]|[1-9]):[0-5][0-9](\\\\s)?'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the regular expression working as the pattern of the time string in <input>"
      },
      "placeholder": {
        "defaultValue": { "value": "'hh:mm'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the placeholder attribute for the <input>"
      },
      "maxLength": {
        "defaultValue": { "value": "5", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the maximum length of the time string in <input>"
      },
      "invalidText": {
        "defaultValue": {
          "value": "'Invalid time format.'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the text that is displayed when the control is in an invalid state"
      },
      "invalid": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is currently invalid"
      },
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the <input> should be disabled"
      },
      "onChange": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onChange` handler that is called whenever <input>\nis updated"
      },
      "onClick": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is called whenever the\n<input> is clicked"
      },
      "onBlur": {
        "defaultValue": { "value": "() => {}", "computed": false },
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an `onBlur` handler that is called whenever the\n<input> loses focus"
      },
      "light": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the light version."
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Pass in the children that will be rendered next to the form control"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id` for the <input>"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      },
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden"
      },
      "value": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the value of the <input>"
      }
    }
  },
  "TimePickerSelect": {
    "description": "",
    "displayName": "TimePickerSelect",
    "props": {
      "disabled": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "inline": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      },
      "iconDescription": {
        "defaultValue": {
          "value": "'open list of options'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide a description for the twistie icon that can be read by screen readers"
      },
      "hideLabel": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide the contents of your TimePickerSelect"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the node containing the label and the select box"
      },
      "id": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify a custom `id` for the `<select>`"
      },
      "defaultValue": {
        "type": { "name": "any" },
        "required": false,
        "description": "Optionally provide the default value of the `<select>`"
      },
      "labelText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide label text to be read by screen readers when interacting with the\ncontrol"
      }
    }
  },
  "Toolbar": {
    "description": "",
    "displayName": "Toolbar",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify a collection of ToolbarItem's that should render in the Toolbar"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the containing Toolbar node"
      }
    }
  },
  "ToolbarItem": {
    "description": "",
    "displayName": "ToolbarItem",
    "props": {
      "placeHolderText": {
        "defaultValue": {
          "value": "'Provide placeHolderText'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the placeholder text for the ToolbarSearch component. Useful if\n`type` is set to 'search'"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the contents of the ToolbarItem"
      },
      "type": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the type of the ToolbarItem. The `search` type will render a\n`ToolbarSearch` component"
      }
    }
  },
  "ToolbarTitle": {
    "description": "",
    "props": {
      "title": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify the title of the Toolbar"
      }
    }
  },
  "ToolbarOption": {
    "description": "",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the contents of the ToolbarOption"
      }
    }
  },
  "ToolbarDivider": { "description": "" },
  "ToolbarSearch": {
    "description": "",
    "displayName": "ToolbarSearch",
    "props": {
      "type": {
        "defaultValue": { "value": "'search'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The `type` of the `<input>`."
      },
      "id": {
        "defaultValue": { "value": "'search__input'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The ID of the `<input>`."
      },
      "labelText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "node" },
        "required": false,
        "description": "The text in the `<label>`."
      },
      "placeHolderText": {
        "defaultValue": { "value": "''", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "The placeholder text of the `<input>`."
      },
      "role": {
        "defaultValue": { "value": "'search'", "computed": false },
        "required": false
      },
      "labelId": {
        "defaultValue": { "value": "'search__label'", "computed": false },
        "required": false
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "The child nodes."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class names."
      },
      "small": {
        "type": { "name": "bool" },
        "required": false,
        "description": "`true` to use the small version of the UI."
      }
    }
  },
  "TooltipDefinition": {
    "description": "",
    "displayName": "TooltipDefinition",
    "props": {
      "direction": {
        "defaultValue": { "value": "'bottom'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'top'", "computed": false },
            { "value": "'bottom'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip. Can be either top or bottom."
      },
      "align": {
        "defaultValue": { "value": "'start'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'start'", "computed": false },
            { "value": "'center'", "computed": false },
            { "value": "'end'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the alignment (to the trigger button) of the tooltip.\nCan be one of: start, center, or end."
      },
      "children": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the tooltip trigger text that is rendered to the UI for the user to\ninteract with in order to display the tooltip."
      },
      "triggerClassName": {
        "type": { "name": "string" },
        "required": false,
        "description": "The CSS class name of the trigger element"
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify a custom id for the tooltip. If one is not provided, we\ngenerate a unique id for you."
      },
      "tooltipText": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the text that will be displayed in the tooltip when it is rendered.\nTODO: rename this prop (will be a breaking change)"
      }
    }
  },
  "TooltipIcon": {
    "description": "",
    "displayName": "TooltipIcon",
    "props": {
      "direction": {
        "defaultValue": { "value": "'bottom'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'top'", "computed": false },
            { "value": "'bottom'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip. Can be either top or bottom."
      },
      "align": {
        "defaultValue": { "value": "'center'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'start'", "computed": false },
            { "value": "'center'", "computed": false },
            { "value": "'end'", "computed": false }
          ]
        },
        "required": false,
        "description": "Specify the alignment (to the trigger button) of the tooltip.\nCan be one of: start, center, or end."
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Specify an icon as children that will be used as the tooltip trigger. This\ncan be an icon from our Icon component, or a custom SVG element."
      },
      "id": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify a custom id for the tooltip. If one is not provided, we\ngenerate a unique id for you."
      },
      "tooltipText": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide the ARIA label for the tooltip.\nTODO: rename this prop (will be a breaking change)"
      }
    }
  },
  "UnorderedList": {
    "description": "",
    "displayName": "UnorderedList",
    "props": {
      "nested": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the list is nested, or not"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify a collection of ListItem's to be rendered in the UnorderedList"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the underlying <ul> node"
      }
    }
  },
  "SkeletonText": {
    "description": "",
    "displayName": "SkeletonText",
    "props": {
      "paragraph": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "will generate multiple lines of text"
      },
      "width": {
        "defaultValue": { "value": "'100%'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "width (in px or %) of single line of text or max-width of paragraph lines"
      },
      "heading": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "generates skeleton text at a larger size"
      },
      "lineCount": {
        "defaultValue": { "value": "3", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "the number of lines in a paragraph"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "SkeletonPlaceholder": {
    "description": "",
    "displayName": "SkeletonPlaceholder",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "the class to be applied to the component"
      }
    }
  },
  "DataTableSkeleton": {
    "description": "",
    "displayName": "DataTableSkeleton",
    "props": {
      "rowCount": {
        "defaultValue": { "value": "5", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the number of rows that you want to render in the skeleton state"
      },
      "columnCount": {
        "defaultValue": { "value": "5", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Specify the number of columns that you want to render in the skeleton state"
      },
      "zebra": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally specify whether you want the DataTable to be zebra striped"
      },
      "compact": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally specify whether you want the Skeleton to be rendered as a\ncompact DataTable"
      },
      "headers": {
        "defaultValue": { "value": "[]", "computed": false },
        "type": {
          "name": "union",
          "value": [
            { "name": "array" },
            {
              "name": "shape",
              "value": {
                "key": { "name": "string", "required": false },
                "header": { "name": "node", "required": false }
              }
            }
          ]
        },
        "required": false,
        "description": "Optionally specify the displayed headers"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "AccordionSkeleton": {
    "description": "",
    "displayName": "AccordionSkeleton",
    "props": {
      "open": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "`false` to not display the first item opened"
      },
      "count": {
        "defaultValue": { "value": "4", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "Set number of items to render"
      },
      "uid": {
        "type": { "name": "custom", "raw": "deprecate(PropTypes.any)" },
        "required": false,
        "description": "Set unique identifier to generate unique item keys"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "BreadcrumbSkeleton": {
    "description": "",
    "displayName": "BreadcrumbSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "ButtonSkeleton": {
    "description": "",
    "displayName": "ButtonSkeleton",
    "props": {
      "small": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the Button should be a small variant"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify an href for your Button to become an <a> element"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "CheckboxSkeleton": {
    "description": "",
    "displayName": "CheckboxSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "CodeSnippetSkeleton": {
    "description": "",
    "displayName": "CodeSnippetSkeleton",
    "props": {
      "type": {
        "defaultValue": { "value": "'single'", "computed": false },
        "type": {
          "name": "enum",
          "value": [
            { "value": "'single'", "computed": false },
            { "value": "'multi'", "computed": false }
          ]
        },
        "required": false,
        "description": "The type of code snippet\ncan be single or multi"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "DropdownSkeleton": {
    "description": "",
    "displayName": "DropdownSkeleton",
    "props": {
      "inline": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "FileUploaderSkeleton": {
    "description": "",
    "displayName": "FileUploaderSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "NumberInputSkeleton": {
    "description": "",
    "displayName": "NumberInputSkeleton",
    "props": {
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add to the form item wrapper."
      }
    }
  },
  "ProgressIndicatorSkeleton": {
    "description": "",
    "displayName": "ProgressIndicatorSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "RadioButtonSkeleton": {
    "description": "",
    "displayName": "RadioButtonSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "SearchSkeleton": {
    "description": "",
    "displayName": "SearchSkeleton",
    "props": {
      "small": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the Search should be a small variant"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "SelectSkeleton": {
    "description": "",
    "displayName": "SelectSkeleton",
    "props": {
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add to the form item wrapper."
      }
    }
  },
  "SliderSkeleton": {
    "description": "",
    "displayName": "SliderSkeleton",
    "props": {
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add to the form item wrapper."
      }
    }
  },
  "StructuredListSkeleton": {
    "description": "",
    "displayName": "StructuredListSkeleton",
    "props": {
      "rowCount": {
        "defaultValue": { "value": "5", "computed": false },
        "type": { "name": "number" },
        "required": false,
        "description": "number of table rows"
      },
      "border": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether a border should be added to your StructuredListSkeleton"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "TabsSkeleton": {
    "description": "",
    "displayName": "TabsSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "TagSkeleton": {
    "description": "",
    "displayName": "TagSkeleton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "TextAreaSkeleton": {
    "description": "",
    "displayName": "TextAreaSkeleton",
    "props": {
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add to the form item wrapper."
      }
    }
  },
  "TextInputSkeleton": {
    "description": "",
    "displayName": "TextInputSkeleton",
    "props": {
      "hideLabel": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add to the form item wrapper."
      }
    }
  },
  "IconSkeleton": {
    "description": "",
    "displayName": "IconSkeleton",
    "props": {
      "style": {
        "type": { "name": "object" },
        "required": false,
        "description": "The CSS styles."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "DatePickerSkeleton": {
    "description": "",
    "displayName": "DatePickerSkeleton",
    "props": {
      "range": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the skeleton should be of range date picker."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Specify an optional className to add."
      }
    }
  },
  "Content": {
    "description": "",
    "displayName": "Content",
    "props": {
      "tagName": {
        "defaultValue": { "value": "'main'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify the tag of the content node. Defaults to `main`"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the container"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide children nodes to be rendered in the content container"
      }
    }
  },
  "Header": {
    "description": "",
    "displayName": "Header",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying <header>"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "HeaderContainer": {
    "description": "",
    "displayName": "HeaderContainer",
    "props": {
      "isSideNavExpanded": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying <header>"
      }
    }
  },
  "HeaderGlobalAction": {
    "description": "HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is\nessentially an Icon Button with an additional state to indicate whether it is\n\"active\". The active state comes from when a user clicks on the global action\nwhich should trigger a panel to appear.\n\nNote: children passed to this component should be an Icon.",
    "displayName": "HeaderGlobalAction",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide a custom icon for this global action"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying\nbutton"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an onClick handler that is called when the underlying\nbutton fires it's onclick event"
      },
      "isActive": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the action is currently active"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "HeaderMenuButton": {
    "description": "",
    "displayName": "HeaderMenuButton",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying\nbutton"
      },
      "onClick": {
        "type": { "name": "func" },
        "required": false,
        "description": "Optionally provide an onClick handler that is called when the underlying\nbutton fires it's onclick event"
      },
      "isActive": {
        "type": { "name": "bool" },
        "required": false,
        "description": ""
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "HeaderMenuItem": {
    "description": "",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Pass in children that are either a string or can be read as a string by\nscreen readers"
      },
      "role": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally supply a role for the underlying <li> node. Useful for resetting\n<ul> semantics for menus."
      }
    },
    "composes": ["./Link"]
  },
  "HeaderName": {
    "description": "",
    "displayName": "HeaderName",
    "props": {
      "prefix": {
        "defaultValue": { "value": "'IBM'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally specify a prefix to your header name. Useful for companies, for\nexample: IBM [Product Name] versus solely [Product Name]"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Pass in children that are either a string or can be read as a string by\nscreen readers"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "href": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an href for the name to link to"
      }
    },
    "composes": ["./Link"]
  },
  "HeaderNavigation": {
    "description": "",
    "displayName": "HeaderNavigation",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <nav> node"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide valid children of HeaderNavigation, for example `HeaderMenuItem`\nor `HeaderMenu`"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "HeaderPanel": {
    "description": "",
    "displayName": "HeaderPanel",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "expanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the panel is expanded"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "HeaderSideNavItems": {
    "description": "",
    "displayName": "HeaderSideNavItems",
    "props": {
      "hasDivider": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally specify if container will have a bottom divider to differentiate\nbetween original sidenav items and header menu items. False by default."
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying\nbutton"
      }
    }
  },
  "Switcher": {
    "description": "",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <ul> node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "expects to receive <SwitcherItem />"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "SwitcherItem": {
    "description": "",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Specify the text content for the link"
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "SwitcherDivider": {
    "description": "",
    "displayName": "SwitcherDivider",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      }
    }
  },
  "SkipToContent": {
    "description": "",
    "displayName": "SkipToContent",
    "props": {
      "children": {
        "defaultValue": {
          "value": "'Skip to main content'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "href": {
        "defaultValue": { "value": "'#main-content'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide the `href` to the id of the element on your package that is the\nmain content."
      },
      "tabIndex": {
        "defaultValue": { "value": "'0'", "computed": false },
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally override the default tabindex of 0"
      }
    }
  },
  "SideNav": {
    "description": "",
    "props": {
      "translateById": {
        "defaultValue": {
          "value": "id => {\n  const translations = {\n    'carbon.sidenav.state.open': 'Close',\n    'carbon.sidenav.state.closed': 'Open',\n  };\n  return translations[id];\n}",
          "computed": false
        },
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a custom function for translating all message ids within this\ncomponent. This function will take in two arguments: the mesasge Id and the\nstate of the component. From this, you should return a string representing\nthe label you want displayed or read by screen readers."
      },
      "defaultExpanded": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "If `true`, the SideNav will be open on initial render."
      },
      "isChildOfHeader": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "isFixedNav": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if sideNav is standalone"
      },
      "isPersistent": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if the sideNav will be persistent above the lg breakpoint"
      },
      "addFocusListeners": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether focus and blur listeners are added. They are by default."
      },
      "addMouseListeners": {
        "defaultValue": { "value": "true", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether mouse entry/exit listeners are added. They are by default."
      },
      "expanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "If `true`, the SideNav will be expanded, otherwise it will be collapsed.\nUsing this prop causes SideNav to become a controled component."
      },
      "onToggle": {
        "type": { "name": "func" },
        "required": false,
        "description": "An optional listener that is called when an event that would cause\ntoggling the SideNav occurs.\n\n@param {object} event\n@param {boolean} value"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "isRail": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Optional prop to display the side nav rail."
      }
    },
    "composes": ["../../prop-types/AriaPropTypes"]
  },
  "SideNavDetails": {
    "description": "",
    "displayName": "SideNavDetails",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Provide optional children to render in `SideNavDetails`. Useful for\nrendering the `SideNavSwitcher` component."
      },
      "title": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide the text that will be rendered as the title in the component"
      }
    }
  },
  "SideNavFooter": {
    "description": "SideNavFooter is used for rendering the button at the bottom of the side\nnavigation that is a part of the UI Shell. It is responsible for handling the\nuser interaction to expand or collapse the side navigation.",
    "displayName": "SideNavFooter",
    "props": {
      "assistiveText": {
        "defaultValue": {
          "value": "'Toggle opening or closing the side navigation'",
          "computed": false
        },
        "type": { "name": "string" },
        "required": false,
        "description": "Provide text to be read to screen readers and shown as a tooltip when\ninteracting with the toggle button in the footer"
      },
      "expanded": {
        "type": { "name": "bool" },
        "required": true,
        "description": "Specify whether the side navigation is expanded or collapsed"
      },
      "onToggle": {
        "type": { "name": "func" },
        "required": true,
        "description": "Provide a function that is called when the toggle button is interacted\nwith. Useful for controlling the expansion state of the side navigation."
      },
      "isSideNavExpanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavHeader": {
    "description": "",
    "displayName": "SideNavHeader",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "renderIcon": {
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": true,
        "description": "Provide an icon to render in the header of the side navigation. Should be\na React class."
      },
      "isSideNavExpanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavIcon": {
    "description": "",
    "displayName": "SideNavIcon",
    "props": {
      "small": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify whether the icon should be placed in a smaller bounding box"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      }
    }
  },
  "SideNavItem": {
    "description": "",
    "displayName": "SideNavItem",
    "props": {
      "large": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if this is a large variation of the SideNavItem"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      }
    }
  },
  "SideNavItems": {
    "description": "",
    "displayName": "SideNavItems",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      },
      "isSideNavExpanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavLink": {
    "description": "",
    "displayName": "SideNavLink",
    "props": {
      "element": {
        "defaultValue": { "value": "'a'", "computed": false },
        "required": false
      },
      "large": {
        "defaultValue": { "value": "false", "computed": false },
        "type": { "name": "bool" },
        "required": false,
        "description": "Specify if this is a large variation of the SideNavLink"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "renderIcon": {
        "type": {
          "name": "union",
          "value": [{ "name": "func" }, { "name": "object" }]
        },
        "required": false,
        "description": "Provide an icon to render in the side navigation link. Should be a React class."
      },
      "children": {
        "type": { "name": "string" },
        "required": true,
        "description": "Specify the text content for the link"
      },
      "isSideNavExpanded": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    },
    "composes": ["./Link"]
  },
  "SideNavLinkText": {
    "description": "",
    "displayName": "SideNavLinkText",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": true,
        "description": "Provide the content for the link text"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      }
    }
  },
  "SideNavMenuItem": {
    "description": "",
    "props": {
      "children": {
        "type": { "name": "node" },
        "required": false,
        "description": "Specify the childrento be rendered inside of the `SideNavMenuItem`"
      },
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "isActive": {
        "type": { "name": "bool" },
        "required": false,
        "description": "Optionally specify whether the link is \"active\". An active link is one that\nhas an href that is the same as the current page. Can also pass in\n`aria-current=\"page\"`, as well."
      }
    }
  },
  "SideNavSwitcher": {
    "description": "",
    "props": {
      "className": {
        "type": { "name": "string" },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "labelText": {
        "type": { "name": "string" },
        "required": true,
        "description": "Provide the label for the switcher. This will be the firt visible option\nwhen someone views this control"
      },
      "onChange": {
        "type": { "name": "func" },
        "required": false,
        "description": "Provide a callback function that is called whenever the switcher value is\nupdated"
      },
      "options": {
        "type": { "name": "arrayOf", "value": { "name": "string" } },
        "required": true,
        "description": "Provide an array of options to be rendered in the switcher as an\n`<option>`. The text value will be what is displayed to the user and is set\nas the `value` prop for each `<option>`."
      }
    }
  }
}
