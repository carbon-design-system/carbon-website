{
  "ToggleSmall": {
    "description": "",
    "methods": [],
    "displayName": "ToggleSmall",
    "props": {
      "defaultToggled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "onToggle": {
        "defaultValue": {
          "value": "function onToggle() {}",
          "computed": false
        },
        "required": false
      },
      "labelA": {
        "defaultValue": {
          "value": "'Off'",
          "computed": false
        },
        "required": false
      },
      "labelB": {
        "defaultValue": {
          "value": "'On'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "Toolbar": {
    "description": "",
    "methods": [],
    "displayName": "Toolbar",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify a collection of ToolbarItem's that should render in the Toolbar"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the containing Toolbar node"
      }
    }
  },
  "ToolbarItem": {
    "description": "",
    "methods": [],
    "displayName": "ToolbarItem",
    "props": {
      "placeHolderText": {
        "defaultValue": {
          "value": "'Provide placeHolderText'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the placeholder text for the ToolbarSearch component. Useful if\n`type` is set to 'search'"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the contents of the ToolbarItem"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the type of the ToolbarItem. The `search` type will render a\n`ToolbarSearch` component"
      }
    }
  },
  "ToolbarTitle": {
    "description": "",
    "methods": [],
    "props": {
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the title of the Toolbar"
      }
    }
  },
  "ToolbarOption": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the contents of the ToolbarOption"
      }
    }
  },
  "ToolbarDivider": {
    "description": "",
    "methods": []
  },
  "TooltipDefinition": {
    "description": "",
    "methods": [],
    "displayName": "TooltipDefinition",
    "props": {
      "direction": {
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip. Can be either top or bottom."
      },
      "align": {
        "defaultValue": {
          "value": "'start'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the alignment (to the trigger button) of the tooltip.\nCan be one of: start, center, or end."
      },
      "children": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify the tooltip trigger text that is rendered to the UI for the user to\ninteract with in order to display the tooltip."
      },
      "triggerClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the trigger element"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally specify a custom id for the tooltip. If one is not provided, we\ngenerate a unique id for you."
      },
      "tooltipText": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide the text that will be displayed in the tooltip when it is rendered.\nTODO: rename this prop (will be a breaking change)"
      }
    }
  },
  "TooltipIcon": {
    "description": "",
    "methods": [],
    "displayName": "TooltipIcon",
    "props": {
      "direction": {
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip. Can be either top or bottom."
      },
      "align": {
        "defaultValue": {
          "value": "'center'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the alignment (to the trigger button) of the tooltip.\nCan be one of: start, center, or end."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Specify an icon as children that will be used as the tooltip trigger. This\ncan be an icon from our Icon component, or a custom SVG element."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally specify a custom id for the tooltip. If one is not provided, we\ngenerate a unique id for you."
      },
      "tooltipText": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide the ARIA label for the tooltip.\nTODO: rename this prop (will be a breaking change)"
      }
    }
  },
  "UnorderedList": {
    "description": "",
    "methods": [],
    "displayName": "UnorderedList",
    "props": {
      "nested": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the list is nested, or not"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify a collection of ListItem's to be rendered in the UnorderedList"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the underlying <ul> node"
      }
    }
  },
  "SkeletonText": {
    "description": "",
    "methods": [],
    "displayName": "SkeletonText",
    "props": {
      "paragraph": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "will generate multiple lines of text"
      },
      "width": {
        "defaultValue": {
          "value": "'100%'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "width (in px or %) of single line of text or max-width of paragraph lines"
      },
      "heading": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "generates skeleton text at a larger size"
      },
      "lineCount": {
        "defaultValue": {
          "value": "3",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "the number of lines in a paragraph"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "SkeletonPlaceholder": {
    "description": "",
    "methods": [],
    "displayName": "SkeletonPlaceholder",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "the class to be applied to the component"
      }
    }
  },
  "DataTableSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "DataTableSkeleton",
    "props": {
      "rowCount": {
        "defaultValue": {
          "value": "5",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the number of rows that you want to render in the skeleton state"
      },
      "columnCount": {
        "defaultValue": {
          "value": "5",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the number of columns that you want to render in the skeleton state"
      },
      "zebra": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally specify whether you want the DataTable to be zebra striped"
      },
      "compact": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally specify whether you want the Skeleton to be rendered as a\ncompact DataTable"
      },
      "headers": {
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "shape",
              "value": {
                "key": {
                  "name": "string",
                  "required": false
                },
                "header": {
                  "name": "node",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "Optionally specify the displayed headers"
      }
    }
  },
  "AccordionSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "AccordionSkeleton",
    "props": {
      "open": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`false` to not display the first item opened"
      },
      "count": {
        "defaultValue": {
          "value": "4",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set number of items to render"
      },
      "uid": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.any)"
        },
        "required": false,
        "description": "Set unique identifier to generate unique item keys"
      }
    }
  },
  "ButtonSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "ButtonSkeleton",
    "props": {
      "small": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Button should be a small variant"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally specify an href for your Button to become an <a> element"
      }
    }
  },
  "DropdownSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "DropdownSkeleton",
    "props": {
      "inline": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      }
    }
  },
  "NumberInputSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "NumberInputSkeleton",
    "props": {
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      }
    }
  },
  "SearchSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "SearchSkeleton",
    "props": {
      "small": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Search should be a small variant"
      }
    }
  },
  "SelectSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "SelectSkeleton",
    "props": {
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      }
    }
  },
  "SliderSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "SliderSkeleton",
    "props": {
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      }
    }
  },
  "StructuredListSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "StructuredListSkeleton",
    "props": {
      "rowCount": {
        "defaultValue": {
          "value": "5",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "number of table rows"
      },
      "border": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether a border should be added to your StructuredListSkeleton"
      }
    }
  },
  "TextAreaSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "TextAreaSkeleton",
    "props": {
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      }
    }
  },
  "TextInputSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "TextInputSkeleton",
    "props": {
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      }
    }
  },
  "IconSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "IconSkeleton",
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The CSS styles."
      }
    }
  },
  "DatePickerSkeleton": {
    "description": "",
    "methods": [],
    "displayName": "DatePickerSkeleton",
    "props": {
      "range": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the skeleton should be of range date picker."
      }
    }
  },
  "Accordion": {
    "description": "",
    "methods": [],
    "displayName": "Accordion",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in the children that will be rendered within the Accordion"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "AccordionItem": {
    "description": "",
    "methods": [],
    "displayName": "AccordionItem",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide the contents of your AccordionItem"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The accordion title."
      },
      "renderExpando": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The callback function to render the expando button.\nCan be a React component class."
      },
      "iconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The description of the expando icon."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` to open the expando."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The handler of the massaged `click` event."
      },
      "onHeadingClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The handler of the massaged `click` event on the heading."
      }
    }
  },
  "Breadcrumb": {
    "description": "",
    "methods": [],
    "displayName": "Breadcrumb",
    "props": {
      "aria-label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the label for the breadcrumb container"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in the BreadcrumbItem's for your Breadcrumb"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "noTrailingSlash": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optional prop to omit the trailing slash for the breadcrumbs"
      }
    }
  },
  "BreadcrumbItem": {
    "description": "",
    "methods": [],
    "displayName": "BreadcrumbItem",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in content that will be inside of the BreadcrumbItem"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional string representing the link location for the BreadcrumbItem"
      },
      "isCurrentPage": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Provide if this breadcrumb item represents the current page"
      }
    }
  },
  "Button": {
    "description": "",
    "methods": [],
    "props": {
      "tabIndex": {
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Optional prop to specify the tabIndex of the Button"
      },
      "type": {
        "defaultValue": {
          "value": "'button'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'submit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Optional prop to specify the type of the Button"
      },
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Button should be disabled, or not"
      },
      "kind": {
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        },
        "type": {
          "name": "custom",
          "raw": "ButtonTypes.buttonKind.isRequired"
        },
        "required": false,
        "description": "Specify the kind of Button you want to create"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the content of your Button"
      },
      "as": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Specify how the button itself should be rendered.\nMake sure to apply all props to the root node and render children appropriately"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be added to your Button"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'field'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the size of the button, from a list of available sizes.\nFor `default` buttons, this prop can remain unspecified."
      },
      "small": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.bool, \"\\nThe prop `small` for Button has been deprecated in favor of `size`. Please use `size=\\\"small\\\"` instead.\")"
        },
        "required": false,
        "description": "Deprecated in v10 in favor of `size`.\nSpecify whether the Button should be a small variant"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally specify an href for your Button to become an <a> element"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional prop to specify the role of the Button"
      },
      "renderIcon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Optional prop to allow overriding the icon rendering.\nCan be a React component class"
      },
      "iconDescription": {
        "type": {
          "name": "custom",
          "raw": "function iconDescription(props) {\n  if (props.renderIcon && !props.children && !props.iconDescription) {\n    return new Error('renderIcon property specified without also providing an iconDescription property.');\n  }\n\n  return undefined;\n}"
        },
        "required": false,
        "description": "If specifying the `renderIcon` prop, provide a description for that icon that can\nbe read by screen readers"
      },
      "hasIconOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the button is an icon-only button"
      },
      "tooltipPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left."
      },
      "tooltipAlignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end."
      }
    }
  },
  "Checkbox": {
    "description": "",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": {
          "value": "function onChange() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Receives three arguments: true/false, the checkbox's id, and the dom event.\n`(value, id, event) => console.log({value, id, event})`"
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Checkbox is in an indeterminate state"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the underlying input should be checked"
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the underlying input should be checked by default"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the <label> node"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Checkbox should be disabled"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide an `id` to uniquely identify the Checkbox input"
      },
      "labelText": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user"
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify a title for the <label> node for the Checkbox"
      },
      "wrapperClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name to be placed on the wrapping element"
      }
    }
  },
  "DangerButton": {
    "description": "",
    "methods": [],
    "displayName": "DangerButton"
  },
  "Table": {
    "description": "",
    "methods": [],
    "displayName": "Table",
    "props": {
      "isSortable": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`false` If true, will apply sorting styles"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "useZebraStyles": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` to add useZebraStyles striping."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'compact'",
              "computed": false
            },
            {
              "value": "'short'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            },
            {
              "value": "'tall'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "`normal` Change the row height of table"
      },
      "useStaticWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`false` If true, will use a width of 'auto' instead of 100%"
      },
      "shouldShowBorder": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`false` If true, will remove the table border"
      },
      "stickyHeader": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`false` If true, will keep the header sticky (only data rows will scroll)"
      }
    }
  },
  "TableBatchAction": {
    "description": "",
    "methods": [],
    "displayName": "TableBatchAction",
    "props": {
      "renderIcon": {
        "defaultValue": {
          "value": "iconAddSolid",
          "computed": true
        },
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Optional function to render your own icon in the underlying button"
      },
      "hasIconOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the button is an icon-only button"
      },
      "iconDescription": {
        "type": {
          "name": "custom",
          "raw": "function iconDescription(props) {\n  if (props.renderIcon && !props.children && !props.iconDescription) {\n    return new Error('renderIcon property specified without also providing an iconDescription property.');\n  }\n\n  return undefined;\n}"
        },
        "required": false,
        "description": "If specifying the `renderIcon` prop, provide a description for that icon that can\nbe read by screen readers"
      }
    }
  },
  "TableBatchActions": {
    "description": "",
    "methods": [],
    "displayName": "TableBatchActions",
    "props": {
      "translateWithId": {
        "defaultValue": {
          "value": "function translateWithId(id, state) {\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n\n  return \"\".concat(state.totalSelected, \" \").concat(translationKeys[id]);\n}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Supply a method to translate internal strings with your i18n tool of\nchoice. Translation keys are avabile on the `translationKeys` field for\nthis component."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "shouldShowBatchActions": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean specifier for whether or not the batch action bar should be\ndisplayed"
      },
      "totalSelected": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Numeric representation of the total number of items selected in a table.\nThis number is used to derive the selection message"
      },
      "onCancel": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Hook required to listen for when the user initiates a cancel request\nthrough this comopnent"
      }
    }
  },
  "TableBody": {
    "description": "",
    "methods": [],
    "displayName": "TableBody",
    "props": {
      "aria-live": {
        "defaultValue": {
          "value": "'polite'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'polite'",
              "computed": false
            },
            {
              "value": "'assertive'",
              "computed": false
            },
            {
              "value": "'off'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "`polite` Adjust the notification behavior of screen readers"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "TableContainer": {
    "description": "",
    "methods": [],
    "displayName": "TableContainer",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide a title for the Table"
      },
      "description": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Optional description text for the Table"
      }
    }
  },
  "TableExpandHeader": {
    "description": "",
    "methods": [],
    "displayName": "TableExpandHeader"
  },
  "TableExpandRow": {
    "description": "",
    "methods": [],
    "displayName": "TableExpandRow",
    "props": {
      "expandHeader": {
        "defaultValue": {
          "value": "'expand'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the matching th node in the table head. Addresses a11y concerns outlined here: https://www.ibm.com/able/guidelines/ci162/info_and_relationships.html and https://www.w3.org/TR/WCAG20-TECHS/H43"
      },
      "ariaLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify the string read by a voice reader when the expand trigger is\nfocused"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Specify whether this row is expanded or not. This helps coordinate data\nattributes so that `TableExpandRow` and `TableExapndedRow` work together"
      },
      "onExpand": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Hook for when a listener initiates a request to expand the given row"
      },
      "expandIconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The description of the chevron right icon, to be put in its SVG `<title>` element."
      }
    }
  },
  "TableExpandedRow": {
    "description": "",
    "methods": [],
    "displayName": "TableExpandedRow",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in the contents for your TableExpandedRow"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "colSpan": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The width of the expanded row's internal cell"
      }
    }
  },
  "TableHeader": {
    "description": "",
    "methods": [],
    "displayName": "TableHeader",
    "props": {
      "isSortable": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether this header is one through which a user can sort the table"
      },
      "scope": {
        "defaultValue": {
          "value": "'col'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the scope of this table header. You can find more info about this\nattribute at the following URL:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope"
      },
      "translateWithId": {
        "defaultValue": {
          "value": "function translateWithId(key, _ref) {\n  var sortDirection = _ref.sortDirection,\n      isSortHeader = _ref.isSortHeader,\n      sortStates = _ref.sortStates;\n\n  if (key === translationKeys.iconDescription) {\n    if (isSortHeader) {\n      // When transitioning, we know that the sequence of states is as follows:\n      // NONE -> ASC -> DESC -> NONE\n      if (sortDirection === sortStates.NONE) {\n        return 'Sort rows by this header in ascending order';\n      }\n\n      if (sortDirection === sortStates.ASC) {\n        return 'Sort rows by this header in descending order';\n      }\n\n      return 'Unsort rows by this header';\n    }\n\n    return 'Sort rows by this header in ascending order';\n  }\n\n  return '';\n}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Supply a method to translate internal strings with your i18n tool of\nchoice. Translation keys are avabile on the `translationKeys` field for\nthis component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in children that will be embedded in the table header label"
      },
      "isSortHeader": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether this header is the header by which a table is being sorted\nby"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Hook that is invoked when the header is clicked"
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "Object.values(sortStates)"
        },
        "required": false,
        "description": "Specify which direction we are currently sorting by, should be one of DESC,\nNONE, or ASC."
      }
    }
  },
  "TableRow": {
    "description": "",
    "methods": [],
    "displayName": "TableRow",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the container node"
      }
    }
  },
  "TableSelectAll": {
    "description": "",
    "methods": [],
    "displayName": "TableSelectAll",
    "props": {
      "ariaLabel": {
        "defaultValue": {
          "value": "'Select all rows in the table'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the aria label for the underlying input control"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Specify whether all items are selected, or not"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide an `id` for the underlying input control"
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the selection only has a subset of all items"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide a `name` for the underlying input control"
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Provide a handler to listen to when a user initiates a selection request"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class names of the cell that wraps the underlying input control"
      }
    }
  },
  "TableSelectRow": {
    "description": "",
    "methods": [],
    "displayName": "TableSelectRow",
    "props": {
      "ariaLabel": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify the aria label for the underlying input control"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Specify whether all items are selected, or not"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide an `id` for the underlying input control"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide a `name` for the underlying input control"
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Provide a handler to listen to when a user initiates a selection request"
      },
      "radio": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control should be a radio button or inline checkbox"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class names of the cell that wraps the underlying input control"
      }
    }
  },
  "TableToolbar": {
    "description": "",
    "methods": [],
    "displayName": "TableToolbar"
  },
  "TableToolbarAction": {
    "description": "",
    "methods": [],
    "displayName": "TableToolbarAction",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "TableToolbarSearch": {
    "description": "",
    "methods": [],
    "displayName": "TableToolbarSearch",
    "props": {
      "translateWithId": {
        "defaultValue": {
          "value": "function translateWithId(id) {\n  return translationKeys[id];\n}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Provide custom text for the component for each translation id"
      },
      "persistent": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the search should be allowed to expand"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class name for the search container"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional id for the search container"
      },
      "searchContainerClasses": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional className for the overal container of the Search"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Provide an optional hook that is called each time the input is updated"
      },
      "placeHolderText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional placeholder text for the Search component"
      },
      "labelText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional label text for the Search component icon"
      },
      "persistant": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.bool, \"\\nThe prop `persistant` for TableToolbarSearch has been deprecated in favor of `persistent`. Please use `persistent` instead.\")"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "TableToolbarMenu": {
    "description": "",
    "methods": [],
    "displayName": "TableToolbarMenu",
    "props": {
      "renderIcon": {
        "defaultValue": {
          "value": "Settings16",
          "computed": true
        },
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Optional prop to allow overriding the default menu icon"
      },
      "iconDescription": {
        "defaultValue": {
          "value": "'Settings'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The description of the menu icon."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class name for the toolbar menu"
      }
    }
  },
  "Filename": {
    "description": "",
    "methods": [],
    "displayName": "Filename",
    "props": {
      "iconDescription": {
        "defaultValue": {
          "value": "'Uploading file'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description of the SVG icon to denote file upload status"
      },
      "status": {
        "defaultValue": {
          "value": "'uploading'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'edit'",
              "computed": false
            },
            {
              "value": "'complete'",
              "computed": false
            },
            {
              "value": "'uploading'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Status of the file upload"
      },
      "tabIndex": {
        "defaultValue": {
          "value": "'0'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom tabIndex value for the <Filename>"
      }
    }
  },
  "FileUploaderDropContainer": {
    "description": "",
    "methods": [],
    "displayName": "FileUploaderDropContainer",
    "props": {
      "tabIndex": {
        "defaultValue": {
          "value": "0",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Provide a custom tabIndex value for the <FileUploaderButton>"
      },
      "labelText": {
        "defaultValue": {
          "value": "'Add file'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the label text to be read by screen readers when interacting with\nthis control"
      },
      "multiple": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the component should accept multiple files to upload"
      },
      "onAddFiles": {
        "defaultValue": {
          "value": "function onAddFiles() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Event handler that is called after files are added to the uploader\nThe event handler signature looks like `onAddFiles(evt, { addedFiles })`"
      },
      "accept": {
        "defaultValue": {
          "value": "[]",
          "computed": false
        },
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Specify the types of files that this input should be able to receive"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied to the container node"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a unique id for the underlying <input> node"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a name for the underlying <input> node"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an accessibility role for the <FileUploaderButton>"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether file input is disabled"
      }
    }
  },
  "FileUploaderItem": {
    "description": "",
    "methods": [],
    "displayName": "FileUploaderItem",
    "props": {
      "uuid": {
        "defaultValue": {
          "value": "uid()",
          "computed": true
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Unique identifier for the file object"
      },
      "status": {
        "defaultValue": {
          "value": "'uploading'",
          "computed": false
        },
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'uploading'",
              "computed": false
            },
            {
              "value": "'edit'",
              "computed": false
            },
            {
              "value": "'complete'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Status of the file upload"
      },
      "onDelete": {
        "defaultValue": {
          "value": "function onDelete() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Event handler that is called after removing a file from the file uploader\nThe event handler signature looks like `onDelete(evt, { uuid })`"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the uploaded file"
      },
      "iconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Description of status icon (displayed in native tooltip)"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the currently uploaded file is invalid"
      },
      "errorSubject": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Error message subject for an invalid file upload"
      },
      "errorBody": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Error message body for an invalid file upload"
      }
    }
  },
  "Form": {
    "description": "",
    "methods": [],
    "displayName": "Form",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide children to be rendered inside of the <form> element"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied on the containing <form> node"
      }
    }
  },
  "FormGroup": {
    "description": "",
    "methods": [],
    "displayName": "FormGroup",
    "props": {
      "invalid": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the <FormGroup> is invalid"
      },
      "message": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the message should be displayed in the <FormGroup>"
      },
      "messageText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the text for the message in the <FormGroup>"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide the children form elements to be rendered inside of the <fieldset>"
      },
      "legendText": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide the text to be rendered inside of the fieldset <legend>"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <fieldset> node"
      }
    }
  },
  "FormItem": {
    "description": "",
    "methods": [],
    "displayName": "FormItem",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide content to be rendered in the form item"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied to the containing node"
      }
    }
  },
  "FormLabel": {
    "description": "",
    "methods": [],
    "displayName": "FormLabel",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the content of the form label"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <label> node"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a unique id for the given <FormLabel>"
      }
    }
  },
  "Icon": {
    "description": "",
    "methods": [],
    "displayName": "Icon",
    "props": {
      "fillRule": {
        "defaultValue": {
          "value": "'evenodd'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `<svg>` `fillRule` attribute."
      },
      "role": {
        "defaultValue": {
          "value": "'img'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `role` attribute."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name."
      },
      "iconTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The icon title."
      },
      "description": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The icon description."
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `<svg>` `fill` attribute."
      },
      "height": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `<svg>` `height` attribute."
      },
      "icon": {
        "type": {
          "name": "shape",
          "value": {
            "width": {
              "name": "string",
              "required": false
            },
            "height": {
              "name": "string",
              "required": false
            },
            "viewBox": {
              "name": "string",
              "required": true
            },
            "svgData": {
              "name": "object",
              "required": true
            }
          }
        },
        "required": false,
        "description": "The icon data."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The CSS styles."
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `<svg>` `viewbox` attribute."
      },
      "width": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `<svg>` `width` attribute."
      },
      "iconRef": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The `ref` callback for the icon."
      }
    }
  },
  "InlineLoading": {
    "description": "",
    "methods": [],
    "displayName": "InlineLoading",
    "props": {
      "successDelay": {
        "defaultValue": {
          "value": "1500",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Provide a delay for the `setTimeout` for success"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify a custom className to be applied to the container node"
      },
      "success": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.bool, \"\\nThe prop `success` for InlineLoading has been deprecated in favor of `status`. Please use `status=\\\"finished\\\"` instead.\")"
        },
        "required": false,
        "description": "Specify whether the load was successful"
      },
      "status": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inactive'",
              "computed": false
            },
            {
              "value": "'active'",
              "computed": false
            },
            {
              "value": "'finished'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the loading status"
      },
      "description": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the description for the inline loading text"
      },
      "iconDescription": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the description for the inline loading text"
      },
      "onSuccess": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Provide an optional handler to be inovked when <InlineLoading> is\nsuccessful"
      }
    }
  },
  "Link": {
    "description": "",
    "methods": [],
    "displayName": "Link",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide the content for the Link"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className to be applied to the containing <a> node"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the `href` attribute for the <a> node"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the control should be disabled, or not"
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      }
    }
  },
  "ListItem": {
    "description": "",
    "methods": [],
    "displayName": "ListItem",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the content for the ListItem"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to apply to the underlying <li> node"
      }
    }
  },
  "OrderedList": {
    "description": "",
    "methods": [],
    "displayName": "OrderedList",
    "props": {
      "nested": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether this ordered list is nested inside of another nested list"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide list items to be rendered in the ordered list"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional className to be applied to the containing <ol> node"
      }
    }
  },
  "PrimaryButton": {
    "description": "",
    "methods": [],
    "displayName": "PrimaryButton"
  },
  "ProgressStep": {
    "description": "",
    "methods": [],
    "displayName": "ProgressStep",
    "props": {
      "renderLabel": {
        "defaultValue": {
          "value": "function defaultRenderLabel(props) {\n  return React.createElement(\"p\", props);\n}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Index of the current step within the ProgressIndicator"
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide the label for the <ProgressStep>"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional className to be applied to the containing <li> node"
      },
      "current": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the step is the current step"
      },
      "complete": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the step has been completed"
      },
      "description": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description for the <ProgressStep>"
      },
      "invalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the step is invalid"
      },
      "secondaryLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional secondary label"
      },
      "overflowTooltipProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Provide the props that describe a progress step tooltip"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the step is disabled"
      },
      "tooltipId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of the tooltip content."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback called if the step is clicked or the enter key is pressed"
      }
    }
  },
  "SearchFilterButton": {
    "description": "The filter button for `<Search>`.",
    "methods": [],
    "displayName": "SearchFilterButton",
    "props": {
      "labelText": {
        "defaultValue": {
          "value": "'Search'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The a11y label text."
      },
      "iconDescription": {
        "defaultValue": {
          "value": "'filter'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The icon description."
      }
    }
  },
  "SecondaryButton": {
    "description": "",
    "methods": [],
    "displayName": "SecondaryButton"
  },
  "Select": {
    "description": "",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "labelText": {
        "defaultValue": {
          "value": "'Select'",
          "computed": false
        },
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide label text to be read by screen readers when interacting with the\ncontrol"
      },
      "inline": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the inline version of this control"
      },
      "iconDescription": {
        "defaultValue": {
          "value": "'open list of options'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a description for the twistie icon that can be read by screen readers"
      },
      "invalid": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the currently value is invalid."
      },
      "invalidText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Message which is displayed if the value is invalid."
      },
      "helperText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the light version of this control"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide the contents of your Select"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the node containing the label and the select box"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify a custom `id` for the `<select>`"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Provide an optional `onChange` hook that is called each time the value of\nthe underlying <input> changes"
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Optionally provide the default value of the `<select>`"
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the label should be hidden, or not"
      },
      "noLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reserved for use with <Pagination> component. Will not render a label for the\nselect since Pagination renders one for us."
      }
    }
  },
  "SelectItem": {
    "description": "",
    "methods": [],
    "displayName": "SelectItem",
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the <SelectItem> should be disabled"
      },
      "hidden": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the <SelectItem> is hidden"
      },
      "value": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Specify the value of the <SelectItem>"
      },
      "text": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the contents of your <SelectItem>"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the node"
      }
    }
  },
  "SelectItemGroup": {
    "description": "",
    "methods": [],
    "displayName": "SelectItemGroup",
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the <SelectItemGroup> should be disabled"
      },
      "label": {
        "defaultValue": {
          "value": "'Provide label'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the label to be displayed"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide the contents of your <SelectItemGroup>"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the node"
      }
    }
  },
  "Switch": {
    "description": "",
    "methods": [],
    "displayName": "Switch",
    "props": {
      "selected": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether your Switch is selected. Reserved for usage in ContentSwitcher"
      },
      "text": {
        "defaultValue": {
          "value": "'Provide text'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the contents of your Switch"
      },
      "onClick": {
        "defaultValue": {
          "value": "function onClick() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A handler that is invoked when a user clicks on the control.\nReserved for usage in ContentSwitcher"
      },
      "onKeyDown": {
        "defaultValue": {
          "value": "function onKeyDown() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A handler that is invoked on the key down event for the control.\nReserved for usage in ContentSwitcher"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be added to your Switch"
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The index of your Switch in your ContentSwitcher that is used for event handlers.\nReserved for usage in ContentSwitcher"
      },
      "name": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Provide the name of your Switch that is used for event handlers"
      }
    }
  },
  "TabContent": {
    "description": "",
    "methods": [],
    "displayName": "TabContent",
    "props": {
      "selected": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the TabContent is selected"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Pass in content to render inside of the TabContent"
      }
    }
  },
  "Tag": {
    "description": "",
    "methods": [],
    "displayName": "Tag",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide content to be rendered inside of a <Tag>"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className that is applied to the containing <span>"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"red\"",
              "computed": false
            },
            {
              "value": "\"magenta\"",
              "computed": false
            },
            {
              "value": "\"purple\"",
              "computed": false
            },
            {
              "value": "\"blue\"",
              "computed": false
            },
            {
              "value": "\"cyan\"",
              "computed": false
            },
            {
              "value": "\"teal\"",
              "computed": false
            },
            {
              "value": "\"green\"",
              "computed": false
            },
            {
              "value": "\"gray\"",
              "computed": false
            },
            {
              "value": "\"cool-gray\"",
              "computed": false
            },
            {
              "value": "\"warm-gray\"",
              "computed": false
            }
          ]
        },
        "required": true,
        "description": "Specify the type of the <Tag>"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if the <Tag> is disabled"
      },
      "filter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine if <Tag> is a filter/chip"
      }
    }
  },
  "TextArea": {
    "description": "",
    "methods": [],
    "displayName": "TextArea",
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is disabled"
      },
      "onChange": {
        "defaultValue": {
          "value": "function onChange() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onChange` handler that is called whenever <textarea>\nis updated"
      },
      "onClick": {
        "defaultValue": {
          "value": "function onClick() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is called whenever the\n<textarea> is clicked"
      },
      "placeholder": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the placeholder attribute for the <textarea>"
      },
      "rows": {
        "defaultValue": {
          "value": "4",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the rows attribute for the <textarea>"
      },
      "cols": {
        "defaultValue": {
          "value": "50",
          "computed": false
        },
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the `cols` attribute for the underlying <textarea> node"
      },
      "invalid": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is currently invalid"
      },
      "invalidText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the text that is displayed when the control is in an invalid state"
      },
      "helperText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the light version of this control"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a custom className that is applied directly to the underlying\n<textarea> node"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Optionally provide the default value of the <textarea>"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide a unique identifier for the control"
      },
      "labelText": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Provide the current value of the <textarea>"
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden"
      }
    }
  },
  "TextInput": {
    "description": "",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the <input> should be disabled"
      },
      "type": {
        "defaultValue": {
          "value": "'text'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the type of the <input>"
      },
      "onChange": {
        "defaultValue": {
          "value": "function onChange() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onChange` handler that is called whenever <input>\nis updated"
      },
      "onClick": {
        "defaultValue": {
          "value": "function onClick() {}",
          "computed": false
        },
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Optionally provide an `onClick` handler that is called whenever the\n<input> is clicked"
      },
      "invalid": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the control is currently invalid"
      },
      "invalidText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the text that is displayed when the control is in an invalid state"
      },
      "helperText": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide text that is used alongside the control label for additional help"
      },
      "light": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`true` to use the light version."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify an optional className to be applied to the <input> node"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Optionally provide the default value of the <input>"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Specify a custom `id` for the <input>"
      },
      "labelText": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide the text that will be read by a screen reader when visiting this\ncontrol"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify the placeholder attribute for the <input>"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Specify the value of the <input>"
      },
      "hideLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether you want the underlying label to be visually hidden"
      }
    }
  },
  "Content": {
    "description": "",
    "methods": [],
    "displayName": "Content",
    "props": {
      "tagName": {
        "defaultValue": {
          "value": "'main'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally specify the tag of the content node. Defaults to `main`"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the container"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide children nodes to be rendered in the content container"
      }
    }
  },
  "Header": {
    "description": "",
    "methods": [],
    "displayName": "Header"
  },
  "HeaderContainer": {
    "description": "",
    "methods": [],
    "displayName": "HeaderContainer",
    "props": {
      "isSideNavExpanded": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying <header>"
      }
    }
  },
  "HeaderGlobalAction": {
    "description": "HeaderGlobalAction is used as a part of the `HeaderGlobalBar`. It is\nessentially an Icon Button with an additional state to indicate whether it is\n\"active\". The active state comes from when a user clicks on the global action\nwhich should trigger a panel to appear.\n\nNote: children passed to this component should be an Icon.",
    "methods": [],
    "displayName": "HeaderGlobalAction"
  },
  "HeaderMenuButton": {
    "description": "",
    "methods": [],
    "displayName": "HeaderMenuButton"
  },
  "HeaderMenuItem": {
    "description": "",
    "methods": []
  },
  "HeaderName": {
    "description": "",
    "methods": [],
    "displayName": "HeaderName",
    "props": {
      "prefix": {
        "defaultValue": {
          "value": "'IBM'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "HeaderPanel": {
    "description": "",
    "methods": [],
    "displayName": "HeaderPanel"
  },
  "HeaderSideNavItems": {
    "description": "",
    "methods": [],
    "displayName": "HeaderSideNavItems",
    "props": {
      "hasDivider": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally specify if container will have a bottom divider to differentiate\nbetween original sidenav items and header menu items. False by default."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally provide a custom class name that is applied to the underlying\nbutton"
      }
    }
  },
  "Switcher": {
    "description": "",
    "methods": []
  },
  "SwitcherItem": {
    "description": "",
    "methods": []
  },
  "SwitcherDivider": {
    "description": "",
    "methods": [],
    "displayName": "SwitcherDivider",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      }
    }
  },
  "SkipToContent": {
    "description": "",
    "methods": [],
    "displayName": "SkipToContent",
    "props": {
      "children": {
        "defaultValue": {
          "value": "'Skip to main content'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "href": {
        "defaultValue": {
          "value": "'#main-content'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide the `href` to the id of the element on your package that is the\nmain content."
      },
      "tabIndex": {
        "defaultValue": {
          "value": "'0'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally override the default tabindex of 0"
      }
    }
  },
  "SideNav": {
    "description": "",
    "methods": [],
    "props": {
      "translateById": {
        "defaultValue": {
          "value": "function translateById(id) {\n  var translations = {\n    'carbon.sidenav.state.open': 'Close',\n    'carbon.sidenav.state.closed': 'Open'\n  };\n  return translations[id];\n}",
          "computed": false
        },
        "required": false
      },
      "defaultExpanded": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "isChildOfHeader": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "isFixedNav": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      },
      "isPersistent": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "addFocusListeners": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      },
      "addMouseListeners": {
        "defaultValue": {
          "value": "true",
          "computed": false
        },
        "required": false
      }
    }
  },
  "SideNavDetails": {
    "description": "",
    "methods": [],
    "displayName": "SideNavDetails",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optionally provide a custom class to apply to the underlying <li> node"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Provide optional children to render in `SideNavDetails`. Useful for\nrendering the `SideNavSwitcher` component."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide the text that will be rendered as the title in the component"
      }
    }
  },
  "SideNavFooter": {
    "description": "SideNavFooter is used for rendering the button at the bottom of the side\nnavigation that is a part of the UI Shell. It is responsible for handling the\nuser interaction to expand or collapse the side navigation.",
    "methods": [],
    "displayName": "SideNavFooter",
    "props": {
      "assistiveText": {
        "defaultValue": {
          "value": "'Toggle opening or closing the side navigation'",
          "computed": false
        },
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide text to be read to screen readers and shown as a tooltip when\ninteracting with the toggle button in the footer"
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Specify whether the side navigation is expanded or collapsed"
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Provide a function that is called when the toggle button is interacted\nwith. Useful for controlling the expansion state of the side navigation."
      },
      "isSideNavExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavHeader": {
    "description": "",
    "methods": [],
    "displayName": "SideNavHeader",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "renderIcon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": true,
        "description": "Provide an icon to render in the header of the side navigation. Should be\na React class."
      },
      "isSideNavExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavIcon": {
    "description": "",
    "methods": [],
    "displayName": "SideNavIcon",
    "props": {
      "small": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the icon should be placed in a smaller bounding box"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      }
    }
  },
  "SideNavItem": {
    "description": "",
    "methods": [],
    "displayName": "SideNavItem",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify if this is a large variation of the SideNavItem"
      }
    }
  },
  "SideNavItems": {
    "description": "",
    "methods": [],
    "displayName": "SideNavItems",
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide a single icon as the child to `SideNavIcon` to render in the\ncontainer"
      },
      "isSideNavExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Property to indicate if the side nav container is open (or not). Use to\nkeep local state and styling in step with the SideNav expansion state."
      }
    }
  },
  "SideNavLink": {
    "description": "",
    "methods": [],
    "displayName": "SideNavLink",
    "props": {
      "element": {
        "defaultValue": {
          "value": "'a'",
          "computed": false
        },
        "required": false
      },
      "large": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "SideNavLinkText": {
    "description": "",
    "methods": [],
    "displayName": "SideNavLinkText",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Provide the content for the link text"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      }
    }
  },
  "SideNavMenuItem": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Specify the childrento be rendered inside of the `SideNavMenuItem`"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "isActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally specify whether the link is \"active\". An active link is one that\nhas an href that is the same as the current page. Can also pass in\n`aria-current=\"page\"`, as well."
      }
    }
  },
  "SideNavSwitcher": {
    "description": "",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provide an optional class to be applied to the containing node"
      },
      "labelText": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Provide the label for the switcher. This will be the firt visible option\nwhen someone views this control"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Provide a callback function that is called whenever the switcher value is\nupdated"
      },
      "options": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": true,
        "description": "Provide an array of options to be rendered in the switcher as an\n`<option>`. The text value will be what is displayed to the user and is set\nas the `value` prop for each `<option>`."
      }
    }
  }
}
